#!/usr/bin/env bash

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! openapi-generator (https://openapi-generator.tech)
# ! FROM OPENAPI SPECIFICATION IN JSON.
# !
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#
# This is a Bash client for Dynamic API Specification.
#
# LICENSE:
# 
#
# CONTACT:
# 
#
# MORE INFORMATION:
# 
#

# For improved pattern matching in case statements
shopt -s extglob

###############################################################################
#
# Make sure Bash is at least in version 4.3
#
###############################################################################
if ! ( (("${BASH_VERSION:0:1}" == "4")) && (("${BASH_VERSION:2:1}" >= "3")) ) \
  && ! (("${BASH_VERSION:0:1}" >= "5")); then
    echo ""
    echo "Sorry - your Bash version is ${BASH_VERSION}"
    echo ""
    echo "You need at least Bash 4.3 to run this script."
    echo ""
    exit 1
fi

###############################################################################
#
# Global variables
#
###############################################################################

##
# The filename of this script for help messages
script_name=$(basename "$0")

##
# Map for headers passed after operation as KEY:VALUE
declare -A header_arguments


##
# Map for operation parameters passed after operation as PARAMETER=VALUE
# These will be mapped to appropriate path or query parameters
# The values in operation_parameters are arrays, so that multiple values
# can be provided for the same parameter if allowed by API specification
declare -A operation_parameters

##
# Declare colors with autodetection if output is terminal
if [ -t 1 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    MAGENTA="$(tput setaf 5)"
    CYAN="$(tput setaf 6)"
    WHITE="$(tput setaf 7)"
    BOLD="$(tput bold)"
    OFF="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    CYAN=""
    WHITE=""
    BOLD=""
    OFF=""
fi

declare -a result_color_table=( "$WHITE" "$WHITE" "$GREEN" "$YELLOW" "$WHITE" "$MAGENTA" "$WHITE" )

##
# This array stores the minimum number of required occurrences for parameter
# 0 - optional
# 1 - required
declare -A operation_parameters_minimum_occurrences
operation_parameters_minimum_occurrences["createComment:::meta"]=0
operation_parameters_minimum_occurrences["createComment:::CreateCommentRequest"]=0
operation_parameters_minimum_occurrences["getActivities:::fields"]=0
operation_parameters_minimum_occurrences["getActivities:::limit"]=0
operation_parameters_minimum_occurrences["getActivities:::meta"]=0
operation_parameters_minimum_occurrences["getActivities:::offset"]=0
operation_parameters_minimum_occurrences["getActivities:::sort"]=0
operation_parameters_minimum_occurrences["getActivities:::filter"]=0
operation_parameters_minimum_occurrences["getActivities:::search"]=0
operation_parameters_minimum_occurrences["getActivity:::id"]=1
operation_parameters_minimum_occurrences["getActivity:::fields"]=0
operation_parameters_minimum_occurrences["getActivity:::meta"]=0
operation_parameters_minimum_occurrences["getAsset:::id"]=1
operation_parameters_minimum_occurrences["getAsset:::key"]=0
operation_parameters_minimum_occurrences["getAsset:::transforms"]=0
operation_parameters_minimum_occurrences["getAsset:::download"]=0
operation_parameters_minimum_occurrences["login:::LoginRequest"]=0
operation_parameters_minimum_occurrences["logout:::LogoutRequest"]=0
operation_parameters_minimum_occurrences["oauthProvider:::provider"]=1
operation_parameters_minimum_occurrences["oauthProvider:::redirect"]=0
operation_parameters_minimum_occurrences["passwordRequest:::PasswordRequestRequest"]=0
operation_parameters_minimum_occurrences["passwordReset:::PasswordResetRequest"]=0
operation_parameters_minimum_occurrences["refresh:::RefreshRequest"]=0
operation_parameters_minimum_occurrences["getCollection:::id"]=1
operation_parameters_minimum_occurrences["getCollection:::meta"]=0
operation_parameters_minimum_occurrences["getCollections:::offset"]=0
operation_parameters_minimum_occurrences["getCollections:::meta"]=0
operation_parameters_minimum_occurrences["getCollectionField:::collection"]=1
operation_parameters_minimum_occurrences["getCollectionField:::id"]=1
operation_parameters_minimum_occurrences["getCollectionFields:::collection"]=1
operation_parameters_minimum_occurrences["getCollectionFields:::sort"]=0
operation_parameters_minimum_occurrences["getFields:::limit"]=0
operation_parameters_minimum_occurrences["getFields:::sort"]=0
operation_parameters_minimum_occurrences["createFile:::CreateFileRequest"]=0
operation_parameters_minimum_occurrences["deleteFile:::id"]=1
operation_parameters_minimum_occurrences["getFile:::id"]=1
operation_parameters_minimum_occurrences["getFile:::fields"]=0
operation_parameters_minimum_occurrences["getFile:::meta"]=0
operation_parameters_minimum_occurrences["getFiles:::fields"]=0
operation_parameters_minimum_occurrences["getFiles:::limit"]=0
operation_parameters_minimum_occurrences["getFiles:::offset"]=0
operation_parameters_minimum_occurrences["getFiles:::sort"]=0
operation_parameters_minimum_occurrences["getFiles:::filter"]=0
operation_parameters_minimum_occurrences["getFiles:::search"]=0
operation_parameters_minimum_occurrences["getFiles:::meta"]=0
operation_parameters_minimum_occurrences["updateFile:::id"]=1
operation_parameters_minimum_occurrences["updateFile:::file"]=1
operation_parameters_minimum_occurrences["updateFile:::fields"]=0
operation_parameters_minimum_occurrences["updateFile:::meta"]=0
operation_parameters_minimum_occurrences["updateFile:::title"]=0
operation_parameters_minimum_occurrences["updateFile:::filename_download"]=0
operation_parameters_minimum_occurrences["updateFile:::description"]=0
operation_parameters_minimum_occurrences["updateFile:::folder"]=0
operation_parameters_minimum_occurrences["updateFile:::tags"]=0
operation_parameters_minimum_occurrences["updateFiles:::fields"]=0
operation_parameters_minimum_occurrences["updateFiles:::limit"]=0
operation_parameters_minimum_occurrences["updateFiles:::meta"]=0
operation_parameters_minimum_occurrences["updateFiles:::offset"]=0
operation_parameters_minimum_occurrences["updateFiles:::sort"]=0
operation_parameters_minimum_occurrences["updateFiles:::filter"]=0
operation_parameters_minimum_occurrences["updateFiles:::search"]=0
operation_parameters_minimum_occurrences["updateFiles:::UpdateFilesRequest"]=0
operation_parameters_minimum_occurrences["getFlow:::id"]=1
operation_parameters_minimum_occurrences["createFolder:::fields"]=0
operation_parameters_minimum_occurrences["createFolder:::meta"]=0
operation_parameters_minimum_occurrences["createFolder:::CreateFolderRequest"]=0
operation_parameters_minimum_occurrences["deleteFolder:::id"]=1
operation_parameters_minimum_occurrences["getFolder:::id"]=1
operation_parameters_minimum_occurrences["getFolder:::fields"]=0
operation_parameters_minimum_occurrences["getFolder:::meta"]=0
operation_parameters_minimum_occurrences["getFolders:::fields"]=0
operation_parameters_minimum_occurrences["getFolders:::limit"]=0
operation_parameters_minimum_occurrences["getFolders:::offset"]=0
operation_parameters_minimum_occurrences["getFolders:::sort"]=0
operation_parameters_minimum_occurrences["getFolders:::filter"]=0
operation_parameters_minimum_occurrences["getFolders:::search"]=0
operation_parameters_minimum_occurrences["getFolders:::meta"]=0
operation_parameters_minimum_occurrences["updateFolder:::id"]=1
operation_parameters_minimum_occurrences["updateFolder:::fields"]=0
operation_parameters_minimum_occurrences["updateFolder:::meta"]=0
operation_parameters_minimum_occurrences["updateFolder:::UpdateFolderRequest"]=0
operation_parameters_minimum_occurrences["updateFolders:::fields"]=0
operation_parameters_minimum_occurrences["updateFolders:::limit"]=0
operation_parameters_minimum_occurrences["updateFolders:::meta"]=0
operation_parameters_minimum_occurrences["updateFolders:::offset"]=0
operation_parameters_minimum_occurrences["updateFolders:::sort"]=0
operation_parameters_minimum_occurrences["updateFolders:::filter"]=0
operation_parameters_minimum_occurrences["updateFolders:::search"]=0
operation_parameters_minimum_occurrences["updateFolders:::UpdateFoldersRequest"]=0
operation_parameters_minimum_occurrences["createItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["createItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_minimum_occurrences["createItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["createItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_minimum_occurrences["createItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["createItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_minimum_occurrences["createItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_minimum_occurrences["createItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_minimum_occurrences["createItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_minimum_occurrences["createItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["createItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_minimum_occurrences["createItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["createItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_minimum_occurrences["createItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_minimum_occurrences["createItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["createItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_minimum_occurrences["createItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["createItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_minimum_occurrences["createItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_minimum_occurrences["createItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_minimum_occurrences["createItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_minimum_occurrences["createItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_minimum_occurrences["createItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_minimum_occurrences["createItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["createItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_minimum_occurrences["createItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["createItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_minimum_occurrences["createItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["createItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_minimum_occurrences["createItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["createItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_minimum_occurrences["createItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["createItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_minimum_occurrences["createItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["createItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_minimum_occurrences["createItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["createItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_minimum_occurrences["createItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["createItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_minimum_occurrences["createItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["createItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_minimum_occurrences["createItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["createItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_minimum_occurrences["createItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["createItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_minimum_occurrences["createItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["createItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_minimum_occurrences["createItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["createItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_minimum_occurrences["createItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["createItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_minimum_occurrences["createItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_minimum_occurrences["createItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_minimum_occurrences["createItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_minimum_occurrences["createItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_minimum_occurrences["createItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["createItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_minimum_occurrences["createItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["createItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_minimum_occurrences["createItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["createItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_minimum_occurrences["createItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_minimum_occurrences["createItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["createItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_minimum_occurrences["createItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["createItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_minimum_occurrences["createItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["createItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_minimum_occurrences["createItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["createItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_minimum_occurrences["createItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["createItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_minimum_occurrences["createItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["createItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_minimum_occurrences["createItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_minimum_occurrences["createItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_minimum_occurrences["createItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_minimum_occurrences["createItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_minimum_occurrences["createItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_minimum_occurrences["createItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["createItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_minimum_occurrences["createItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["createItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_minimum_occurrences["createItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["createItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsAccounts:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsAppointments:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsBudgets:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsCampaigns:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsCarbonFootprint:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsCompanyAssets:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsContent:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsContracts:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsCrm:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsDepartment:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsDistribution:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsEmailCampaigns:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsEmployeeDirectory:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsEnergyEfficiency:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsEnvironmentalCompliance:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsEvents:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsExpenses:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsFacilities:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsFeedback:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsForum:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsFulfillment:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsGovernanceandEthics:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsHelpdesk:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsInventory:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsInvoices:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsInvoicing:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsLifecycle:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsLiveChat:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsLoyalty:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsMaintenance:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsPayroll:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsPerformance:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsPointofSale:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsPolicy:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsProcurement:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsProductionBatch:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsProject:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsPurchaseOrders:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsQualityCheck:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsQuotes:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsRecruit:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsRegulations:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsRentals:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsShipment:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsSocialMedia:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsSocialResponsibility:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsSuppliers:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsSurveys:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsSustainableSupplyChain:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsTaxes:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsTraining:::id"]=1
operation_parameters_minimum_occurrences["deleteSingleItemsTransactions:::id"]=1
operation_parameters_minimum_occurrences["readItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::limit"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::offset"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::sort"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::filter"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::search"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::limit"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::offset"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::sort"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::filter"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::search"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::limit"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::offset"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::sort"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::filter"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::search"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::search"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::search"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::search"]=0
operation_parameters_minimum_occurrences["readItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["readItemsContent:::limit"]=0
operation_parameters_minimum_occurrences["readItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["readItemsContent:::offset"]=0
operation_parameters_minimum_occurrences["readItemsContent:::sort"]=0
operation_parameters_minimum_occurrences["readItemsContent:::filter"]=0
operation_parameters_minimum_occurrences["readItemsContent:::search"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::limit"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::offset"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::sort"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::filter"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::search"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::search"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::limit"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::offset"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::sort"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::filter"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::search"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::limit"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::offset"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::sort"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::filter"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::search"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::search"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::search"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::search"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::search"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::search"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::limit"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::offset"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::sort"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::filter"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::search"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::limit"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::offset"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::sort"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::filter"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::search"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::limit"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::offset"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::sort"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::filter"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::search"]=0
operation_parameters_minimum_occurrences["readItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["readItemsForum:::limit"]=0
operation_parameters_minimum_occurrences["readItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["readItemsForum:::offset"]=0
operation_parameters_minimum_occurrences["readItemsForum:::sort"]=0
operation_parameters_minimum_occurrences["readItemsForum:::filter"]=0
operation_parameters_minimum_occurrences["readItemsForum:::search"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::limit"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::offset"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::sort"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::filter"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::search"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::limit"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::offset"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::sort"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::filter"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::search"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::limit"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::offset"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::sort"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::filter"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::search"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::limit"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::offset"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::sort"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::filter"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::search"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::limit"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::offset"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::sort"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::filter"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::search"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::limit"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::offset"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::sort"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::filter"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::search"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::limit"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::offset"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::sort"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::filter"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::search"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::limit"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::offset"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::sort"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::filter"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::search"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::limit"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::offset"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::sort"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::filter"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::search"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::limit"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::offset"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::sort"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::filter"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::search"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::search"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::search"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::search"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::search"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::limit"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::offset"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::sort"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::filter"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::search"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::limit"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::offset"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::sort"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::filter"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::search"]=0
operation_parameters_minimum_occurrences["readItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["readItemsProject:::limit"]=0
operation_parameters_minimum_occurrences["readItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["readItemsProject:::offset"]=0
operation_parameters_minimum_occurrences["readItemsProject:::sort"]=0
operation_parameters_minimum_occurrences["readItemsProject:::filter"]=0
operation_parameters_minimum_occurrences["readItemsProject:::search"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::search"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::limit"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::offset"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::sort"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::filter"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::search"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::limit"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::offset"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::sort"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::filter"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::search"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::limit"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::offset"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::sort"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::filter"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::search"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::limit"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::offset"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::sort"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::filter"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::search"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::limit"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::offset"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::sort"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::filter"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::search"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::limit"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::offset"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::sort"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::filter"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::search"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::search"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::search"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::search"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::search"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::search"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::limit"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::offset"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::sort"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::filter"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::search"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::limit"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::offset"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::sort"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::filter"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::search"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::limit"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::offset"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::sort"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::filter"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsContent:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsContent:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsContracts:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsContracts:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsCrm:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCrm:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsEvents:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEvents:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsForum:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsForum:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsInventory:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsInventory:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsProject:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsProject:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsRentals:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsRentals:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsShipment:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsShipment:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsTraining:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsTraining:::version"]=0
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::version"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::search"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::search"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::search"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::search"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::search"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::search"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::search"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::search"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::search"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::search"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::search"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::search"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::search"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::search"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::search"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::search"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::search"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::search"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::search"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::search"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::search"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::search"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::search"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::search"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::search"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::search"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::search"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::search"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::search"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::search"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::search"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::search"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::search"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::ItemsAccounts"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::ItemsAppointments"]=0
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::ItemsBudgets"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::ItemsCampaigns"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::ItemsCarbonFootprint"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::ItemsCompanyAssets"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContent:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContent:::ItemsContent"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::ItemsContracts"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::ItemsCrm"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::ItemsDepartment"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::ItemsDistribution"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::ItemsEmailCampaigns"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::ItemsEmployeeDirectory"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::ItemsEnergyEfficiency"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::ItemsEnvironmentalCompliance"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::ItemsEvents"]=0
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::ItemsExpenses"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::ItemsFacilities"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::ItemsFeedback"]=0
operation_parameters_minimum_occurrences["updateSingleItemsForum:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsForum:::ItemsForum"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::ItemsFulfillment"]=0
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::ItemsGovernanceandEthics"]=0
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::ItemsHelpdesk"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::ItemsInventory"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::ItemsInvoices"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::ItemsInvoicing"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::ItemsLifecycle"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::ItemsLiveChat"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::ItemsLoyalty"]=0
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::ItemsMaintenance"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::ItemsPayroll"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::ItemsPerformance"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::ItemsPointofSale"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::ItemsPolicy"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::ItemsProcurement"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::ItemsProductionBatch"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProject:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProject:::ItemsProject"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::ItemsPurchaseOrders"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::ItemsQualityCheck"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::ItemsQuotes"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::ItemsRecruit"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::ItemsRegulations"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::ItemsRentals"]=0
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::ItemsShipment"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::ItemsSocialMedia"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::ItemsSocialResponsibility"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::ItemsSuppliers"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::ItemsSurveys"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::ItemsSustainableSupplyChain"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::ItemsTaxes"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::ItemsTraining"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::ItemsTransactions"]=0
operation_parameters_minimum_occurrences["createItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["createItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsAccounts:::id"]=1
operation_parameters_minimum_occurrences["readItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::limit"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::offset"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::sort"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::filter"]=0
operation_parameters_minimum_occurrences["readItemsAccounts:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsAccounts:::version"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::search"]=0
operation_parameters_minimum_occurrences["updateItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAccounts:::ItemsAccounts"]=0
operation_parameters_minimum_occurrences["createItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["createItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsAppointments:::id"]=1
operation_parameters_minimum_occurrences["readItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::limit"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::offset"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::sort"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::filter"]=0
operation_parameters_minimum_occurrences["readItemsAppointments:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsAppointments:::version"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::search"]=0
operation_parameters_minimum_occurrences["updateItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsAppointments:::ItemsAppointments"]=0
operation_parameters_minimum_occurrences["createItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["createItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsBudgets:::id"]=1
operation_parameters_minimum_occurrences["readItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::limit"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::offset"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::sort"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::filter"]=0
operation_parameters_minimum_occurrences["readItemsBudgets:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsBudgets:::version"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::search"]=0
operation_parameters_minimum_occurrences["updateItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsBudgets:::ItemsBudgets"]=0
operation_parameters_minimum_occurrences["createItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsCampaigns:::id"]=1
operation_parameters_minimum_occurrences["readItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCampaigns:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCampaigns:::version"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCampaigns:::ItemsCampaigns"]=0
operation_parameters_minimum_occurrences["createItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsCarbonFootprint:::id"]=1
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCarbonFootprint:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCarbonFootprint:::version"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCarbonFootprint:::ItemsCarbonFootprint"]=0
operation_parameters_minimum_occurrences["createItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsCompanyAssets:::id"]=1
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCompanyAssets:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCompanyAssets:::version"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCompanyAssets:::ItemsCompanyAssets"]=0
operation_parameters_minimum_occurrences["createItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["createItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsContent:::id"]=1
operation_parameters_minimum_occurrences["readItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["readItemsContent:::limit"]=0
operation_parameters_minimum_occurrences["readItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["readItemsContent:::offset"]=0
operation_parameters_minimum_occurrences["readItemsContent:::sort"]=0
operation_parameters_minimum_occurrences["readItemsContent:::filter"]=0
operation_parameters_minimum_occurrences["readItemsContent:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsContent:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsContent:::version"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::search"]=0
operation_parameters_minimum_occurrences["updateItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContent:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsContent:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContent:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContent:::ItemsContent"]=0
operation_parameters_minimum_occurrences["createItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["createItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsContracts:::id"]=1
operation_parameters_minimum_occurrences["readItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::limit"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::offset"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::sort"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::filter"]=0
operation_parameters_minimum_occurrences["readItemsContracts:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsContracts:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsContracts:::version"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::search"]=0
operation_parameters_minimum_occurrences["updateItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsContracts:::ItemsContracts"]=0
operation_parameters_minimum_occurrences["createItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["createItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsCrm:::id"]=1
operation_parameters_minimum_occurrences["readItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::limit"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::offset"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::sort"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::filter"]=0
operation_parameters_minimum_occurrences["readItemsCrm:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsCrm:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsCrm:::version"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::search"]=0
operation_parameters_minimum_occurrences["updateItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsCrm:::ItemsCrm"]=0
operation_parameters_minimum_occurrences["createItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["createItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsDepartment:::id"]=1
operation_parameters_minimum_occurrences["readItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::limit"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::offset"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::sort"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::filter"]=0
operation_parameters_minimum_occurrences["readItemsDepartment:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsDepartment:::version"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::search"]=0
operation_parameters_minimum_occurrences["updateItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDepartment:::ItemsDepartment"]=0
operation_parameters_minimum_occurrences["createItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["createItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsDistribution:::id"]=1
operation_parameters_minimum_occurrences["readItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::limit"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::offset"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::sort"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::filter"]=0
operation_parameters_minimum_occurrences["readItemsDistribution:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsDistribution:::version"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::search"]=0
operation_parameters_minimum_occurrences["updateItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsDistribution:::ItemsDistribution"]=0
operation_parameters_minimum_occurrences["createItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsEmailCampaigns:::id"]=1
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEmailCampaigns:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmailCampaigns:::version"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmailCampaigns:::ItemsEmailCampaigns"]=0
operation_parameters_minimum_occurrences["createItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsEmployeeDirectory:::id"]=1
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEmployeeDirectory:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEmployeeDirectory:::version"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEmployeeDirectory:::ItemsEmployeeDirectory"]=0
operation_parameters_minimum_occurrences["createItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsEnergyEfficiency:::id"]=1
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEnergyEfficiency:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnergyEfficiency:::version"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnergyEfficiency:::ItemsEnergyEfficiency"]=0
operation_parameters_minimum_occurrences["createItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsEnvironmentalCompliance:::id"]=1
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEnvironmentalCompliance:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEnvironmentalCompliance:::version"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEnvironmentalCompliance:::ItemsEnvironmentalCompliance"]=0
operation_parameters_minimum_occurrences["createItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["createItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsEvents:::id"]=1
operation_parameters_minimum_occurrences["readItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::limit"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::offset"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::sort"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::filter"]=0
operation_parameters_minimum_occurrences["readItemsEvents:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsEvents:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsEvents:::version"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::search"]=0
operation_parameters_minimum_occurrences["updateItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsEvents:::ItemsEvents"]=0
operation_parameters_minimum_occurrences["createItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["createItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsExpenses:::id"]=1
operation_parameters_minimum_occurrences["readItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::limit"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::offset"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::sort"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::filter"]=0
operation_parameters_minimum_occurrences["readItemsExpenses:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsExpenses:::version"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::search"]=0
operation_parameters_minimum_occurrences["updateItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsExpenses:::ItemsExpenses"]=0
operation_parameters_minimum_occurrences["createItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["createItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsFacilities:::id"]=1
operation_parameters_minimum_occurrences["readItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::limit"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::offset"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::sort"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::filter"]=0
operation_parameters_minimum_occurrences["readItemsFacilities:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsFacilities:::version"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::search"]=0
operation_parameters_minimum_occurrences["updateItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFacilities:::ItemsFacilities"]=0
operation_parameters_minimum_occurrences["createItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["createItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsFeedback:::id"]=1
operation_parameters_minimum_occurrences["readItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::limit"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::offset"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::sort"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::filter"]=0
operation_parameters_minimum_occurrences["readItemsFeedback:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsFeedback:::version"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::search"]=0
operation_parameters_minimum_occurrences["updateItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFeedback:::ItemsFeedback"]=0
operation_parameters_minimum_occurrences["createItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["createItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsForum:::id"]=1
operation_parameters_minimum_occurrences["readItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["readItemsForum:::limit"]=0
operation_parameters_minimum_occurrences["readItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["readItemsForum:::offset"]=0
operation_parameters_minimum_occurrences["readItemsForum:::sort"]=0
operation_parameters_minimum_occurrences["readItemsForum:::filter"]=0
operation_parameters_minimum_occurrences["readItemsForum:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsForum:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsForum:::version"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::search"]=0
operation_parameters_minimum_occurrences["updateItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsForum:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsForum:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsForum:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsForum:::ItemsForum"]=0
operation_parameters_minimum_occurrences["createItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["createItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsFulfillment:::id"]=1
operation_parameters_minimum_occurrences["readItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::limit"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::offset"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::sort"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::filter"]=0
operation_parameters_minimum_occurrences["readItemsFulfillment:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsFulfillment:::version"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::search"]=0
operation_parameters_minimum_occurrences["updateItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsFulfillment:::ItemsFulfillment"]=0
operation_parameters_minimum_occurrences["createItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["createItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsGovernanceandEthics:::id"]=1
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::limit"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::offset"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::sort"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::filter"]=0
operation_parameters_minimum_occurrences["readItemsGovernanceandEthics:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsGovernanceandEthics:::version"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::search"]=0
operation_parameters_minimum_occurrences["updateItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsGovernanceandEthics:::ItemsGovernanceandEthics"]=0
operation_parameters_minimum_occurrences["createItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["createItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsHelpdesk:::id"]=1
operation_parameters_minimum_occurrences["readItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::limit"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::offset"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::sort"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::filter"]=0
operation_parameters_minimum_occurrences["readItemsHelpdesk:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsHelpdesk:::version"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::search"]=0
operation_parameters_minimum_occurrences["updateItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsHelpdesk:::ItemsHelpdesk"]=0
operation_parameters_minimum_occurrences["createItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["createItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsInventory:::id"]=1
operation_parameters_minimum_occurrences["readItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::limit"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::offset"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::sort"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::filter"]=0
operation_parameters_minimum_occurrences["readItemsInventory:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsInventory:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsInventory:::version"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::search"]=0
operation_parameters_minimum_occurrences["updateItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInventory:::ItemsInventory"]=0
operation_parameters_minimum_occurrences["createItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["createItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsInvoices:::id"]=1
operation_parameters_minimum_occurrences["readItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::limit"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::offset"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::sort"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::filter"]=0
operation_parameters_minimum_occurrences["readItemsInvoices:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoices:::version"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::search"]=0
operation_parameters_minimum_occurrences["updateItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoices:::ItemsInvoices"]=0
operation_parameters_minimum_occurrences["createItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["createItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsInvoicing:::id"]=1
operation_parameters_minimum_occurrences["readItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::limit"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::offset"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::sort"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::filter"]=0
operation_parameters_minimum_occurrences["readItemsInvoicing:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsInvoicing:::version"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::search"]=0
operation_parameters_minimum_occurrences["updateItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsInvoicing:::ItemsInvoicing"]=0
operation_parameters_minimum_occurrences["createItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["createItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsLifecycle:::id"]=1
operation_parameters_minimum_occurrences["readItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::limit"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::offset"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::sort"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::filter"]=0
operation_parameters_minimum_occurrences["readItemsLifecycle:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsLifecycle:::version"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::search"]=0
operation_parameters_minimum_occurrences["updateItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLifecycle:::ItemsLifecycle"]=0
operation_parameters_minimum_occurrences["createItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["createItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsLiveChat:::id"]=1
operation_parameters_minimum_occurrences["readItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::limit"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::offset"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::sort"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::filter"]=0
operation_parameters_minimum_occurrences["readItemsLiveChat:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsLiveChat:::version"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::search"]=0
operation_parameters_minimum_occurrences["updateItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLiveChat:::ItemsLiveChat"]=0
operation_parameters_minimum_occurrences["createItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["createItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsLoyalty:::id"]=1
operation_parameters_minimum_occurrences["readItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::limit"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::offset"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::sort"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::filter"]=0
operation_parameters_minimum_occurrences["readItemsLoyalty:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsLoyalty:::version"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::search"]=0
operation_parameters_minimum_occurrences["updateItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsLoyalty:::ItemsLoyalty"]=0
operation_parameters_minimum_occurrences["createItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["createItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsMaintenance:::id"]=1
operation_parameters_minimum_occurrences["readItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::limit"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::offset"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::sort"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::filter"]=0
operation_parameters_minimum_occurrences["readItemsMaintenance:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsMaintenance:::version"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::search"]=0
operation_parameters_minimum_occurrences["updateItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsMaintenance:::ItemsMaintenance"]=0
operation_parameters_minimum_occurrences["createItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsPayroll:::id"]=1
operation_parameters_minimum_occurrences["readItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPayroll:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPayroll:::version"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPayroll:::ItemsPayroll"]=0
operation_parameters_minimum_occurrences["createItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsPerformance:::id"]=1
operation_parameters_minimum_occurrences["readItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPerformance:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPerformance:::version"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPerformance:::ItemsPerformance"]=0
operation_parameters_minimum_occurrences["createItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsPointofSale:::id"]=1
operation_parameters_minimum_occurrences["readItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPointofSale:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPointofSale:::version"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPointofSale:::ItemsPointofSale"]=0
operation_parameters_minimum_occurrences["createItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsPolicy:::id"]=1
operation_parameters_minimum_occurrences["readItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPolicy:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPolicy:::version"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPolicy:::ItemsPolicy"]=0
operation_parameters_minimum_occurrences["createItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["createItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsProcurement:::id"]=1
operation_parameters_minimum_occurrences["readItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::limit"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::offset"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::sort"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::filter"]=0
operation_parameters_minimum_occurrences["readItemsProcurement:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsProcurement:::version"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::search"]=0
operation_parameters_minimum_occurrences["updateItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProcurement:::ItemsProcurement"]=0
operation_parameters_minimum_occurrences["createItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["createItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsProductionBatch:::id"]=1
operation_parameters_minimum_occurrences["readItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::limit"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::offset"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::sort"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::filter"]=0
operation_parameters_minimum_occurrences["readItemsProductionBatch:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsProductionBatch:::version"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::search"]=0
operation_parameters_minimum_occurrences["updateItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProductionBatch:::ItemsProductionBatch"]=0
operation_parameters_minimum_occurrences["createItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["createItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsProject:::id"]=1
operation_parameters_minimum_occurrences["readItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["readItemsProject:::limit"]=0
operation_parameters_minimum_occurrences["readItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["readItemsProject:::offset"]=0
operation_parameters_minimum_occurrences["readItemsProject:::sort"]=0
operation_parameters_minimum_occurrences["readItemsProject:::filter"]=0
operation_parameters_minimum_occurrences["readItemsProject:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsProject:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsProject:::version"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::search"]=0
operation_parameters_minimum_occurrences["updateItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProject:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsProject:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProject:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsProject:::ItemsProject"]=0
operation_parameters_minimum_occurrences["createItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["createItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsPurchaseOrders:::id"]=1
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::limit"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::offset"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::sort"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::filter"]=0
operation_parameters_minimum_occurrences["readItemsPurchaseOrders:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsPurchaseOrders:::version"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::search"]=0
operation_parameters_minimum_occurrences["updateItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsPurchaseOrders:::ItemsPurchaseOrders"]=0
operation_parameters_minimum_occurrences["createItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["createItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsQualityCheck:::id"]=1
operation_parameters_minimum_occurrences["readItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::limit"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::offset"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::sort"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::filter"]=0
operation_parameters_minimum_occurrences["readItemsQualityCheck:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsQualityCheck:::version"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::search"]=0
operation_parameters_minimum_occurrences["updateItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQualityCheck:::ItemsQualityCheck"]=0
operation_parameters_minimum_occurrences["createItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["createItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsQuotes:::id"]=1
operation_parameters_minimum_occurrences["readItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::limit"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::offset"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::sort"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::filter"]=0
operation_parameters_minimum_occurrences["readItemsQuotes:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsQuotes:::version"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::search"]=0
operation_parameters_minimum_occurrences["updateItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsQuotes:::ItemsQuotes"]=0
operation_parameters_minimum_occurrences["createItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["createItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsRecruit:::id"]=1
operation_parameters_minimum_occurrences["readItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::limit"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::offset"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::sort"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::filter"]=0
operation_parameters_minimum_occurrences["readItemsRecruit:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsRecruit:::version"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::search"]=0
operation_parameters_minimum_occurrences["updateItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRecruit:::ItemsRecruit"]=0
operation_parameters_minimum_occurrences["createItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["createItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsRegulations:::id"]=1
operation_parameters_minimum_occurrences["readItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::limit"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::offset"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::sort"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::filter"]=0
operation_parameters_minimum_occurrences["readItemsRegulations:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsRegulations:::version"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::search"]=0
operation_parameters_minimum_occurrences["updateItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRegulations:::ItemsRegulations"]=0
operation_parameters_minimum_occurrences["createItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["createItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsRentals:::id"]=1
operation_parameters_minimum_occurrences["readItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::limit"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::offset"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::sort"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::filter"]=0
operation_parameters_minimum_occurrences["readItemsRentals:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsRentals:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsRentals:::version"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::search"]=0
operation_parameters_minimum_occurrences["updateItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsRentals:::ItemsRentals"]=0
operation_parameters_minimum_occurrences["createItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["createItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsShipment:::id"]=1
operation_parameters_minimum_occurrences["readItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::limit"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::offset"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::sort"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::filter"]=0
operation_parameters_minimum_occurrences["readItemsShipment:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsShipment:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsShipment:::version"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::search"]=0
operation_parameters_minimum_occurrences["updateItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsShipment:::ItemsShipment"]=0
operation_parameters_minimum_occurrences["createItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsSocialMedia:::id"]=1
operation_parameters_minimum_occurrences["readItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSocialMedia:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialMedia:::version"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialMedia:::ItemsSocialMedia"]=0
operation_parameters_minimum_occurrences["createItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsSocialResponsibility:::id"]=1
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSocialResponsibility:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSocialResponsibility:::version"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSocialResponsibility:::ItemsSocialResponsibility"]=0
operation_parameters_minimum_occurrences["createItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsSuppliers:::id"]=1
operation_parameters_minimum_occurrences["readItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSuppliers:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSuppliers:::version"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSuppliers:::ItemsSuppliers"]=0
operation_parameters_minimum_occurrences["createItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsSurveys:::id"]=1
operation_parameters_minimum_occurrences["readItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSurveys:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSurveys:::version"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSurveys:::ItemsSurveys"]=0
operation_parameters_minimum_occurrences["createItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["createItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsSustainableSupplyChain:::id"]=1
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::limit"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::offset"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::sort"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::filter"]=0
operation_parameters_minimum_occurrences["readItemsSustainableSupplyChain:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsSustainableSupplyChain:::version"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::search"]=0
operation_parameters_minimum_occurrences["updateItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsSustainableSupplyChain:::ItemsSustainableSupplyChain"]=0
operation_parameters_minimum_occurrences["createItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["createItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsTaxes:::id"]=1
operation_parameters_minimum_occurrences["readItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::limit"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::offset"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::sort"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::filter"]=0
operation_parameters_minimum_occurrences["readItemsTaxes:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsTaxes:::version"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::search"]=0
operation_parameters_minimum_occurrences["updateItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTaxes:::ItemsTaxes"]=0
operation_parameters_minimum_occurrences["createItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["createItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsTraining:::id"]=1
operation_parameters_minimum_occurrences["readItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::limit"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::offset"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::sort"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::filter"]=0
operation_parameters_minimum_occurrences["readItemsTraining:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsTraining:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsTraining:::version"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::search"]=0
operation_parameters_minimum_occurrences["updateItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTraining:::ItemsTraining"]=0
operation_parameters_minimum_occurrences["createItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["createItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_minimum_occurrences["deleteSingleItemsTransactions:::id"]=1
operation_parameters_minimum_occurrences["readItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::limit"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::offset"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::sort"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::filter"]=0
operation_parameters_minimum_occurrences["readItemsTransactions:::search"]=0
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::id"]=1
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["readSingleItemsTransactions:::version"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::limit"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::offset"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::sort"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::filter"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::search"]=0
operation_parameters_minimum_occurrences["updateItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::id"]=1
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::fields"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::meta"]=0
operation_parameters_minimum_occurrences["updateSingleItemsTransactions:::ItemsTransactions"]=0
operation_parameters_minimum_occurrences["getPermission:::id"]=1
operation_parameters_minimum_occurrences["getPermission:::fields"]=0
operation_parameters_minimum_occurrences["getPermission:::meta"]=0
operation_parameters_minimum_occurrences["getPermissions:::fields"]=0
operation_parameters_minimum_occurrences["getPermissions:::limit"]=0
operation_parameters_minimum_occurrences["getPermissions:::offset"]=0
operation_parameters_minimum_occurrences["getPermissions:::meta"]=0
operation_parameters_minimum_occurrences["getPermissions:::sort"]=0
operation_parameters_minimum_occurrences["getPermissions:::filter"]=0
operation_parameters_minimum_occurrences["getPermissions:::search"]=0
operation_parameters_minimum_occurrences["getPermissions:::page"]=0
operation_parameters_minimum_occurrences["createPreset:::fields"]=0
operation_parameters_minimum_occurrences["createPreset:::meta"]=0
operation_parameters_minimum_occurrences["createPreset:::CreatePresetRequest"]=0
operation_parameters_minimum_occurrences["deletePreset:::id"]=1
operation_parameters_minimum_occurrences["getPreset:::id"]=1
operation_parameters_minimum_occurrences["getPreset:::fields"]=0
operation_parameters_minimum_occurrences["getPreset:::meta"]=0
operation_parameters_minimum_occurrences["getPresets:::fields"]=0
operation_parameters_minimum_occurrences["getPresets:::limit"]=0
operation_parameters_minimum_occurrences["getPresets:::offset"]=0
operation_parameters_minimum_occurrences["getPresets:::page"]=0
operation_parameters_minimum_occurrences["getPresets:::sort"]=0
operation_parameters_minimum_occurrences["getPresets:::filter"]=0
operation_parameters_minimum_occurrences["getPresets:::search"]=0
operation_parameters_minimum_occurrences["getPresets:::meta"]=0
operation_parameters_minimum_occurrences["updatePreset:::id"]=1
operation_parameters_minimum_occurrences["updatePreset:::fields"]=0
operation_parameters_minimum_occurrences["updatePreset:::meta"]=0
operation_parameters_minimum_occurrences["updatePreset:::UpdatePresetRequest"]=0
operation_parameters_minimum_occurrences["updatePresets:::fields"]=0
operation_parameters_minimum_occurrences["updatePresets:::limit"]=0
operation_parameters_minimum_occurrences["updatePresets:::meta"]=0
operation_parameters_minimum_occurrences["updatePresets:::offset"]=0
operation_parameters_minimum_occurrences["updatePresets:::sort"]=0
operation_parameters_minimum_occurrences["updatePresets:::filter"]=0
operation_parameters_minimum_occurrences["updatePresets:::search"]=0
operation_parameters_minimum_occurrences["updatePresets:::UpdatePresetsRequest"]=0
operation_parameters_minimum_occurrences["getRelation:::id"]=1
operation_parameters_minimum_occurrences["getRelation:::fields"]=0
operation_parameters_minimum_occurrences["getRelation:::meta"]=0
operation_parameters_minimum_occurrences["getRelations:::fields"]=0
operation_parameters_minimum_occurrences["getRelations:::limit"]=0
operation_parameters_minimum_occurrences["getRelations:::offset"]=0
operation_parameters_minimum_occurrences["getRelations:::meta"]=0
operation_parameters_minimum_occurrences["getRelations:::sort"]=0
operation_parameters_minimum_occurrences["getRelations:::filter"]=0
operation_parameters_minimum_occurrences["getRelations:::search"]=0
operation_parameters_minimum_occurrences["getRelations:::page"]=0
operation_parameters_minimum_occurrences["getRole:::id"]=1
operation_parameters_minimum_occurrences["getRole:::fields"]=0
operation_parameters_minimum_occurrences["getRole:::meta"]=0
operation_parameters_minimum_occurrences["getRoles:::fields"]=0
operation_parameters_minimum_occurrences["getRoles:::limit"]=0
operation_parameters_minimum_occurrences["getRoles:::offset"]=0
operation_parameters_minimum_occurrences["getRoles:::meta"]=0
operation_parameters_minimum_occurrences["getRoles:::sort"]=0
operation_parameters_minimum_occurrences["getRoles:::filter"]=0
operation_parameters_minimum_occurrences["getRoles:::search"]=0
operation_parameters_minimum_occurrences["getRoles:::page"]=0
operation_parameters_minimum_occurrences["schemaApply:::SchemaApplyRequest"]=1
operation_parameters_minimum_occurrences["schemaDiff:::SchemaSnapshot200Response"]=1
operation_parameters_minimum_occurrences["schemaDiff:::force"]=0
operation_parameters_minimum_occurrences["schemaSnapshot:::export"]=0
operation_parameters_minimum_occurrences["serverInfo:::super_admin_token"]=1
operation_parameters_minimum_occurrences["getSettings:::limit"]=0
operation_parameters_minimum_occurrences["getSettings:::offset"]=0
operation_parameters_minimum_occurrences["getSettings:::meta"]=0
operation_parameters_minimum_occurrences["getSettings:::page"]=0
operation_parameters_minimum_occurrences["getMe:::fields"]=0
operation_parameters_minimum_occurrences["getMe:::meta"]=0
operation_parameters_minimum_occurrences["getUser:::id"]=1
operation_parameters_minimum_occurrences["getUser:::fields"]=0
operation_parameters_minimum_occurrences["getUser:::meta"]=0
operation_parameters_minimum_occurrences["getUsers:::fields"]=0
operation_parameters_minimum_occurrences["getUsers:::limit"]=0
operation_parameters_minimum_occurrences["getUsers:::offset"]=0
operation_parameters_minimum_occurrences["getUsers:::meta"]=0
operation_parameters_minimum_occurrences["getUsers:::sort"]=0
operation_parameters_minimum_occurrences["getUsers:::filter"]=0
operation_parameters_minimum_occurrences["getUsers:::search"]=0
operation_parameters_minimum_occurrences["updateLastUsedPageMe:::UpdateLastUsedPageMeRequest"]=0
operation_parameters_minimum_occurrences["updateUser:::id"]=1
operation_parameters_minimum_occurrences["updateUser:::fields"]=0
operation_parameters_minimum_occurrences["updateUser:::meta"]=0
operation_parameters_minimum_occurrences["updateUser:::Users"]=0
operation_parameters_minimum_occurrences["updateUsers:::fields"]=0
operation_parameters_minimum_occurrences["updateUsers:::limit"]=0
operation_parameters_minimum_occurrences["updateUsers:::meta"]=0
operation_parameters_minimum_occurrences["updateUsers:::offset"]=0
operation_parameters_minimum_occurrences["updateUsers:::sort"]=0
operation_parameters_minimum_occurrences["updateUsers:::filter"]=0
operation_parameters_minimum_occurrences["updateUsers:::search"]=0
operation_parameters_minimum_occurrences["updateUsers:::UpdateUsersRequest"]=0
operation_parameters_minimum_occurrences["export:::collection"]=1
operation_parameters_minimum_occurrences["export:::ExportRequest"]=0
operation_parameters_minimum_occurrences["hashGenerate:::HashGenerateRequest"]=0
operation_parameters_minimum_occurrences["hashVerify:::HashVerifyRequest"]=0
operation_parameters_minimum_occurrences["import:::collection"]=1
operation_parameters_minimum_occurrences["import:::file"]=0
operation_parameters_minimum_occurrences["random:::length"]=0
operation_parameters_minimum_occurrences["sort:::collection"]=1
operation_parameters_minimum_occurrences["sort:::SortRequest"]=0

##
# This array stores the maximum number of allowed occurrences for parameter
# 1 - single value
# 2 - 2 values
# N - N values
# 0 - unlimited
declare -A operation_parameters_maximum_occurrences
operation_parameters_maximum_occurrences["createComment:::meta"]=0
operation_parameters_maximum_occurrences["createComment:::CreateCommentRequest"]=0
operation_parameters_maximum_occurrences["getActivities:::fields"]=0
operation_parameters_maximum_occurrences["getActivities:::limit"]=0
operation_parameters_maximum_occurrences["getActivities:::meta"]=0
operation_parameters_maximum_occurrences["getActivities:::offset"]=0
operation_parameters_maximum_occurrences["getActivities:::sort"]=0
operation_parameters_maximum_occurrences["getActivities:::filter"]=0
operation_parameters_maximum_occurrences["getActivities:::search"]=0
operation_parameters_maximum_occurrences["getActivity:::id"]=0
operation_parameters_maximum_occurrences["getActivity:::fields"]=0
operation_parameters_maximum_occurrences["getActivity:::meta"]=0
operation_parameters_maximum_occurrences["getAsset:::id"]=0
operation_parameters_maximum_occurrences["getAsset:::key"]=0
operation_parameters_maximum_occurrences["getAsset:::transforms"]=0
operation_parameters_maximum_occurrences["getAsset:::download"]=0
operation_parameters_maximum_occurrences["login:::LoginRequest"]=0
operation_parameters_maximum_occurrences["logout:::LogoutRequest"]=0
operation_parameters_maximum_occurrences["oauthProvider:::provider"]=0
operation_parameters_maximum_occurrences["oauthProvider:::redirect"]=0
operation_parameters_maximum_occurrences["passwordRequest:::PasswordRequestRequest"]=0
operation_parameters_maximum_occurrences["passwordReset:::PasswordResetRequest"]=0
operation_parameters_maximum_occurrences["refresh:::RefreshRequest"]=0
operation_parameters_maximum_occurrences["getCollection:::id"]=0
operation_parameters_maximum_occurrences["getCollection:::meta"]=0
operation_parameters_maximum_occurrences["getCollections:::offset"]=0
operation_parameters_maximum_occurrences["getCollections:::meta"]=0
operation_parameters_maximum_occurrences["getCollectionField:::collection"]=0
operation_parameters_maximum_occurrences["getCollectionField:::id"]=0
operation_parameters_maximum_occurrences["getCollectionFields:::collection"]=0
operation_parameters_maximum_occurrences["getCollectionFields:::sort"]=0
operation_parameters_maximum_occurrences["getFields:::limit"]=0
operation_parameters_maximum_occurrences["getFields:::sort"]=0
operation_parameters_maximum_occurrences["createFile:::CreateFileRequest"]=0
operation_parameters_maximum_occurrences["deleteFile:::id"]=0
operation_parameters_maximum_occurrences["getFile:::id"]=0
operation_parameters_maximum_occurrences["getFile:::fields"]=0
operation_parameters_maximum_occurrences["getFile:::meta"]=0
operation_parameters_maximum_occurrences["getFiles:::fields"]=0
operation_parameters_maximum_occurrences["getFiles:::limit"]=0
operation_parameters_maximum_occurrences["getFiles:::offset"]=0
operation_parameters_maximum_occurrences["getFiles:::sort"]=0
operation_parameters_maximum_occurrences["getFiles:::filter"]=0
operation_parameters_maximum_occurrences["getFiles:::search"]=0
operation_parameters_maximum_occurrences["getFiles:::meta"]=0
operation_parameters_maximum_occurrences["updateFile:::id"]=0
operation_parameters_maximum_occurrences["updateFile:::file"]=0
operation_parameters_maximum_occurrences["updateFile:::fields"]=0
operation_parameters_maximum_occurrences["updateFile:::meta"]=0
operation_parameters_maximum_occurrences["updateFile:::title"]=0
operation_parameters_maximum_occurrences["updateFile:::filename_download"]=0
operation_parameters_maximum_occurrences["updateFile:::description"]=0
operation_parameters_maximum_occurrences["updateFile:::folder"]=0
operation_parameters_maximum_occurrences["updateFile:::tags"]=0
operation_parameters_maximum_occurrences["updateFiles:::fields"]=0
operation_parameters_maximum_occurrences["updateFiles:::limit"]=0
operation_parameters_maximum_occurrences["updateFiles:::meta"]=0
operation_parameters_maximum_occurrences["updateFiles:::offset"]=0
operation_parameters_maximum_occurrences["updateFiles:::sort"]=0
operation_parameters_maximum_occurrences["updateFiles:::filter"]=0
operation_parameters_maximum_occurrences["updateFiles:::search"]=0
operation_parameters_maximum_occurrences["updateFiles:::UpdateFilesRequest"]=0
operation_parameters_maximum_occurrences["getFlow:::id"]=0
operation_parameters_maximum_occurrences["createFolder:::fields"]=0
operation_parameters_maximum_occurrences["createFolder:::meta"]=0
operation_parameters_maximum_occurrences["createFolder:::CreateFolderRequest"]=0
operation_parameters_maximum_occurrences["deleteFolder:::id"]=0
operation_parameters_maximum_occurrences["getFolder:::id"]=0
operation_parameters_maximum_occurrences["getFolder:::fields"]=0
operation_parameters_maximum_occurrences["getFolder:::meta"]=0
operation_parameters_maximum_occurrences["getFolders:::fields"]=0
operation_parameters_maximum_occurrences["getFolders:::limit"]=0
operation_parameters_maximum_occurrences["getFolders:::offset"]=0
operation_parameters_maximum_occurrences["getFolders:::sort"]=0
operation_parameters_maximum_occurrences["getFolders:::filter"]=0
operation_parameters_maximum_occurrences["getFolders:::search"]=0
operation_parameters_maximum_occurrences["getFolders:::meta"]=0
operation_parameters_maximum_occurrences["updateFolder:::id"]=0
operation_parameters_maximum_occurrences["updateFolder:::fields"]=0
operation_parameters_maximum_occurrences["updateFolder:::meta"]=0
operation_parameters_maximum_occurrences["updateFolder:::UpdateFolderRequest"]=0
operation_parameters_maximum_occurrences["updateFolders:::fields"]=0
operation_parameters_maximum_occurrences["updateFolders:::limit"]=0
operation_parameters_maximum_occurrences["updateFolders:::meta"]=0
operation_parameters_maximum_occurrences["updateFolders:::offset"]=0
operation_parameters_maximum_occurrences["updateFolders:::sort"]=0
operation_parameters_maximum_occurrences["updateFolders:::filter"]=0
operation_parameters_maximum_occurrences["updateFolders:::search"]=0
operation_parameters_maximum_occurrences["updateFolders:::UpdateFoldersRequest"]=0
operation_parameters_maximum_occurrences["createItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["createItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_maximum_occurrences["createItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["createItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_maximum_occurrences["createItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["createItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_maximum_occurrences["createItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_maximum_occurrences["createItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_maximum_occurrences["createItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_maximum_occurrences["createItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["createItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_maximum_occurrences["createItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["createItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_maximum_occurrences["createItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_maximum_occurrences["createItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["createItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_maximum_occurrences["createItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["createItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_maximum_occurrences["createItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_maximum_occurrences["createItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_maximum_occurrences["createItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_maximum_occurrences["createItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_maximum_occurrences["createItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_maximum_occurrences["createItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["createItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_maximum_occurrences["createItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["createItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_maximum_occurrences["createItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["createItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_maximum_occurrences["createItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["createItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_maximum_occurrences["createItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["createItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_maximum_occurrences["createItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["createItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_maximum_occurrences["createItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["createItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_maximum_occurrences["createItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["createItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_maximum_occurrences["createItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["createItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_maximum_occurrences["createItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["createItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_maximum_occurrences["createItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["createItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_maximum_occurrences["createItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["createItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_maximum_occurrences["createItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["createItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_maximum_occurrences["createItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["createItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_maximum_occurrences["createItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_maximum_occurrences["createItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_maximum_occurrences["createItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_maximum_occurrences["createItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_maximum_occurrences["createItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["createItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_maximum_occurrences["createItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["createItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_maximum_occurrences["createItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["createItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_maximum_occurrences["createItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_maximum_occurrences["createItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["createItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_maximum_occurrences["createItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["createItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_maximum_occurrences["createItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["createItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_maximum_occurrences["createItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["createItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_maximum_occurrences["createItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["createItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_maximum_occurrences["createItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["createItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_maximum_occurrences["createItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_maximum_occurrences["createItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_maximum_occurrences["createItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_maximum_occurrences["createItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_maximum_occurrences["createItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_maximum_occurrences["createItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["createItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_maximum_occurrences["createItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["createItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_maximum_occurrences["createItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["createItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsAccounts:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsAppointments:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsBudgets:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCampaigns:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCarbonFootprint:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCompanyAssets:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsContent:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsContracts:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCrm:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsDepartment:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsDistribution:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEmailCampaigns:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEmployeeDirectory:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEnergyEfficiency:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEnvironmentalCompliance:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEvents:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsExpenses:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsFacilities:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsFeedback:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsForum:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsFulfillment:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsGovernanceandEthics:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsHelpdesk:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsInventory:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsInvoices:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsInvoicing:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsLifecycle:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsLiveChat:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsLoyalty:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsMaintenance:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPayroll:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPerformance:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPointofSale:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPolicy:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsProcurement:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsProductionBatch:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsProject:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPurchaseOrders:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsQualityCheck:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsQuotes:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsRecruit:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsRegulations:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsRentals:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsShipment:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSocialMedia:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSocialResponsibility:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSuppliers:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSurveys:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSustainableSupplyChain:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsTaxes:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsTraining:::id"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsTransactions:::id"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::limit"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::offset"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::sort"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::filter"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::search"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::limit"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::offset"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::sort"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::filter"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::search"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::limit"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::offset"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::sort"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::filter"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::search"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::search"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::search"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::search"]=0
operation_parameters_maximum_occurrences["readItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["readItemsContent:::limit"]=0
operation_parameters_maximum_occurrences["readItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["readItemsContent:::offset"]=0
operation_parameters_maximum_occurrences["readItemsContent:::sort"]=0
operation_parameters_maximum_occurrences["readItemsContent:::filter"]=0
operation_parameters_maximum_occurrences["readItemsContent:::search"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::limit"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::offset"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::sort"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::filter"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::search"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::search"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::limit"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::offset"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::sort"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::filter"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::search"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::limit"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::offset"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::sort"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::filter"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::search"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::search"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::search"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::search"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::search"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::search"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::limit"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::offset"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::sort"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::filter"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::search"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::limit"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::offset"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::sort"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::filter"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::search"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::limit"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::offset"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::sort"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::filter"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::search"]=0
operation_parameters_maximum_occurrences["readItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["readItemsForum:::limit"]=0
operation_parameters_maximum_occurrences["readItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["readItemsForum:::offset"]=0
operation_parameters_maximum_occurrences["readItemsForum:::sort"]=0
operation_parameters_maximum_occurrences["readItemsForum:::filter"]=0
operation_parameters_maximum_occurrences["readItemsForum:::search"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::limit"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::offset"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::sort"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::filter"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::search"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::limit"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::offset"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::sort"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::filter"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::search"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::limit"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::offset"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::sort"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::filter"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::search"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::limit"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::offset"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::sort"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::filter"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::search"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::limit"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::offset"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::sort"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::filter"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::search"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::limit"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::offset"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::sort"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::filter"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::search"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::limit"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::offset"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::sort"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::filter"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::search"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::limit"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::offset"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::sort"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::filter"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::search"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::limit"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::offset"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::sort"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::filter"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::search"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::limit"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::offset"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::sort"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::filter"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::search"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::search"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::search"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::search"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::search"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::limit"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::offset"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::sort"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::filter"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::search"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::limit"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::offset"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::sort"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::filter"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::search"]=0
operation_parameters_maximum_occurrences["readItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["readItemsProject:::limit"]=0
operation_parameters_maximum_occurrences["readItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["readItemsProject:::offset"]=0
operation_parameters_maximum_occurrences["readItemsProject:::sort"]=0
operation_parameters_maximum_occurrences["readItemsProject:::filter"]=0
operation_parameters_maximum_occurrences["readItemsProject:::search"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::search"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::limit"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::offset"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::sort"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::filter"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::search"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::limit"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::offset"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::sort"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::filter"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::search"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::limit"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::offset"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::sort"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::filter"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::search"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::limit"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::offset"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::sort"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::filter"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::search"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::limit"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::offset"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::sort"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::filter"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::search"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::limit"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::offset"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::sort"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::filter"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::search"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::search"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::search"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::search"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::search"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::search"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::limit"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::offset"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::sort"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::filter"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::search"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::limit"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::offset"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::sort"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::filter"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::search"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::limit"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::offset"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::sort"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::filter"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::version"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::version"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::search"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::search"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::search"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::search"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::search"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::search"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::search"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::search"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::search"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::search"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::search"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::search"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::search"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::search"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::search"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::search"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::search"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::search"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::search"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::search"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::search"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::search"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::search"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::search"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::search"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::search"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::search"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::search"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::search"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::search"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::search"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::search"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::search"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::ItemsAccounts"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::ItemsAppointments"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::ItemsBudgets"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::ItemsCampaigns"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::ItemsCarbonFootprint"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::ItemsCompanyAssets"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::ItemsContent"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::ItemsContracts"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::ItemsCrm"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::ItemsDepartment"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::ItemsDistribution"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::ItemsEmailCampaigns"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::ItemsEmployeeDirectory"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::ItemsEnergyEfficiency"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::ItemsEnvironmentalCompliance"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::ItemsEvents"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::ItemsExpenses"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::ItemsFacilities"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::ItemsFeedback"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::ItemsForum"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::ItemsFulfillment"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::ItemsGovernanceandEthics"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::ItemsHelpdesk"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::ItemsInventory"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::ItemsInvoices"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::ItemsInvoicing"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::ItemsLifecycle"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::ItemsLiveChat"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::ItemsLoyalty"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::ItemsMaintenance"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::ItemsPayroll"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::ItemsPerformance"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::ItemsPointofSale"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::ItemsPolicy"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::ItemsProcurement"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::ItemsProductionBatch"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::ItemsProject"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::ItemsPurchaseOrders"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::ItemsQualityCheck"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::ItemsQuotes"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::ItemsRecruit"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::ItemsRegulations"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::ItemsRentals"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::ItemsShipment"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::ItemsSocialMedia"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::ItemsSocialResponsibility"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::ItemsSuppliers"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::ItemsSurveys"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::ItemsSustainableSupplyChain"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::ItemsTaxes"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::ItemsTraining"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::ItemsTransactions"]=0
operation_parameters_maximum_occurrences["createItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["createItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsAccounts:::id"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::limit"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::offset"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::sort"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::filter"]=0
operation_parameters_maximum_occurrences["readItemsAccounts:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsAccounts:::version"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::search"]=0
operation_parameters_maximum_occurrences["updateItemsAccounts:::CreateItemsAccountsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAccounts:::ItemsAccounts"]=0
operation_parameters_maximum_occurrences["createItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["createItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsAppointments:::id"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::limit"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::offset"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::sort"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::filter"]=0
operation_parameters_maximum_occurrences["readItemsAppointments:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsAppointments:::version"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::search"]=0
operation_parameters_maximum_occurrences["updateItemsAppointments:::CreateItemsAppointmentsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsAppointments:::ItemsAppointments"]=0
operation_parameters_maximum_occurrences["createItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["createItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsBudgets:::id"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::limit"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::offset"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::sort"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::filter"]=0
operation_parameters_maximum_occurrences["readItemsBudgets:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsBudgets:::version"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::search"]=0
operation_parameters_maximum_occurrences["updateItemsBudgets:::CreateItemsBudgetsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsBudgets:::ItemsBudgets"]=0
operation_parameters_maximum_occurrences["createItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCampaigns:::id"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCampaigns:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCampaigns:::version"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCampaigns:::CreateItemsCampaignsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCampaigns:::ItemsCampaigns"]=0
operation_parameters_maximum_occurrences["createItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCarbonFootprint:::id"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCarbonFootprint:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCarbonFootprint:::version"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCarbonFootprint:::ItemsCarbonFootprint"]=0
operation_parameters_maximum_occurrences["createItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCompanyAssets:::id"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCompanyAssets:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCompanyAssets:::version"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCompanyAssets:::ItemsCompanyAssets"]=0
operation_parameters_maximum_occurrences["createItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["createItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsContent:::id"]=0
operation_parameters_maximum_occurrences["readItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["readItemsContent:::limit"]=0
operation_parameters_maximum_occurrences["readItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["readItemsContent:::offset"]=0
operation_parameters_maximum_occurrences["readItemsContent:::sort"]=0
operation_parameters_maximum_occurrences["readItemsContent:::filter"]=0
operation_parameters_maximum_occurrences["readItemsContent:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsContent:::version"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::search"]=0
operation_parameters_maximum_occurrences["updateItemsContent:::CreateItemsContentRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContent:::ItemsContent"]=0
operation_parameters_maximum_occurrences["createItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["createItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsContracts:::id"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::limit"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::offset"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::sort"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::filter"]=0
operation_parameters_maximum_occurrences["readItemsContracts:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsContracts:::version"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::search"]=0
operation_parameters_maximum_occurrences["updateItemsContracts:::CreateItemsContractsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsContracts:::ItemsContracts"]=0
operation_parameters_maximum_occurrences["createItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["createItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsCrm:::id"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::limit"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::offset"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::sort"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::filter"]=0
operation_parameters_maximum_occurrences["readItemsCrm:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsCrm:::version"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::search"]=0
operation_parameters_maximum_occurrences["updateItemsCrm:::CreateItemsCrmRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsCrm:::ItemsCrm"]=0
operation_parameters_maximum_occurrences["createItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["createItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsDepartment:::id"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::limit"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::offset"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::sort"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::filter"]=0
operation_parameters_maximum_occurrences["readItemsDepartment:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsDepartment:::version"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::search"]=0
operation_parameters_maximum_occurrences["updateItemsDepartment:::CreateItemsDepartmentRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDepartment:::ItemsDepartment"]=0
operation_parameters_maximum_occurrences["createItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["createItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsDistribution:::id"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::limit"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::offset"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::sort"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::filter"]=0
operation_parameters_maximum_occurrences["readItemsDistribution:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsDistribution:::version"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::search"]=0
operation_parameters_maximum_occurrences["updateItemsDistribution:::CreateItemsDistributionRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsDistribution:::ItemsDistribution"]=0
operation_parameters_maximum_occurrences["createItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEmailCampaigns:::id"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEmailCampaigns:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmailCampaigns:::version"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmailCampaigns:::ItemsEmailCampaigns"]=0
operation_parameters_maximum_occurrences["createItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEmployeeDirectory:::id"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEmployeeDirectory:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEmployeeDirectory:::version"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEmployeeDirectory:::ItemsEmployeeDirectory"]=0
operation_parameters_maximum_occurrences["createItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEnergyEfficiency:::id"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEnergyEfficiency:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnergyEfficiency:::version"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnergyEfficiency:::ItemsEnergyEfficiency"]=0
operation_parameters_maximum_occurrences["createItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEnvironmentalCompliance:::id"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEnvironmentalCompliance:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEnvironmentalCompliance:::version"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEnvironmentalCompliance:::ItemsEnvironmentalCompliance"]=0
operation_parameters_maximum_occurrences["createItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["createItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsEvents:::id"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::limit"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::offset"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::sort"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::filter"]=0
operation_parameters_maximum_occurrences["readItemsEvents:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsEvents:::version"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::search"]=0
operation_parameters_maximum_occurrences["updateItemsEvents:::CreateItemsEventsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsEvents:::ItemsEvents"]=0
operation_parameters_maximum_occurrences["createItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["createItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsExpenses:::id"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::limit"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::offset"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::sort"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::filter"]=0
operation_parameters_maximum_occurrences["readItemsExpenses:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsExpenses:::version"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::search"]=0
operation_parameters_maximum_occurrences["updateItemsExpenses:::CreateItemsExpensesRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsExpenses:::ItemsExpenses"]=0
operation_parameters_maximum_occurrences["createItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["createItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsFacilities:::id"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::limit"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::offset"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::sort"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::filter"]=0
operation_parameters_maximum_occurrences["readItemsFacilities:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsFacilities:::version"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::search"]=0
operation_parameters_maximum_occurrences["updateItemsFacilities:::CreateItemsFacilitiesRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFacilities:::ItemsFacilities"]=0
operation_parameters_maximum_occurrences["createItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["createItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsFeedback:::id"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::limit"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::offset"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::sort"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::filter"]=0
operation_parameters_maximum_occurrences["readItemsFeedback:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsFeedback:::version"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::search"]=0
operation_parameters_maximum_occurrences["updateItemsFeedback:::CreateItemsFeedbackRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFeedback:::ItemsFeedback"]=0
operation_parameters_maximum_occurrences["createItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["createItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsForum:::id"]=0
operation_parameters_maximum_occurrences["readItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["readItemsForum:::limit"]=0
operation_parameters_maximum_occurrences["readItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["readItemsForum:::offset"]=0
operation_parameters_maximum_occurrences["readItemsForum:::sort"]=0
operation_parameters_maximum_occurrences["readItemsForum:::filter"]=0
operation_parameters_maximum_occurrences["readItemsForum:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsForum:::version"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::search"]=0
operation_parameters_maximum_occurrences["updateItemsForum:::CreateItemsForumRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsForum:::ItemsForum"]=0
operation_parameters_maximum_occurrences["createItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["createItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsFulfillment:::id"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::limit"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::offset"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::sort"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::filter"]=0
operation_parameters_maximum_occurrences["readItemsFulfillment:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsFulfillment:::version"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::search"]=0
operation_parameters_maximum_occurrences["updateItemsFulfillment:::CreateItemsFulfillmentRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsFulfillment:::ItemsFulfillment"]=0
operation_parameters_maximum_occurrences["createItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["createItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsGovernanceandEthics:::id"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::limit"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::offset"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::sort"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::filter"]=0
operation_parameters_maximum_occurrences["readItemsGovernanceandEthics:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsGovernanceandEthics:::version"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::search"]=0
operation_parameters_maximum_occurrences["updateItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsGovernanceandEthics:::ItemsGovernanceandEthics"]=0
operation_parameters_maximum_occurrences["createItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["createItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsHelpdesk:::id"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::limit"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::offset"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::sort"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::filter"]=0
operation_parameters_maximum_occurrences["readItemsHelpdesk:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsHelpdesk:::version"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::search"]=0
operation_parameters_maximum_occurrences["updateItemsHelpdesk:::CreateItemsHelpdeskRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsHelpdesk:::ItemsHelpdesk"]=0
operation_parameters_maximum_occurrences["createItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["createItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsInventory:::id"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::limit"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::offset"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::sort"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::filter"]=0
operation_parameters_maximum_occurrences["readItemsInventory:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsInventory:::version"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::search"]=0
operation_parameters_maximum_occurrences["updateItemsInventory:::CreateItemsInventoryRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInventory:::ItemsInventory"]=0
operation_parameters_maximum_occurrences["createItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["createItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsInvoices:::id"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::limit"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::offset"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::sort"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::filter"]=0
operation_parameters_maximum_occurrences["readItemsInvoices:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoices:::version"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::search"]=0
operation_parameters_maximum_occurrences["updateItemsInvoices:::CreateItemsInvoicesRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoices:::ItemsInvoices"]=0
operation_parameters_maximum_occurrences["createItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["createItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsInvoicing:::id"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::limit"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::offset"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::sort"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::filter"]=0
operation_parameters_maximum_occurrences["readItemsInvoicing:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsInvoicing:::version"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::search"]=0
operation_parameters_maximum_occurrences["updateItemsInvoicing:::CreateItemsInvoicingRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsInvoicing:::ItemsInvoicing"]=0
operation_parameters_maximum_occurrences["createItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["createItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsLifecycle:::id"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::limit"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::offset"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::sort"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::filter"]=0
operation_parameters_maximum_occurrences["readItemsLifecycle:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsLifecycle:::version"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::search"]=0
operation_parameters_maximum_occurrences["updateItemsLifecycle:::CreateItemsLifecycleRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLifecycle:::ItemsLifecycle"]=0
operation_parameters_maximum_occurrences["createItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["createItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsLiveChat:::id"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::limit"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::offset"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::sort"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::filter"]=0
operation_parameters_maximum_occurrences["readItemsLiveChat:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsLiveChat:::version"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::search"]=0
operation_parameters_maximum_occurrences["updateItemsLiveChat:::CreateItemsLiveChatRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLiveChat:::ItemsLiveChat"]=0
operation_parameters_maximum_occurrences["createItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["createItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsLoyalty:::id"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::limit"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::offset"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::sort"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::filter"]=0
operation_parameters_maximum_occurrences["readItemsLoyalty:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsLoyalty:::version"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::search"]=0
operation_parameters_maximum_occurrences["updateItemsLoyalty:::CreateItemsLoyaltyRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsLoyalty:::ItemsLoyalty"]=0
operation_parameters_maximum_occurrences["createItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["createItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsMaintenance:::id"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::limit"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::offset"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::sort"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::filter"]=0
operation_parameters_maximum_occurrences["readItemsMaintenance:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsMaintenance:::version"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::search"]=0
operation_parameters_maximum_occurrences["updateItemsMaintenance:::CreateItemsMaintenanceRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsMaintenance:::ItemsMaintenance"]=0
operation_parameters_maximum_occurrences["createItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPayroll:::id"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPayroll:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPayroll:::version"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPayroll:::CreateItemsPayrollRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPayroll:::ItemsPayroll"]=0
operation_parameters_maximum_occurrences["createItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPerformance:::id"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPerformance:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPerformance:::version"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPerformance:::CreateItemsPerformanceRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPerformance:::ItemsPerformance"]=0
operation_parameters_maximum_occurrences["createItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPointofSale:::id"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPointofSale:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPointofSale:::version"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPointofSale:::CreateItemsPointofSaleRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPointofSale:::ItemsPointofSale"]=0
operation_parameters_maximum_occurrences["createItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPolicy:::id"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPolicy:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPolicy:::version"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPolicy:::CreateItemsPolicyRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPolicy:::ItemsPolicy"]=0
operation_parameters_maximum_occurrences["createItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["createItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsProcurement:::id"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::limit"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::offset"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::sort"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::filter"]=0
operation_parameters_maximum_occurrences["readItemsProcurement:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsProcurement:::version"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::search"]=0
operation_parameters_maximum_occurrences["updateItemsProcurement:::CreateItemsProcurementRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProcurement:::ItemsProcurement"]=0
operation_parameters_maximum_occurrences["createItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["createItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsProductionBatch:::id"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::limit"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::offset"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::sort"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::filter"]=0
operation_parameters_maximum_occurrences["readItemsProductionBatch:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsProductionBatch:::version"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::search"]=0
operation_parameters_maximum_occurrences["updateItemsProductionBatch:::CreateItemsProductionBatchRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProductionBatch:::ItemsProductionBatch"]=0
operation_parameters_maximum_occurrences["createItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["createItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsProject:::id"]=0
operation_parameters_maximum_occurrences["readItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["readItemsProject:::limit"]=0
operation_parameters_maximum_occurrences["readItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["readItemsProject:::offset"]=0
operation_parameters_maximum_occurrences["readItemsProject:::sort"]=0
operation_parameters_maximum_occurrences["readItemsProject:::filter"]=0
operation_parameters_maximum_occurrences["readItemsProject:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsProject:::version"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::search"]=0
operation_parameters_maximum_occurrences["updateItemsProject:::CreateItemsProjectRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsProject:::ItemsProject"]=0
operation_parameters_maximum_occurrences["createItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["createItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsPurchaseOrders:::id"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::limit"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::offset"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::sort"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::filter"]=0
operation_parameters_maximum_occurrences["readItemsPurchaseOrders:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsPurchaseOrders:::version"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::search"]=0
operation_parameters_maximum_occurrences["updateItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsPurchaseOrders:::ItemsPurchaseOrders"]=0
operation_parameters_maximum_occurrences["createItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["createItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsQualityCheck:::id"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::limit"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::offset"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::sort"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::filter"]=0
operation_parameters_maximum_occurrences["readItemsQualityCheck:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsQualityCheck:::version"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::search"]=0
operation_parameters_maximum_occurrences["updateItemsQualityCheck:::CreateItemsQualityCheckRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQualityCheck:::ItemsQualityCheck"]=0
operation_parameters_maximum_occurrences["createItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["createItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsQuotes:::id"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::limit"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::offset"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::sort"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::filter"]=0
operation_parameters_maximum_occurrences["readItemsQuotes:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsQuotes:::version"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::search"]=0
operation_parameters_maximum_occurrences["updateItemsQuotes:::CreateItemsQuotesRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsQuotes:::ItemsQuotes"]=0
operation_parameters_maximum_occurrences["createItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["createItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsRecruit:::id"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::limit"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::offset"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::sort"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::filter"]=0
operation_parameters_maximum_occurrences["readItemsRecruit:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsRecruit:::version"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::search"]=0
operation_parameters_maximum_occurrences["updateItemsRecruit:::CreateItemsRecruitRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRecruit:::ItemsRecruit"]=0
operation_parameters_maximum_occurrences["createItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["createItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsRegulations:::id"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::limit"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::offset"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::sort"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::filter"]=0
operation_parameters_maximum_occurrences["readItemsRegulations:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsRegulations:::version"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::search"]=0
operation_parameters_maximum_occurrences["updateItemsRegulations:::CreateItemsRegulationsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRegulations:::ItemsRegulations"]=0
operation_parameters_maximum_occurrences["createItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["createItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsRentals:::id"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::limit"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::offset"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::sort"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::filter"]=0
operation_parameters_maximum_occurrences["readItemsRentals:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsRentals:::version"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::search"]=0
operation_parameters_maximum_occurrences["updateItemsRentals:::CreateItemsRentalsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsRentals:::ItemsRentals"]=0
operation_parameters_maximum_occurrences["createItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["createItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsShipment:::id"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::limit"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::offset"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::sort"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::filter"]=0
operation_parameters_maximum_occurrences["readItemsShipment:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsShipment:::version"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::search"]=0
operation_parameters_maximum_occurrences["updateItemsShipment:::CreateItemsShipmentRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsShipment:::ItemsShipment"]=0
operation_parameters_maximum_occurrences["createItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSocialMedia:::id"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSocialMedia:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialMedia:::version"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSocialMedia:::CreateItemsSocialMediaRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialMedia:::ItemsSocialMedia"]=0
operation_parameters_maximum_occurrences["createItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSocialResponsibility:::id"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSocialResponsibility:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSocialResponsibility:::version"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSocialResponsibility:::ItemsSocialResponsibility"]=0
operation_parameters_maximum_occurrences["createItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSuppliers:::id"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSuppliers:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSuppliers:::version"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSuppliers:::CreateItemsSuppliersRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSuppliers:::ItemsSuppliers"]=0
operation_parameters_maximum_occurrences["createItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSurveys:::id"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSurveys:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSurveys:::version"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSurveys:::CreateItemsSurveysRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSurveys:::ItemsSurveys"]=0
operation_parameters_maximum_occurrences["createItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["createItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsSustainableSupplyChain:::id"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::limit"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::offset"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::sort"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::filter"]=0
operation_parameters_maximum_occurrences["readItemsSustainableSupplyChain:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsSustainableSupplyChain:::version"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::search"]=0
operation_parameters_maximum_occurrences["updateItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsSustainableSupplyChain:::ItemsSustainableSupplyChain"]=0
operation_parameters_maximum_occurrences["createItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["createItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsTaxes:::id"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::limit"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::offset"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::sort"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::filter"]=0
operation_parameters_maximum_occurrences["readItemsTaxes:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsTaxes:::version"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::search"]=0
operation_parameters_maximum_occurrences["updateItemsTaxes:::CreateItemsTaxesRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTaxes:::ItemsTaxes"]=0
operation_parameters_maximum_occurrences["createItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["createItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsTraining:::id"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::limit"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::offset"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::sort"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::filter"]=0
operation_parameters_maximum_occurrences["readItemsTraining:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsTraining:::version"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::search"]=0
operation_parameters_maximum_occurrences["updateItemsTraining:::CreateItemsTrainingRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTraining:::ItemsTraining"]=0
operation_parameters_maximum_occurrences["createItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["createItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_maximum_occurrences["deleteSingleItemsTransactions:::id"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::limit"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::offset"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::sort"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::filter"]=0
operation_parameters_maximum_occurrences["readItemsTransactions:::search"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::id"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["readSingleItemsTransactions:::version"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::limit"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::offset"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::sort"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::filter"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::search"]=0
operation_parameters_maximum_occurrences["updateItemsTransactions:::CreateItemsTransactionsRequest"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::id"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::fields"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::meta"]=0
operation_parameters_maximum_occurrences["updateSingleItemsTransactions:::ItemsTransactions"]=0
operation_parameters_maximum_occurrences["getPermission:::id"]=0
operation_parameters_maximum_occurrences["getPermission:::fields"]=0
operation_parameters_maximum_occurrences["getPermission:::meta"]=0
operation_parameters_maximum_occurrences["getPermissions:::fields"]=0
operation_parameters_maximum_occurrences["getPermissions:::limit"]=0
operation_parameters_maximum_occurrences["getPermissions:::offset"]=0
operation_parameters_maximum_occurrences["getPermissions:::meta"]=0
operation_parameters_maximum_occurrences["getPermissions:::sort"]=0
operation_parameters_maximum_occurrences["getPermissions:::filter"]=0
operation_parameters_maximum_occurrences["getPermissions:::search"]=0
operation_parameters_maximum_occurrences["getPermissions:::page"]=0
operation_parameters_maximum_occurrences["createPreset:::fields"]=0
operation_parameters_maximum_occurrences["createPreset:::meta"]=0
operation_parameters_maximum_occurrences["createPreset:::CreatePresetRequest"]=0
operation_parameters_maximum_occurrences["deletePreset:::id"]=0
operation_parameters_maximum_occurrences["getPreset:::id"]=0
operation_parameters_maximum_occurrences["getPreset:::fields"]=0
operation_parameters_maximum_occurrences["getPreset:::meta"]=0
operation_parameters_maximum_occurrences["getPresets:::fields"]=0
operation_parameters_maximum_occurrences["getPresets:::limit"]=0
operation_parameters_maximum_occurrences["getPresets:::offset"]=0
operation_parameters_maximum_occurrences["getPresets:::page"]=0
operation_parameters_maximum_occurrences["getPresets:::sort"]=0
operation_parameters_maximum_occurrences["getPresets:::filter"]=0
operation_parameters_maximum_occurrences["getPresets:::search"]=0
operation_parameters_maximum_occurrences["getPresets:::meta"]=0
operation_parameters_maximum_occurrences["updatePreset:::id"]=0
operation_parameters_maximum_occurrences["updatePreset:::fields"]=0
operation_parameters_maximum_occurrences["updatePreset:::meta"]=0
operation_parameters_maximum_occurrences["updatePreset:::UpdatePresetRequest"]=0
operation_parameters_maximum_occurrences["updatePresets:::fields"]=0
operation_parameters_maximum_occurrences["updatePresets:::limit"]=0
operation_parameters_maximum_occurrences["updatePresets:::meta"]=0
operation_parameters_maximum_occurrences["updatePresets:::offset"]=0
operation_parameters_maximum_occurrences["updatePresets:::sort"]=0
operation_parameters_maximum_occurrences["updatePresets:::filter"]=0
operation_parameters_maximum_occurrences["updatePresets:::search"]=0
operation_parameters_maximum_occurrences["updatePresets:::UpdatePresetsRequest"]=0
operation_parameters_maximum_occurrences["getRelation:::id"]=0
operation_parameters_maximum_occurrences["getRelation:::fields"]=0
operation_parameters_maximum_occurrences["getRelation:::meta"]=0
operation_parameters_maximum_occurrences["getRelations:::fields"]=0
operation_parameters_maximum_occurrences["getRelations:::limit"]=0
operation_parameters_maximum_occurrences["getRelations:::offset"]=0
operation_parameters_maximum_occurrences["getRelations:::meta"]=0
operation_parameters_maximum_occurrences["getRelations:::sort"]=0
operation_parameters_maximum_occurrences["getRelations:::filter"]=0
operation_parameters_maximum_occurrences["getRelations:::search"]=0
operation_parameters_maximum_occurrences["getRelations:::page"]=0
operation_parameters_maximum_occurrences["getRole:::id"]=0
operation_parameters_maximum_occurrences["getRole:::fields"]=0
operation_parameters_maximum_occurrences["getRole:::meta"]=0
operation_parameters_maximum_occurrences["getRoles:::fields"]=0
operation_parameters_maximum_occurrences["getRoles:::limit"]=0
operation_parameters_maximum_occurrences["getRoles:::offset"]=0
operation_parameters_maximum_occurrences["getRoles:::meta"]=0
operation_parameters_maximum_occurrences["getRoles:::sort"]=0
operation_parameters_maximum_occurrences["getRoles:::filter"]=0
operation_parameters_maximum_occurrences["getRoles:::search"]=0
operation_parameters_maximum_occurrences["getRoles:::page"]=0
operation_parameters_maximum_occurrences["schemaApply:::SchemaApplyRequest"]=0
operation_parameters_maximum_occurrences["schemaDiff:::SchemaSnapshot200Response"]=0
operation_parameters_maximum_occurrences["schemaDiff:::force"]=0
operation_parameters_maximum_occurrences["schemaSnapshot:::export"]=0
operation_parameters_maximum_occurrences["serverInfo:::super_admin_token"]=0
operation_parameters_maximum_occurrences["getSettings:::limit"]=0
operation_parameters_maximum_occurrences["getSettings:::offset"]=0
operation_parameters_maximum_occurrences["getSettings:::meta"]=0
operation_parameters_maximum_occurrences["getSettings:::page"]=0
operation_parameters_maximum_occurrences["getMe:::fields"]=0
operation_parameters_maximum_occurrences["getMe:::meta"]=0
operation_parameters_maximum_occurrences["getUser:::id"]=0
operation_parameters_maximum_occurrences["getUser:::fields"]=0
operation_parameters_maximum_occurrences["getUser:::meta"]=0
operation_parameters_maximum_occurrences["getUsers:::fields"]=0
operation_parameters_maximum_occurrences["getUsers:::limit"]=0
operation_parameters_maximum_occurrences["getUsers:::offset"]=0
operation_parameters_maximum_occurrences["getUsers:::meta"]=0
operation_parameters_maximum_occurrences["getUsers:::sort"]=0
operation_parameters_maximum_occurrences["getUsers:::filter"]=0
operation_parameters_maximum_occurrences["getUsers:::search"]=0
operation_parameters_maximum_occurrences["updateLastUsedPageMe:::UpdateLastUsedPageMeRequest"]=0
operation_parameters_maximum_occurrences["updateUser:::id"]=0
operation_parameters_maximum_occurrences["updateUser:::fields"]=0
operation_parameters_maximum_occurrences["updateUser:::meta"]=0
operation_parameters_maximum_occurrences["updateUser:::Users"]=0
operation_parameters_maximum_occurrences["updateUsers:::fields"]=0
operation_parameters_maximum_occurrences["updateUsers:::limit"]=0
operation_parameters_maximum_occurrences["updateUsers:::meta"]=0
operation_parameters_maximum_occurrences["updateUsers:::offset"]=0
operation_parameters_maximum_occurrences["updateUsers:::sort"]=0
operation_parameters_maximum_occurrences["updateUsers:::filter"]=0
operation_parameters_maximum_occurrences["updateUsers:::search"]=0
operation_parameters_maximum_occurrences["updateUsers:::UpdateUsersRequest"]=0
operation_parameters_maximum_occurrences["export:::collection"]=0
operation_parameters_maximum_occurrences["export:::ExportRequest"]=0
operation_parameters_maximum_occurrences["hashGenerate:::HashGenerateRequest"]=0
operation_parameters_maximum_occurrences["hashVerify:::HashVerifyRequest"]=0
operation_parameters_maximum_occurrences["import:::collection"]=0
operation_parameters_maximum_occurrences["import:::file"]=0
operation_parameters_maximum_occurrences["random:::length"]=0
operation_parameters_maximum_occurrences["sort:::collection"]=0
operation_parameters_maximum_occurrences["sort:::SortRequest"]=0

##
# The type of collection for specifying multiple values for parameter:
# - multi, csv, ssv, tsv
declare -A operation_parameters_collection_type
operation_parameters_collection_type["createComment:::meta"]=""
operation_parameters_collection_type["createComment:::CreateCommentRequest"]=""
operation_parameters_collection_type["getActivities:::fields"]="csv"
operation_parameters_collection_type["getActivities:::limit"]=""
operation_parameters_collection_type["getActivities:::meta"]=""
operation_parameters_collection_type["getActivities:::offset"]=""
operation_parameters_collection_type["getActivities:::sort"]="csv"
operation_parameters_collection_type["getActivities:::filter"]="multi"
operation_parameters_collection_type["getActivities:::search"]=""
operation_parameters_collection_type["getActivity:::id"]=""
operation_parameters_collection_type["getActivity:::fields"]="csv"
operation_parameters_collection_type["getActivity:::meta"]=""
operation_parameters_collection_type["getAsset:::id"]=""
operation_parameters_collection_type["getAsset:::key"]=""
operation_parameters_collection_type["getAsset:::transforms"]=""
operation_parameters_collection_type["getAsset:::download"]=""
operation_parameters_collection_type["login:::LoginRequest"]=""
operation_parameters_collection_type["logout:::LogoutRequest"]=""
operation_parameters_collection_type["oauthProvider:::provider"]=""
operation_parameters_collection_type["oauthProvider:::redirect"]=""
operation_parameters_collection_type["passwordRequest:::PasswordRequestRequest"]=""
operation_parameters_collection_type["passwordReset:::PasswordResetRequest"]=""
operation_parameters_collection_type["refresh:::RefreshRequest"]=""
operation_parameters_collection_type["getCollection:::id"]=""
operation_parameters_collection_type["getCollection:::meta"]=""
operation_parameters_collection_type["getCollections:::offset"]=""
operation_parameters_collection_type["getCollections:::meta"]=""
operation_parameters_collection_type["getCollectionField:::collection"]=""
operation_parameters_collection_type["getCollectionField:::id"]=""
operation_parameters_collection_type["getCollectionFields:::collection"]=""
operation_parameters_collection_type["getCollectionFields:::sort"]="csv"
operation_parameters_collection_type["getFields:::limit"]=""
operation_parameters_collection_type["getFields:::sort"]="csv"
operation_parameters_collection_type["createFile:::CreateFileRequest"]=""
operation_parameters_collection_type["deleteFile:::id"]=""
operation_parameters_collection_type["getFile:::id"]=""
operation_parameters_collection_type["getFile:::fields"]="csv"
operation_parameters_collection_type["getFile:::meta"]=""
operation_parameters_collection_type["getFiles:::fields"]="csv"
operation_parameters_collection_type["getFiles:::limit"]=""
operation_parameters_collection_type["getFiles:::offset"]=""
operation_parameters_collection_type["getFiles:::sort"]="csv"
operation_parameters_collection_type["getFiles:::filter"]="multi"
operation_parameters_collection_type["getFiles:::search"]=""
operation_parameters_collection_type["getFiles:::meta"]=""
operation_parameters_collection_type["updateFile:::id"]=""
operation_parameters_collection_type["updateFile:::file"]=""
operation_parameters_collection_type["updateFile:::fields"]="csv"
operation_parameters_collection_type["updateFile:::meta"]=""
operation_parameters_collection_type["updateFile:::title"]=""
operation_parameters_collection_type["updateFile:::filename_download"]=""
operation_parameters_collection_type["updateFile:::description"]=""
operation_parameters_collection_type["updateFile:::folder"]=""
operation_parameters_collection_type["updateFile:::tags"]=
operation_parameters_collection_type["updateFiles:::fields"]="csv"
operation_parameters_collection_type["updateFiles:::limit"]=""
operation_parameters_collection_type["updateFiles:::meta"]=""
operation_parameters_collection_type["updateFiles:::offset"]=""
operation_parameters_collection_type["updateFiles:::sort"]="csv"
operation_parameters_collection_type["updateFiles:::filter"]="multi"
operation_parameters_collection_type["updateFiles:::search"]=""
operation_parameters_collection_type["updateFiles:::UpdateFilesRequest"]=""
operation_parameters_collection_type["getFlow:::id"]=""
operation_parameters_collection_type["createFolder:::fields"]="csv"
operation_parameters_collection_type["createFolder:::meta"]=""
operation_parameters_collection_type["createFolder:::CreateFolderRequest"]=""
operation_parameters_collection_type["deleteFolder:::id"]=""
operation_parameters_collection_type["getFolder:::id"]=""
operation_parameters_collection_type["getFolder:::fields"]="csv"
operation_parameters_collection_type["getFolder:::meta"]=""
operation_parameters_collection_type["getFolders:::fields"]="csv"
operation_parameters_collection_type["getFolders:::limit"]=""
operation_parameters_collection_type["getFolders:::offset"]=""
operation_parameters_collection_type["getFolders:::sort"]="csv"
operation_parameters_collection_type["getFolders:::filter"]="multi"
operation_parameters_collection_type["getFolders:::search"]=""
operation_parameters_collection_type["getFolders:::meta"]=""
operation_parameters_collection_type["updateFolder:::id"]=""
operation_parameters_collection_type["updateFolder:::fields"]="csv"
operation_parameters_collection_type["updateFolder:::meta"]=""
operation_parameters_collection_type["updateFolder:::UpdateFolderRequest"]=""
operation_parameters_collection_type["updateFolders:::fields"]="csv"
operation_parameters_collection_type["updateFolders:::limit"]=""
operation_parameters_collection_type["updateFolders:::meta"]=""
operation_parameters_collection_type["updateFolders:::offset"]=""
operation_parameters_collection_type["updateFolders:::sort"]="csv"
operation_parameters_collection_type["updateFolders:::filter"]="multi"
operation_parameters_collection_type["updateFolders:::search"]=""
operation_parameters_collection_type["updateFolders:::UpdateFoldersRequest"]=""
operation_parameters_collection_type["createItemsAccounts:::meta"]=""
operation_parameters_collection_type["createItemsAccounts:::CreateItemsAccountsRequest"]=""
operation_parameters_collection_type["createItemsAppointments:::meta"]=""
operation_parameters_collection_type["createItemsAppointments:::CreateItemsAppointmentsRequest"]=""
operation_parameters_collection_type["createItemsBudgets:::meta"]=""
operation_parameters_collection_type["createItemsBudgets:::CreateItemsBudgetsRequest"]=""
operation_parameters_collection_type["createItemsCampaigns:::meta"]=""
operation_parameters_collection_type["createItemsCampaigns:::CreateItemsCampaignsRequest"]=""
operation_parameters_collection_type["createItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["createItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=""
operation_parameters_collection_type["createItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["createItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=""
operation_parameters_collection_type["createItemsContent:::meta"]=""
operation_parameters_collection_type["createItemsContent:::CreateItemsContentRequest"]=""
operation_parameters_collection_type["createItemsContracts:::meta"]=""
operation_parameters_collection_type["createItemsContracts:::CreateItemsContractsRequest"]=""
operation_parameters_collection_type["createItemsCrm:::meta"]=""
operation_parameters_collection_type["createItemsCrm:::CreateItemsCrmRequest"]=""
operation_parameters_collection_type["createItemsDepartment:::meta"]=""
operation_parameters_collection_type["createItemsDepartment:::CreateItemsDepartmentRequest"]=""
operation_parameters_collection_type["createItemsDistribution:::meta"]=""
operation_parameters_collection_type["createItemsDistribution:::CreateItemsDistributionRequest"]=""
operation_parameters_collection_type["createItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["createItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=""
operation_parameters_collection_type["createItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["createItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=""
operation_parameters_collection_type["createItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["createItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=""
operation_parameters_collection_type["createItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["createItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=""
operation_parameters_collection_type["createItemsEvents:::meta"]=""
operation_parameters_collection_type["createItemsEvents:::CreateItemsEventsRequest"]=""
operation_parameters_collection_type["createItemsExpenses:::meta"]=""
operation_parameters_collection_type["createItemsExpenses:::CreateItemsExpensesRequest"]=""
operation_parameters_collection_type["createItemsFacilities:::meta"]=""
operation_parameters_collection_type["createItemsFacilities:::CreateItemsFacilitiesRequest"]=""
operation_parameters_collection_type["createItemsFeedback:::meta"]=""
operation_parameters_collection_type["createItemsFeedback:::CreateItemsFeedbackRequest"]=""
operation_parameters_collection_type["createItemsForum:::meta"]=""
operation_parameters_collection_type["createItemsForum:::CreateItemsForumRequest"]=""
operation_parameters_collection_type["createItemsFulfillment:::meta"]=""
operation_parameters_collection_type["createItemsFulfillment:::CreateItemsFulfillmentRequest"]=""
operation_parameters_collection_type["createItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["createItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=""
operation_parameters_collection_type["createItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["createItemsHelpdesk:::CreateItemsHelpdeskRequest"]=""
operation_parameters_collection_type["createItemsInventory:::meta"]=""
operation_parameters_collection_type["createItemsInventory:::CreateItemsInventoryRequest"]=""
operation_parameters_collection_type["createItemsInvoices:::meta"]=""
operation_parameters_collection_type["createItemsInvoices:::CreateItemsInvoicesRequest"]=""
operation_parameters_collection_type["createItemsInvoicing:::meta"]=""
operation_parameters_collection_type["createItemsInvoicing:::CreateItemsInvoicingRequest"]=""
operation_parameters_collection_type["createItemsLifecycle:::meta"]=""
operation_parameters_collection_type["createItemsLifecycle:::CreateItemsLifecycleRequest"]=""
operation_parameters_collection_type["createItemsLiveChat:::meta"]=""
operation_parameters_collection_type["createItemsLiveChat:::CreateItemsLiveChatRequest"]=""
operation_parameters_collection_type["createItemsLoyalty:::meta"]=""
operation_parameters_collection_type["createItemsLoyalty:::CreateItemsLoyaltyRequest"]=""
operation_parameters_collection_type["createItemsMaintenance:::meta"]=""
operation_parameters_collection_type["createItemsMaintenance:::CreateItemsMaintenanceRequest"]=""
operation_parameters_collection_type["createItemsPayroll:::meta"]=""
operation_parameters_collection_type["createItemsPayroll:::CreateItemsPayrollRequest"]=""
operation_parameters_collection_type["createItemsPerformance:::meta"]=""
operation_parameters_collection_type["createItemsPerformance:::CreateItemsPerformanceRequest"]=""
operation_parameters_collection_type["createItemsPointofSale:::meta"]=""
operation_parameters_collection_type["createItemsPointofSale:::CreateItemsPointofSaleRequest"]=""
operation_parameters_collection_type["createItemsPolicy:::meta"]=""
operation_parameters_collection_type["createItemsPolicy:::CreateItemsPolicyRequest"]=""
operation_parameters_collection_type["createItemsProcurement:::meta"]=""
operation_parameters_collection_type["createItemsProcurement:::CreateItemsProcurementRequest"]=""
operation_parameters_collection_type["createItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["createItemsProductionBatch:::CreateItemsProductionBatchRequest"]=""
operation_parameters_collection_type["createItemsProject:::meta"]=""
operation_parameters_collection_type["createItemsProject:::CreateItemsProjectRequest"]=""
operation_parameters_collection_type["createItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["createItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=""
operation_parameters_collection_type["createItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["createItemsQualityCheck:::CreateItemsQualityCheckRequest"]=""
operation_parameters_collection_type["createItemsQuotes:::meta"]=""
operation_parameters_collection_type["createItemsQuotes:::CreateItemsQuotesRequest"]=""
operation_parameters_collection_type["createItemsRecruit:::meta"]=""
operation_parameters_collection_type["createItemsRecruit:::CreateItemsRecruitRequest"]=""
operation_parameters_collection_type["createItemsRegulations:::meta"]=""
operation_parameters_collection_type["createItemsRegulations:::CreateItemsRegulationsRequest"]=""
operation_parameters_collection_type["createItemsRentals:::meta"]=""
operation_parameters_collection_type["createItemsRentals:::CreateItemsRentalsRequest"]=""
operation_parameters_collection_type["createItemsShipment:::meta"]=""
operation_parameters_collection_type["createItemsShipment:::CreateItemsShipmentRequest"]=""
operation_parameters_collection_type["createItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["createItemsSocialMedia:::CreateItemsSocialMediaRequest"]=""
operation_parameters_collection_type["createItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["createItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=""
operation_parameters_collection_type["createItemsSuppliers:::meta"]=""
operation_parameters_collection_type["createItemsSuppliers:::CreateItemsSuppliersRequest"]=""
operation_parameters_collection_type["createItemsSurveys:::meta"]=""
operation_parameters_collection_type["createItemsSurveys:::CreateItemsSurveysRequest"]=""
operation_parameters_collection_type["createItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["createItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=""
operation_parameters_collection_type["createItemsTaxes:::meta"]=""
operation_parameters_collection_type["createItemsTaxes:::CreateItemsTaxesRequest"]=""
operation_parameters_collection_type["createItemsTraining:::meta"]=""
operation_parameters_collection_type["createItemsTraining:::CreateItemsTrainingRequest"]=""
operation_parameters_collection_type["createItemsTransactions:::meta"]=""
operation_parameters_collection_type["createItemsTransactions:::CreateItemsTransactionsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsAccounts:::id"]=""
operation_parameters_collection_type["deleteSingleItemsAppointments:::id"]=""
operation_parameters_collection_type["deleteSingleItemsBudgets:::id"]=""
operation_parameters_collection_type["deleteSingleItemsCampaigns:::id"]=""
operation_parameters_collection_type["deleteSingleItemsCarbonFootprint:::id"]=""
operation_parameters_collection_type["deleteSingleItemsCompanyAssets:::id"]=""
operation_parameters_collection_type["deleteSingleItemsContent:::id"]=""
operation_parameters_collection_type["deleteSingleItemsContracts:::id"]=""
operation_parameters_collection_type["deleteSingleItemsCrm:::id"]=""
operation_parameters_collection_type["deleteSingleItemsDepartment:::id"]=""
operation_parameters_collection_type["deleteSingleItemsDistribution:::id"]=""
operation_parameters_collection_type["deleteSingleItemsEmailCampaigns:::id"]=""
operation_parameters_collection_type["deleteSingleItemsEmployeeDirectory:::id"]=""
operation_parameters_collection_type["deleteSingleItemsEnergyEfficiency:::id"]=""
operation_parameters_collection_type["deleteSingleItemsEnvironmentalCompliance:::id"]=""
operation_parameters_collection_type["deleteSingleItemsEvents:::id"]=""
operation_parameters_collection_type["deleteSingleItemsExpenses:::id"]=""
operation_parameters_collection_type["deleteSingleItemsFacilities:::id"]=""
operation_parameters_collection_type["deleteSingleItemsFeedback:::id"]=""
operation_parameters_collection_type["deleteSingleItemsForum:::id"]=""
operation_parameters_collection_type["deleteSingleItemsFulfillment:::id"]=""
operation_parameters_collection_type["deleteSingleItemsGovernanceandEthics:::id"]=""
operation_parameters_collection_type["deleteSingleItemsHelpdesk:::id"]=""
operation_parameters_collection_type["deleteSingleItemsInventory:::id"]=""
operation_parameters_collection_type["deleteSingleItemsInvoices:::id"]=""
operation_parameters_collection_type["deleteSingleItemsInvoicing:::id"]=""
operation_parameters_collection_type["deleteSingleItemsLifecycle:::id"]=""
operation_parameters_collection_type["deleteSingleItemsLiveChat:::id"]=""
operation_parameters_collection_type["deleteSingleItemsLoyalty:::id"]=""
operation_parameters_collection_type["deleteSingleItemsMaintenance:::id"]=""
operation_parameters_collection_type["deleteSingleItemsPayroll:::id"]=""
operation_parameters_collection_type["deleteSingleItemsPerformance:::id"]=""
operation_parameters_collection_type["deleteSingleItemsPointofSale:::id"]=""
operation_parameters_collection_type["deleteSingleItemsPolicy:::id"]=""
operation_parameters_collection_type["deleteSingleItemsProcurement:::id"]=""
operation_parameters_collection_type["deleteSingleItemsProductionBatch:::id"]=""
operation_parameters_collection_type["deleteSingleItemsProject:::id"]=""
operation_parameters_collection_type["deleteSingleItemsPurchaseOrders:::id"]=""
operation_parameters_collection_type["deleteSingleItemsQualityCheck:::id"]=""
operation_parameters_collection_type["deleteSingleItemsQuotes:::id"]=""
operation_parameters_collection_type["deleteSingleItemsRecruit:::id"]=""
operation_parameters_collection_type["deleteSingleItemsRegulations:::id"]=""
operation_parameters_collection_type["deleteSingleItemsRentals:::id"]=""
operation_parameters_collection_type["deleteSingleItemsShipment:::id"]=""
operation_parameters_collection_type["deleteSingleItemsSocialMedia:::id"]=""
operation_parameters_collection_type["deleteSingleItemsSocialResponsibility:::id"]=""
operation_parameters_collection_type["deleteSingleItemsSuppliers:::id"]=""
operation_parameters_collection_type["deleteSingleItemsSurveys:::id"]=""
operation_parameters_collection_type["deleteSingleItemsSustainableSupplyChain:::id"]=""
operation_parameters_collection_type["deleteSingleItemsTaxes:::id"]=""
operation_parameters_collection_type["deleteSingleItemsTraining:::id"]=""
operation_parameters_collection_type["deleteSingleItemsTransactions:::id"]=""
operation_parameters_collection_type["readItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["readItemsAccounts:::limit"]=""
operation_parameters_collection_type["readItemsAccounts:::meta"]=""
operation_parameters_collection_type["readItemsAccounts:::offset"]=""
operation_parameters_collection_type["readItemsAccounts:::sort"]="csv"
operation_parameters_collection_type["readItemsAccounts:::filter"]="multi"
operation_parameters_collection_type["readItemsAccounts:::search"]=""
operation_parameters_collection_type["readItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["readItemsAppointments:::limit"]=""
operation_parameters_collection_type["readItemsAppointments:::meta"]=""
operation_parameters_collection_type["readItemsAppointments:::offset"]=""
operation_parameters_collection_type["readItemsAppointments:::sort"]="csv"
operation_parameters_collection_type["readItemsAppointments:::filter"]="multi"
operation_parameters_collection_type["readItemsAppointments:::search"]=""
operation_parameters_collection_type["readItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["readItemsBudgets:::limit"]=""
operation_parameters_collection_type["readItemsBudgets:::meta"]=""
operation_parameters_collection_type["readItemsBudgets:::offset"]=""
operation_parameters_collection_type["readItemsBudgets:::sort"]="csv"
operation_parameters_collection_type["readItemsBudgets:::filter"]="multi"
operation_parameters_collection_type["readItemsBudgets:::search"]=""
operation_parameters_collection_type["readItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["readItemsCampaigns:::limit"]=""
operation_parameters_collection_type["readItemsCampaigns:::meta"]=""
operation_parameters_collection_type["readItemsCampaigns:::offset"]=""
operation_parameters_collection_type["readItemsCampaigns:::sort"]="csv"
operation_parameters_collection_type["readItemsCampaigns:::filter"]="multi"
operation_parameters_collection_type["readItemsCampaigns:::search"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["readItemsCarbonFootprint:::limit"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::offset"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::sort"]="csv"
operation_parameters_collection_type["readItemsCarbonFootprint:::filter"]="multi"
operation_parameters_collection_type["readItemsCarbonFootprint:::search"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["readItemsCompanyAssets:::limit"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::offset"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::sort"]="csv"
operation_parameters_collection_type["readItemsCompanyAssets:::filter"]="multi"
operation_parameters_collection_type["readItemsCompanyAssets:::search"]=""
operation_parameters_collection_type["readItemsContent:::fields"]="csv"
operation_parameters_collection_type["readItemsContent:::limit"]=""
operation_parameters_collection_type["readItemsContent:::meta"]=""
operation_parameters_collection_type["readItemsContent:::offset"]=""
operation_parameters_collection_type["readItemsContent:::sort"]="csv"
operation_parameters_collection_type["readItemsContent:::filter"]="multi"
operation_parameters_collection_type["readItemsContent:::search"]=""
operation_parameters_collection_type["readItemsContracts:::fields"]="csv"
operation_parameters_collection_type["readItemsContracts:::limit"]=""
operation_parameters_collection_type["readItemsContracts:::meta"]=""
operation_parameters_collection_type["readItemsContracts:::offset"]=""
operation_parameters_collection_type["readItemsContracts:::sort"]="csv"
operation_parameters_collection_type["readItemsContracts:::filter"]="multi"
operation_parameters_collection_type["readItemsContracts:::search"]=""
operation_parameters_collection_type["readItemsCrm:::fields"]="csv"
operation_parameters_collection_type["readItemsCrm:::limit"]=""
operation_parameters_collection_type["readItemsCrm:::meta"]=""
operation_parameters_collection_type["readItemsCrm:::offset"]=""
operation_parameters_collection_type["readItemsCrm:::sort"]="csv"
operation_parameters_collection_type["readItemsCrm:::filter"]="multi"
operation_parameters_collection_type["readItemsCrm:::search"]=""
operation_parameters_collection_type["readItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["readItemsDepartment:::limit"]=""
operation_parameters_collection_type["readItemsDepartment:::meta"]=""
operation_parameters_collection_type["readItemsDepartment:::offset"]=""
operation_parameters_collection_type["readItemsDepartment:::sort"]="csv"
operation_parameters_collection_type["readItemsDepartment:::filter"]="multi"
operation_parameters_collection_type["readItemsDepartment:::search"]=""
operation_parameters_collection_type["readItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["readItemsDistribution:::limit"]=""
operation_parameters_collection_type["readItemsDistribution:::meta"]=""
operation_parameters_collection_type["readItemsDistribution:::offset"]=""
operation_parameters_collection_type["readItemsDistribution:::sort"]="csv"
operation_parameters_collection_type["readItemsDistribution:::filter"]="multi"
operation_parameters_collection_type["readItemsDistribution:::search"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["readItemsEmailCampaigns:::limit"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::offset"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::sort"]="csv"
operation_parameters_collection_type["readItemsEmailCampaigns:::filter"]="multi"
operation_parameters_collection_type["readItemsEmailCampaigns:::search"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["readItemsEmployeeDirectory:::limit"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::offset"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::sort"]="csv"
operation_parameters_collection_type["readItemsEmployeeDirectory:::filter"]="multi"
operation_parameters_collection_type["readItemsEmployeeDirectory:::search"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["readItemsEnergyEfficiency:::limit"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::offset"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::sort"]="csv"
operation_parameters_collection_type["readItemsEnergyEfficiency:::filter"]="multi"
operation_parameters_collection_type["readItemsEnergyEfficiency:::search"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::limit"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::offset"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::sort"]="csv"
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::filter"]="multi"
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::search"]=""
operation_parameters_collection_type["readItemsEvents:::fields"]="csv"
operation_parameters_collection_type["readItemsEvents:::limit"]=""
operation_parameters_collection_type["readItemsEvents:::meta"]=""
operation_parameters_collection_type["readItemsEvents:::offset"]=""
operation_parameters_collection_type["readItemsEvents:::sort"]="csv"
operation_parameters_collection_type["readItemsEvents:::filter"]="multi"
operation_parameters_collection_type["readItemsEvents:::search"]=""
operation_parameters_collection_type["readItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["readItemsExpenses:::limit"]=""
operation_parameters_collection_type["readItemsExpenses:::meta"]=""
operation_parameters_collection_type["readItemsExpenses:::offset"]=""
operation_parameters_collection_type["readItemsExpenses:::sort"]="csv"
operation_parameters_collection_type["readItemsExpenses:::filter"]="multi"
operation_parameters_collection_type["readItemsExpenses:::search"]=""
operation_parameters_collection_type["readItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["readItemsFacilities:::limit"]=""
operation_parameters_collection_type["readItemsFacilities:::meta"]=""
operation_parameters_collection_type["readItemsFacilities:::offset"]=""
operation_parameters_collection_type["readItemsFacilities:::sort"]="csv"
operation_parameters_collection_type["readItemsFacilities:::filter"]="multi"
operation_parameters_collection_type["readItemsFacilities:::search"]=""
operation_parameters_collection_type["readItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["readItemsFeedback:::limit"]=""
operation_parameters_collection_type["readItemsFeedback:::meta"]=""
operation_parameters_collection_type["readItemsFeedback:::offset"]=""
operation_parameters_collection_type["readItemsFeedback:::sort"]="csv"
operation_parameters_collection_type["readItemsFeedback:::filter"]="multi"
operation_parameters_collection_type["readItemsFeedback:::search"]=""
operation_parameters_collection_type["readItemsForum:::fields"]="csv"
operation_parameters_collection_type["readItemsForum:::limit"]=""
operation_parameters_collection_type["readItemsForum:::meta"]=""
operation_parameters_collection_type["readItemsForum:::offset"]=""
operation_parameters_collection_type["readItemsForum:::sort"]="csv"
operation_parameters_collection_type["readItemsForum:::filter"]="multi"
operation_parameters_collection_type["readItemsForum:::search"]=""
operation_parameters_collection_type["readItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["readItemsFulfillment:::limit"]=""
operation_parameters_collection_type["readItemsFulfillment:::meta"]=""
operation_parameters_collection_type["readItemsFulfillment:::offset"]=""
operation_parameters_collection_type["readItemsFulfillment:::sort"]="csv"
operation_parameters_collection_type["readItemsFulfillment:::filter"]="multi"
operation_parameters_collection_type["readItemsFulfillment:::search"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["readItemsGovernanceandEthics:::limit"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::offset"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::sort"]="csv"
operation_parameters_collection_type["readItemsGovernanceandEthics:::filter"]="multi"
operation_parameters_collection_type["readItemsGovernanceandEthics:::search"]=""
operation_parameters_collection_type["readItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["readItemsHelpdesk:::limit"]=""
operation_parameters_collection_type["readItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["readItemsHelpdesk:::offset"]=""
operation_parameters_collection_type["readItemsHelpdesk:::sort"]="csv"
operation_parameters_collection_type["readItemsHelpdesk:::filter"]="multi"
operation_parameters_collection_type["readItemsHelpdesk:::search"]=""
operation_parameters_collection_type["readItemsInventory:::fields"]="csv"
operation_parameters_collection_type["readItemsInventory:::limit"]=""
operation_parameters_collection_type["readItemsInventory:::meta"]=""
operation_parameters_collection_type["readItemsInventory:::offset"]=""
operation_parameters_collection_type["readItemsInventory:::sort"]="csv"
operation_parameters_collection_type["readItemsInventory:::filter"]="multi"
operation_parameters_collection_type["readItemsInventory:::search"]=""
operation_parameters_collection_type["readItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["readItemsInvoices:::limit"]=""
operation_parameters_collection_type["readItemsInvoices:::meta"]=""
operation_parameters_collection_type["readItemsInvoices:::offset"]=""
operation_parameters_collection_type["readItemsInvoices:::sort"]="csv"
operation_parameters_collection_type["readItemsInvoices:::filter"]="multi"
operation_parameters_collection_type["readItemsInvoices:::search"]=""
operation_parameters_collection_type["readItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["readItemsInvoicing:::limit"]=""
operation_parameters_collection_type["readItemsInvoicing:::meta"]=""
operation_parameters_collection_type["readItemsInvoicing:::offset"]=""
operation_parameters_collection_type["readItemsInvoicing:::sort"]="csv"
operation_parameters_collection_type["readItemsInvoicing:::filter"]="multi"
operation_parameters_collection_type["readItemsInvoicing:::search"]=""
operation_parameters_collection_type["readItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["readItemsLifecycle:::limit"]=""
operation_parameters_collection_type["readItemsLifecycle:::meta"]=""
operation_parameters_collection_type["readItemsLifecycle:::offset"]=""
operation_parameters_collection_type["readItemsLifecycle:::sort"]="csv"
operation_parameters_collection_type["readItemsLifecycle:::filter"]="multi"
operation_parameters_collection_type["readItemsLifecycle:::search"]=""
operation_parameters_collection_type["readItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["readItemsLiveChat:::limit"]=""
operation_parameters_collection_type["readItemsLiveChat:::meta"]=""
operation_parameters_collection_type["readItemsLiveChat:::offset"]=""
operation_parameters_collection_type["readItemsLiveChat:::sort"]="csv"
operation_parameters_collection_type["readItemsLiveChat:::filter"]="multi"
operation_parameters_collection_type["readItemsLiveChat:::search"]=""
operation_parameters_collection_type["readItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["readItemsLoyalty:::limit"]=""
operation_parameters_collection_type["readItemsLoyalty:::meta"]=""
operation_parameters_collection_type["readItemsLoyalty:::offset"]=""
operation_parameters_collection_type["readItemsLoyalty:::sort"]="csv"
operation_parameters_collection_type["readItemsLoyalty:::filter"]="multi"
operation_parameters_collection_type["readItemsLoyalty:::search"]=""
operation_parameters_collection_type["readItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["readItemsMaintenance:::limit"]=""
operation_parameters_collection_type["readItemsMaintenance:::meta"]=""
operation_parameters_collection_type["readItemsMaintenance:::offset"]=""
operation_parameters_collection_type["readItemsMaintenance:::sort"]="csv"
operation_parameters_collection_type["readItemsMaintenance:::filter"]="multi"
operation_parameters_collection_type["readItemsMaintenance:::search"]=""
operation_parameters_collection_type["readItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["readItemsPayroll:::limit"]=""
operation_parameters_collection_type["readItemsPayroll:::meta"]=""
operation_parameters_collection_type["readItemsPayroll:::offset"]=""
operation_parameters_collection_type["readItemsPayroll:::sort"]="csv"
operation_parameters_collection_type["readItemsPayroll:::filter"]="multi"
operation_parameters_collection_type["readItemsPayroll:::search"]=""
operation_parameters_collection_type["readItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["readItemsPerformance:::limit"]=""
operation_parameters_collection_type["readItemsPerformance:::meta"]=""
operation_parameters_collection_type["readItemsPerformance:::offset"]=""
operation_parameters_collection_type["readItemsPerformance:::sort"]="csv"
operation_parameters_collection_type["readItemsPerformance:::filter"]="multi"
operation_parameters_collection_type["readItemsPerformance:::search"]=""
operation_parameters_collection_type["readItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["readItemsPointofSale:::limit"]=""
operation_parameters_collection_type["readItemsPointofSale:::meta"]=""
operation_parameters_collection_type["readItemsPointofSale:::offset"]=""
operation_parameters_collection_type["readItemsPointofSale:::sort"]="csv"
operation_parameters_collection_type["readItemsPointofSale:::filter"]="multi"
operation_parameters_collection_type["readItemsPointofSale:::search"]=""
operation_parameters_collection_type["readItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["readItemsPolicy:::limit"]=""
operation_parameters_collection_type["readItemsPolicy:::meta"]=""
operation_parameters_collection_type["readItemsPolicy:::offset"]=""
operation_parameters_collection_type["readItemsPolicy:::sort"]="csv"
operation_parameters_collection_type["readItemsPolicy:::filter"]="multi"
operation_parameters_collection_type["readItemsPolicy:::search"]=""
operation_parameters_collection_type["readItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["readItemsProcurement:::limit"]=""
operation_parameters_collection_type["readItemsProcurement:::meta"]=""
operation_parameters_collection_type["readItemsProcurement:::offset"]=""
operation_parameters_collection_type["readItemsProcurement:::sort"]="csv"
operation_parameters_collection_type["readItemsProcurement:::filter"]="multi"
operation_parameters_collection_type["readItemsProcurement:::search"]=""
operation_parameters_collection_type["readItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["readItemsProductionBatch:::limit"]=""
operation_parameters_collection_type["readItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["readItemsProductionBatch:::offset"]=""
operation_parameters_collection_type["readItemsProductionBatch:::sort"]="csv"
operation_parameters_collection_type["readItemsProductionBatch:::filter"]="multi"
operation_parameters_collection_type["readItemsProductionBatch:::search"]=""
operation_parameters_collection_type["readItemsProject:::fields"]="csv"
operation_parameters_collection_type["readItemsProject:::limit"]=""
operation_parameters_collection_type["readItemsProject:::meta"]=""
operation_parameters_collection_type["readItemsProject:::offset"]=""
operation_parameters_collection_type["readItemsProject:::sort"]="csv"
operation_parameters_collection_type["readItemsProject:::filter"]="multi"
operation_parameters_collection_type["readItemsProject:::search"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["readItemsPurchaseOrders:::limit"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::offset"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::sort"]="csv"
operation_parameters_collection_type["readItemsPurchaseOrders:::filter"]="multi"
operation_parameters_collection_type["readItemsPurchaseOrders:::search"]=""
operation_parameters_collection_type["readItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["readItemsQualityCheck:::limit"]=""
operation_parameters_collection_type["readItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["readItemsQualityCheck:::offset"]=""
operation_parameters_collection_type["readItemsQualityCheck:::sort"]="csv"
operation_parameters_collection_type["readItemsQualityCheck:::filter"]="multi"
operation_parameters_collection_type["readItemsQualityCheck:::search"]=""
operation_parameters_collection_type["readItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["readItemsQuotes:::limit"]=""
operation_parameters_collection_type["readItemsQuotes:::meta"]=""
operation_parameters_collection_type["readItemsQuotes:::offset"]=""
operation_parameters_collection_type["readItemsQuotes:::sort"]="csv"
operation_parameters_collection_type["readItemsQuotes:::filter"]="multi"
operation_parameters_collection_type["readItemsQuotes:::search"]=""
operation_parameters_collection_type["readItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["readItemsRecruit:::limit"]=""
operation_parameters_collection_type["readItemsRecruit:::meta"]=""
operation_parameters_collection_type["readItemsRecruit:::offset"]=""
operation_parameters_collection_type["readItemsRecruit:::sort"]="csv"
operation_parameters_collection_type["readItemsRecruit:::filter"]="multi"
operation_parameters_collection_type["readItemsRecruit:::search"]=""
operation_parameters_collection_type["readItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["readItemsRegulations:::limit"]=""
operation_parameters_collection_type["readItemsRegulations:::meta"]=""
operation_parameters_collection_type["readItemsRegulations:::offset"]=""
operation_parameters_collection_type["readItemsRegulations:::sort"]="csv"
operation_parameters_collection_type["readItemsRegulations:::filter"]="multi"
operation_parameters_collection_type["readItemsRegulations:::search"]=""
operation_parameters_collection_type["readItemsRentals:::fields"]="csv"
operation_parameters_collection_type["readItemsRentals:::limit"]=""
operation_parameters_collection_type["readItemsRentals:::meta"]=""
operation_parameters_collection_type["readItemsRentals:::offset"]=""
operation_parameters_collection_type["readItemsRentals:::sort"]="csv"
operation_parameters_collection_type["readItemsRentals:::filter"]="multi"
operation_parameters_collection_type["readItemsRentals:::search"]=""
operation_parameters_collection_type["readItemsShipment:::fields"]="csv"
operation_parameters_collection_type["readItemsShipment:::limit"]=""
operation_parameters_collection_type["readItemsShipment:::meta"]=""
operation_parameters_collection_type["readItemsShipment:::offset"]=""
operation_parameters_collection_type["readItemsShipment:::sort"]="csv"
operation_parameters_collection_type["readItemsShipment:::filter"]="multi"
operation_parameters_collection_type["readItemsShipment:::search"]=""
operation_parameters_collection_type["readItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["readItemsSocialMedia:::limit"]=""
operation_parameters_collection_type["readItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["readItemsSocialMedia:::offset"]=""
operation_parameters_collection_type["readItemsSocialMedia:::sort"]="csv"
operation_parameters_collection_type["readItemsSocialMedia:::filter"]="multi"
operation_parameters_collection_type["readItemsSocialMedia:::search"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["readItemsSocialResponsibility:::limit"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::offset"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::sort"]="csv"
operation_parameters_collection_type["readItemsSocialResponsibility:::filter"]="multi"
operation_parameters_collection_type["readItemsSocialResponsibility:::search"]=""
operation_parameters_collection_type["readItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["readItemsSuppliers:::limit"]=""
operation_parameters_collection_type["readItemsSuppliers:::meta"]=""
operation_parameters_collection_type["readItemsSuppliers:::offset"]=""
operation_parameters_collection_type["readItemsSuppliers:::sort"]="csv"
operation_parameters_collection_type["readItemsSuppliers:::filter"]="multi"
operation_parameters_collection_type["readItemsSuppliers:::search"]=""
operation_parameters_collection_type["readItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["readItemsSurveys:::limit"]=""
operation_parameters_collection_type["readItemsSurveys:::meta"]=""
operation_parameters_collection_type["readItemsSurveys:::offset"]=""
operation_parameters_collection_type["readItemsSurveys:::sort"]="csv"
operation_parameters_collection_type["readItemsSurveys:::filter"]="multi"
operation_parameters_collection_type["readItemsSurveys:::search"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["readItemsSustainableSupplyChain:::limit"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::offset"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::sort"]="csv"
operation_parameters_collection_type["readItemsSustainableSupplyChain:::filter"]="multi"
operation_parameters_collection_type["readItemsSustainableSupplyChain:::search"]=""
operation_parameters_collection_type["readItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["readItemsTaxes:::limit"]=""
operation_parameters_collection_type["readItemsTaxes:::meta"]=""
operation_parameters_collection_type["readItemsTaxes:::offset"]=""
operation_parameters_collection_type["readItemsTaxes:::sort"]="csv"
operation_parameters_collection_type["readItemsTaxes:::filter"]="multi"
operation_parameters_collection_type["readItemsTaxes:::search"]=""
operation_parameters_collection_type["readItemsTraining:::fields"]="csv"
operation_parameters_collection_type["readItemsTraining:::limit"]=""
operation_parameters_collection_type["readItemsTraining:::meta"]=""
operation_parameters_collection_type["readItemsTraining:::offset"]=""
operation_parameters_collection_type["readItemsTraining:::sort"]="csv"
operation_parameters_collection_type["readItemsTraining:::filter"]="multi"
operation_parameters_collection_type["readItemsTraining:::search"]=""
operation_parameters_collection_type["readItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["readItemsTransactions:::limit"]=""
operation_parameters_collection_type["readItemsTransactions:::meta"]=""
operation_parameters_collection_type["readItemsTransactions:::offset"]=""
operation_parameters_collection_type["readItemsTransactions:::sort"]="csv"
operation_parameters_collection_type["readItemsTransactions:::filter"]="multi"
operation_parameters_collection_type["readItemsTransactions:::search"]=""
operation_parameters_collection_type["readSingleItemsAccounts:::id"]=""
operation_parameters_collection_type["readSingleItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsAccounts:::meta"]=""
operation_parameters_collection_type["readSingleItemsAccounts:::version"]=""
operation_parameters_collection_type["readSingleItemsAppointments:::id"]=""
operation_parameters_collection_type["readSingleItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsAppointments:::meta"]=""
operation_parameters_collection_type["readSingleItemsAppointments:::version"]=""
operation_parameters_collection_type["readSingleItemsBudgets:::id"]=""
operation_parameters_collection_type["readSingleItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsBudgets:::meta"]=""
operation_parameters_collection_type["readSingleItemsBudgets:::version"]=""
operation_parameters_collection_type["readSingleItemsCampaigns:::id"]=""
operation_parameters_collection_type["readSingleItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCampaigns:::meta"]=""
operation_parameters_collection_type["readSingleItemsCampaigns:::version"]=""
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::id"]=""
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::version"]=""
operation_parameters_collection_type["readSingleItemsCompanyAssets:::id"]=""
operation_parameters_collection_type["readSingleItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["readSingleItemsCompanyAssets:::version"]=""
operation_parameters_collection_type["readSingleItemsContent:::id"]=""
operation_parameters_collection_type["readSingleItemsContent:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsContent:::meta"]=""
operation_parameters_collection_type["readSingleItemsContent:::version"]=""
operation_parameters_collection_type["readSingleItemsContracts:::id"]=""
operation_parameters_collection_type["readSingleItemsContracts:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsContracts:::meta"]=""
operation_parameters_collection_type["readSingleItemsContracts:::version"]=""
operation_parameters_collection_type["readSingleItemsCrm:::id"]=""
operation_parameters_collection_type["readSingleItemsCrm:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCrm:::meta"]=""
operation_parameters_collection_type["readSingleItemsCrm:::version"]=""
operation_parameters_collection_type["readSingleItemsDepartment:::id"]=""
operation_parameters_collection_type["readSingleItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsDepartment:::meta"]=""
operation_parameters_collection_type["readSingleItemsDepartment:::version"]=""
operation_parameters_collection_type["readSingleItemsDistribution:::id"]=""
operation_parameters_collection_type["readSingleItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsDistribution:::meta"]=""
operation_parameters_collection_type["readSingleItemsDistribution:::version"]=""
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::id"]=""
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::version"]=""
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::id"]=""
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::version"]=""
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::id"]=""
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::version"]=""
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::id"]=""
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::version"]=""
operation_parameters_collection_type["readSingleItemsEvents:::id"]=""
operation_parameters_collection_type["readSingleItemsEvents:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEvents:::meta"]=""
operation_parameters_collection_type["readSingleItemsEvents:::version"]=""
operation_parameters_collection_type["readSingleItemsExpenses:::id"]=""
operation_parameters_collection_type["readSingleItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsExpenses:::meta"]=""
operation_parameters_collection_type["readSingleItemsExpenses:::version"]=""
operation_parameters_collection_type["readSingleItemsFacilities:::id"]=""
operation_parameters_collection_type["readSingleItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsFacilities:::meta"]=""
operation_parameters_collection_type["readSingleItemsFacilities:::version"]=""
operation_parameters_collection_type["readSingleItemsFeedback:::id"]=""
operation_parameters_collection_type["readSingleItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsFeedback:::meta"]=""
operation_parameters_collection_type["readSingleItemsFeedback:::version"]=""
operation_parameters_collection_type["readSingleItemsForum:::id"]=""
operation_parameters_collection_type["readSingleItemsForum:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsForum:::meta"]=""
operation_parameters_collection_type["readSingleItemsForum:::version"]=""
operation_parameters_collection_type["readSingleItemsFulfillment:::id"]=""
operation_parameters_collection_type["readSingleItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsFulfillment:::meta"]=""
operation_parameters_collection_type["readSingleItemsFulfillment:::version"]=""
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::id"]=""
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::version"]=""
operation_parameters_collection_type["readSingleItemsHelpdesk:::id"]=""
operation_parameters_collection_type["readSingleItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["readSingleItemsHelpdesk:::version"]=""
operation_parameters_collection_type["readSingleItemsInventory:::id"]=""
operation_parameters_collection_type["readSingleItemsInventory:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsInventory:::meta"]=""
operation_parameters_collection_type["readSingleItemsInventory:::version"]=""
operation_parameters_collection_type["readSingleItemsInvoices:::id"]=""
operation_parameters_collection_type["readSingleItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsInvoices:::meta"]=""
operation_parameters_collection_type["readSingleItemsInvoices:::version"]=""
operation_parameters_collection_type["readSingleItemsInvoicing:::id"]=""
operation_parameters_collection_type["readSingleItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsInvoicing:::meta"]=""
operation_parameters_collection_type["readSingleItemsInvoicing:::version"]=""
operation_parameters_collection_type["readSingleItemsLifecycle:::id"]=""
operation_parameters_collection_type["readSingleItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsLifecycle:::meta"]=""
operation_parameters_collection_type["readSingleItemsLifecycle:::version"]=""
operation_parameters_collection_type["readSingleItemsLiveChat:::id"]=""
operation_parameters_collection_type["readSingleItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsLiveChat:::meta"]=""
operation_parameters_collection_type["readSingleItemsLiveChat:::version"]=""
operation_parameters_collection_type["readSingleItemsLoyalty:::id"]=""
operation_parameters_collection_type["readSingleItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsLoyalty:::meta"]=""
operation_parameters_collection_type["readSingleItemsLoyalty:::version"]=""
operation_parameters_collection_type["readSingleItemsMaintenance:::id"]=""
operation_parameters_collection_type["readSingleItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsMaintenance:::meta"]=""
operation_parameters_collection_type["readSingleItemsMaintenance:::version"]=""
operation_parameters_collection_type["readSingleItemsPayroll:::id"]=""
operation_parameters_collection_type["readSingleItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPayroll:::meta"]=""
operation_parameters_collection_type["readSingleItemsPayroll:::version"]=""
operation_parameters_collection_type["readSingleItemsPerformance:::id"]=""
operation_parameters_collection_type["readSingleItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPerformance:::meta"]=""
operation_parameters_collection_type["readSingleItemsPerformance:::version"]=""
operation_parameters_collection_type["readSingleItemsPointofSale:::id"]=""
operation_parameters_collection_type["readSingleItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPointofSale:::meta"]=""
operation_parameters_collection_type["readSingleItemsPointofSale:::version"]=""
operation_parameters_collection_type["readSingleItemsPolicy:::id"]=""
operation_parameters_collection_type["readSingleItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPolicy:::meta"]=""
operation_parameters_collection_type["readSingleItemsPolicy:::version"]=""
operation_parameters_collection_type["readSingleItemsProcurement:::id"]=""
operation_parameters_collection_type["readSingleItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsProcurement:::meta"]=""
operation_parameters_collection_type["readSingleItemsProcurement:::version"]=""
operation_parameters_collection_type["readSingleItemsProductionBatch:::id"]=""
operation_parameters_collection_type["readSingleItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["readSingleItemsProductionBatch:::version"]=""
operation_parameters_collection_type["readSingleItemsProject:::id"]=""
operation_parameters_collection_type["readSingleItemsProject:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsProject:::meta"]=""
operation_parameters_collection_type["readSingleItemsProject:::version"]=""
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::id"]=""
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::version"]=""
operation_parameters_collection_type["readSingleItemsQualityCheck:::id"]=""
operation_parameters_collection_type["readSingleItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["readSingleItemsQualityCheck:::version"]=""
operation_parameters_collection_type["readSingleItemsQuotes:::id"]=""
operation_parameters_collection_type["readSingleItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsQuotes:::meta"]=""
operation_parameters_collection_type["readSingleItemsQuotes:::version"]=""
operation_parameters_collection_type["readSingleItemsRecruit:::id"]=""
operation_parameters_collection_type["readSingleItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsRecruit:::meta"]=""
operation_parameters_collection_type["readSingleItemsRecruit:::version"]=""
operation_parameters_collection_type["readSingleItemsRegulations:::id"]=""
operation_parameters_collection_type["readSingleItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsRegulations:::meta"]=""
operation_parameters_collection_type["readSingleItemsRegulations:::version"]=""
operation_parameters_collection_type["readSingleItemsRentals:::id"]=""
operation_parameters_collection_type["readSingleItemsRentals:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsRentals:::meta"]=""
operation_parameters_collection_type["readSingleItemsRentals:::version"]=""
operation_parameters_collection_type["readSingleItemsShipment:::id"]=""
operation_parameters_collection_type["readSingleItemsShipment:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsShipment:::meta"]=""
operation_parameters_collection_type["readSingleItemsShipment:::version"]=""
operation_parameters_collection_type["readSingleItemsSocialMedia:::id"]=""
operation_parameters_collection_type["readSingleItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["readSingleItemsSocialMedia:::version"]=""
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::id"]=""
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::version"]=""
operation_parameters_collection_type["readSingleItemsSuppliers:::id"]=""
operation_parameters_collection_type["readSingleItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSuppliers:::meta"]=""
operation_parameters_collection_type["readSingleItemsSuppliers:::version"]=""
operation_parameters_collection_type["readSingleItemsSurveys:::id"]=""
operation_parameters_collection_type["readSingleItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSurveys:::meta"]=""
operation_parameters_collection_type["readSingleItemsSurveys:::version"]=""
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::id"]=""
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::version"]=""
operation_parameters_collection_type["readSingleItemsTaxes:::id"]=""
operation_parameters_collection_type["readSingleItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsTaxes:::meta"]=""
operation_parameters_collection_type["readSingleItemsTaxes:::version"]=""
operation_parameters_collection_type["readSingleItemsTraining:::id"]=""
operation_parameters_collection_type["readSingleItemsTraining:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsTraining:::meta"]=""
operation_parameters_collection_type["readSingleItemsTraining:::version"]=""
operation_parameters_collection_type["readSingleItemsTransactions:::id"]=""
operation_parameters_collection_type["readSingleItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsTransactions:::meta"]=""
operation_parameters_collection_type["readSingleItemsTransactions:::version"]=""
operation_parameters_collection_type["updateItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["updateItemsAccounts:::limit"]=""
operation_parameters_collection_type["updateItemsAccounts:::meta"]=""
operation_parameters_collection_type["updateItemsAccounts:::offset"]=""
operation_parameters_collection_type["updateItemsAccounts:::sort"]="csv"
operation_parameters_collection_type["updateItemsAccounts:::filter"]="multi"
operation_parameters_collection_type["updateItemsAccounts:::search"]=""
operation_parameters_collection_type["updateItemsAccounts:::CreateItemsAccountsRequest"]=""
operation_parameters_collection_type["updateItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["updateItemsAppointments:::limit"]=""
operation_parameters_collection_type["updateItemsAppointments:::meta"]=""
operation_parameters_collection_type["updateItemsAppointments:::offset"]=""
operation_parameters_collection_type["updateItemsAppointments:::sort"]="csv"
operation_parameters_collection_type["updateItemsAppointments:::filter"]="multi"
operation_parameters_collection_type["updateItemsAppointments:::search"]=""
operation_parameters_collection_type["updateItemsAppointments:::CreateItemsAppointmentsRequest"]=""
operation_parameters_collection_type["updateItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["updateItemsBudgets:::limit"]=""
operation_parameters_collection_type["updateItemsBudgets:::meta"]=""
operation_parameters_collection_type["updateItemsBudgets:::offset"]=""
operation_parameters_collection_type["updateItemsBudgets:::sort"]="csv"
operation_parameters_collection_type["updateItemsBudgets:::filter"]="multi"
operation_parameters_collection_type["updateItemsBudgets:::search"]=""
operation_parameters_collection_type["updateItemsBudgets:::CreateItemsBudgetsRequest"]=""
operation_parameters_collection_type["updateItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateItemsCampaigns:::limit"]=""
operation_parameters_collection_type["updateItemsCampaigns:::meta"]=""
operation_parameters_collection_type["updateItemsCampaigns:::offset"]=""
operation_parameters_collection_type["updateItemsCampaigns:::sort"]="csv"
operation_parameters_collection_type["updateItemsCampaigns:::filter"]="multi"
operation_parameters_collection_type["updateItemsCampaigns:::search"]=""
operation_parameters_collection_type["updateItemsCampaigns:::CreateItemsCampaignsRequest"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["updateItemsCarbonFootprint:::limit"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::offset"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::sort"]="csv"
operation_parameters_collection_type["updateItemsCarbonFootprint:::filter"]="multi"
operation_parameters_collection_type["updateItemsCarbonFootprint:::search"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["updateItemsCompanyAssets:::limit"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::offset"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::sort"]="csv"
operation_parameters_collection_type["updateItemsCompanyAssets:::filter"]="multi"
operation_parameters_collection_type["updateItemsCompanyAssets:::search"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=""
operation_parameters_collection_type["updateItemsContent:::fields"]="csv"
operation_parameters_collection_type["updateItemsContent:::limit"]=""
operation_parameters_collection_type["updateItemsContent:::meta"]=""
operation_parameters_collection_type["updateItemsContent:::offset"]=""
operation_parameters_collection_type["updateItemsContent:::sort"]="csv"
operation_parameters_collection_type["updateItemsContent:::filter"]="multi"
operation_parameters_collection_type["updateItemsContent:::search"]=""
operation_parameters_collection_type["updateItemsContent:::CreateItemsContentRequest"]=""
operation_parameters_collection_type["updateItemsContracts:::fields"]="csv"
operation_parameters_collection_type["updateItemsContracts:::limit"]=""
operation_parameters_collection_type["updateItemsContracts:::meta"]=""
operation_parameters_collection_type["updateItemsContracts:::offset"]=""
operation_parameters_collection_type["updateItemsContracts:::sort"]="csv"
operation_parameters_collection_type["updateItemsContracts:::filter"]="multi"
operation_parameters_collection_type["updateItemsContracts:::search"]=""
operation_parameters_collection_type["updateItemsContracts:::CreateItemsContractsRequest"]=""
operation_parameters_collection_type["updateItemsCrm:::fields"]="csv"
operation_parameters_collection_type["updateItemsCrm:::limit"]=""
operation_parameters_collection_type["updateItemsCrm:::meta"]=""
operation_parameters_collection_type["updateItemsCrm:::offset"]=""
operation_parameters_collection_type["updateItemsCrm:::sort"]="csv"
operation_parameters_collection_type["updateItemsCrm:::filter"]="multi"
operation_parameters_collection_type["updateItemsCrm:::search"]=""
operation_parameters_collection_type["updateItemsCrm:::CreateItemsCrmRequest"]=""
operation_parameters_collection_type["updateItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["updateItemsDepartment:::limit"]=""
operation_parameters_collection_type["updateItemsDepartment:::meta"]=""
operation_parameters_collection_type["updateItemsDepartment:::offset"]=""
operation_parameters_collection_type["updateItemsDepartment:::sort"]="csv"
operation_parameters_collection_type["updateItemsDepartment:::filter"]="multi"
operation_parameters_collection_type["updateItemsDepartment:::search"]=""
operation_parameters_collection_type["updateItemsDepartment:::CreateItemsDepartmentRequest"]=""
operation_parameters_collection_type["updateItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["updateItemsDistribution:::limit"]=""
operation_parameters_collection_type["updateItemsDistribution:::meta"]=""
operation_parameters_collection_type["updateItemsDistribution:::offset"]=""
operation_parameters_collection_type["updateItemsDistribution:::sort"]="csv"
operation_parameters_collection_type["updateItemsDistribution:::filter"]="multi"
operation_parameters_collection_type["updateItemsDistribution:::search"]=""
operation_parameters_collection_type["updateItemsDistribution:::CreateItemsDistributionRequest"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateItemsEmailCampaigns:::limit"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::offset"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::sort"]="csv"
operation_parameters_collection_type["updateItemsEmailCampaigns:::filter"]="multi"
operation_parameters_collection_type["updateItemsEmailCampaigns:::search"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["updateItemsEmployeeDirectory:::limit"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::offset"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::sort"]="csv"
operation_parameters_collection_type["updateItemsEmployeeDirectory:::filter"]="multi"
operation_parameters_collection_type["updateItemsEmployeeDirectory:::search"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["updateItemsEnergyEfficiency:::limit"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::offset"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::sort"]="csv"
operation_parameters_collection_type["updateItemsEnergyEfficiency:::filter"]="multi"
operation_parameters_collection_type["updateItemsEnergyEfficiency:::search"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::limit"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::offset"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::sort"]="csv"
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::filter"]="multi"
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::search"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=""
operation_parameters_collection_type["updateItemsEvents:::fields"]="csv"
operation_parameters_collection_type["updateItemsEvents:::limit"]=""
operation_parameters_collection_type["updateItemsEvents:::meta"]=""
operation_parameters_collection_type["updateItemsEvents:::offset"]=""
operation_parameters_collection_type["updateItemsEvents:::sort"]="csv"
operation_parameters_collection_type["updateItemsEvents:::filter"]="multi"
operation_parameters_collection_type["updateItemsEvents:::search"]=""
operation_parameters_collection_type["updateItemsEvents:::CreateItemsEventsRequest"]=""
operation_parameters_collection_type["updateItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["updateItemsExpenses:::limit"]=""
operation_parameters_collection_type["updateItemsExpenses:::meta"]=""
operation_parameters_collection_type["updateItemsExpenses:::offset"]=""
operation_parameters_collection_type["updateItemsExpenses:::sort"]="csv"
operation_parameters_collection_type["updateItemsExpenses:::filter"]="multi"
operation_parameters_collection_type["updateItemsExpenses:::search"]=""
operation_parameters_collection_type["updateItemsExpenses:::CreateItemsExpensesRequest"]=""
operation_parameters_collection_type["updateItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["updateItemsFacilities:::limit"]=""
operation_parameters_collection_type["updateItemsFacilities:::meta"]=""
operation_parameters_collection_type["updateItemsFacilities:::offset"]=""
operation_parameters_collection_type["updateItemsFacilities:::sort"]="csv"
operation_parameters_collection_type["updateItemsFacilities:::filter"]="multi"
operation_parameters_collection_type["updateItemsFacilities:::search"]=""
operation_parameters_collection_type["updateItemsFacilities:::CreateItemsFacilitiesRequest"]=""
operation_parameters_collection_type["updateItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["updateItemsFeedback:::limit"]=""
operation_parameters_collection_type["updateItemsFeedback:::meta"]=""
operation_parameters_collection_type["updateItemsFeedback:::offset"]=""
operation_parameters_collection_type["updateItemsFeedback:::sort"]="csv"
operation_parameters_collection_type["updateItemsFeedback:::filter"]="multi"
operation_parameters_collection_type["updateItemsFeedback:::search"]=""
operation_parameters_collection_type["updateItemsFeedback:::CreateItemsFeedbackRequest"]=""
operation_parameters_collection_type["updateItemsForum:::fields"]="csv"
operation_parameters_collection_type["updateItemsForum:::limit"]=""
operation_parameters_collection_type["updateItemsForum:::meta"]=""
operation_parameters_collection_type["updateItemsForum:::offset"]=""
operation_parameters_collection_type["updateItemsForum:::sort"]="csv"
operation_parameters_collection_type["updateItemsForum:::filter"]="multi"
operation_parameters_collection_type["updateItemsForum:::search"]=""
operation_parameters_collection_type["updateItemsForum:::CreateItemsForumRequest"]=""
operation_parameters_collection_type["updateItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["updateItemsFulfillment:::limit"]=""
operation_parameters_collection_type["updateItemsFulfillment:::meta"]=""
operation_parameters_collection_type["updateItemsFulfillment:::offset"]=""
operation_parameters_collection_type["updateItemsFulfillment:::sort"]="csv"
operation_parameters_collection_type["updateItemsFulfillment:::filter"]="multi"
operation_parameters_collection_type["updateItemsFulfillment:::search"]=""
operation_parameters_collection_type["updateItemsFulfillment:::CreateItemsFulfillmentRequest"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["updateItemsGovernanceandEthics:::limit"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::offset"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::sort"]="csv"
operation_parameters_collection_type["updateItemsGovernanceandEthics:::filter"]="multi"
operation_parameters_collection_type["updateItemsGovernanceandEthics:::search"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["updateItemsHelpdesk:::limit"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::offset"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::sort"]="csv"
operation_parameters_collection_type["updateItemsHelpdesk:::filter"]="multi"
operation_parameters_collection_type["updateItemsHelpdesk:::search"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::CreateItemsHelpdeskRequest"]=""
operation_parameters_collection_type["updateItemsInventory:::fields"]="csv"
operation_parameters_collection_type["updateItemsInventory:::limit"]=""
operation_parameters_collection_type["updateItemsInventory:::meta"]=""
operation_parameters_collection_type["updateItemsInventory:::offset"]=""
operation_parameters_collection_type["updateItemsInventory:::sort"]="csv"
operation_parameters_collection_type["updateItemsInventory:::filter"]="multi"
operation_parameters_collection_type["updateItemsInventory:::search"]=""
operation_parameters_collection_type["updateItemsInventory:::CreateItemsInventoryRequest"]=""
operation_parameters_collection_type["updateItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["updateItemsInvoices:::limit"]=""
operation_parameters_collection_type["updateItemsInvoices:::meta"]=""
operation_parameters_collection_type["updateItemsInvoices:::offset"]=""
operation_parameters_collection_type["updateItemsInvoices:::sort"]="csv"
operation_parameters_collection_type["updateItemsInvoices:::filter"]="multi"
operation_parameters_collection_type["updateItemsInvoices:::search"]=""
operation_parameters_collection_type["updateItemsInvoices:::CreateItemsInvoicesRequest"]=""
operation_parameters_collection_type["updateItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["updateItemsInvoicing:::limit"]=""
operation_parameters_collection_type["updateItemsInvoicing:::meta"]=""
operation_parameters_collection_type["updateItemsInvoicing:::offset"]=""
operation_parameters_collection_type["updateItemsInvoicing:::sort"]="csv"
operation_parameters_collection_type["updateItemsInvoicing:::filter"]="multi"
operation_parameters_collection_type["updateItemsInvoicing:::search"]=""
operation_parameters_collection_type["updateItemsInvoicing:::CreateItemsInvoicingRequest"]=""
operation_parameters_collection_type["updateItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["updateItemsLifecycle:::limit"]=""
operation_parameters_collection_type["updateItemsLifecycle:::meta"]=""
operation_parameters_collection_type["updateItemsLifecycle:::offset"]=""
operation_parameters_collection_type["updateItemsLifecycle:::sort"]="csv"
operation_parameters_collection_type["updateItemsLifecycle:::filter"]="multi"
operation_parameters_collection_type["updateItemsLifecycle:::search"]=""
operation_parameters_collection_type["updateItemsLifecycle:::CreateItemsLifecycleRequest"]=""
operation_parameters_collection_type["updateItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["updateItemsLiveChat:::limit"]=""
operation_parameters_collection_type["updateItemsLiveChat:::meta"]=""
operation_parameters_collection_type["updateItemsLiveChat:::offset"]=""
operation_parameters_collection_type["updateItemsLiveChat:::sort"]="csv"
operation_parameters_collection_type["updateItemsLiveChat:::filter"]="multi"
operation_parameters_collection_type["updateItemsLiveChat:::search"]=""
operation_parameters_collection_type["updateItemsLiveChat:::CreateItemsLiveChatRequest"]=""
operation_parameters_collection_type["updateItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["updateItemsLoyalty:::limit"]=""
operation_parameters_collection_type["updateItemsLoyalty:::meta"]=""
operation_parameters_collection_type["updateItemsLoyalty:::offset"]=""
operation_parameters_collection_type["updateItemsLoyalty:::sort"]="csv"
operation_parameters_collection_type["updateItemsLoyalty:::filter"]="multi"
operation_parameters_collection_type["updateItemsLoyalty:::search"]=""
operation_parameters_collection_type["updateItemsLoyalty:::CreateItemsLoyaltyRequest"]=""
operation_parameters_collection_type["updateItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["updateItemsMaintenance:::limit"]=""
operation_parameters_collection_type["updateItemsMaintenance:::meta"]=""
operation_parameters_collection_type["updateItemsMaintenance:::offset"]=""
operation_parameters_collection_type["updateItemsMaintenance:::sort"]="csv"
operation_parameters_collection_type["updateItemsMaintenance:::filter"]="multi"
operation_parameters_collection_type["updateItemsMaintenance:::search"]=""
operation_parameters_collection_type["updateItemsMaintenance:::CreateItemsMaintenanceRequest"]=""
operation_parameters_collection_type["updateItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["updateItemsPayroll:::limit"]=""
operation_parameters_collection_type["updateItemsPayroll:::meta"]=""
operation_parameters_collection_type["updateItemsPayroll:::offset"]=""
operation_parameters_collection_type["updateItemsPayroll:::sort"]="csv"
operation_parameters_collection_type["updateItemsPayroll:::filter"]="multi"
operation_parameters_collection_type["updateItemsPayroll:::search"]=""
operation_parameters_collection_type["updateItemsPayroll:::CreateItemsPayrollRequest"]=""
operation_parameters_collection_type["updateItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["updateItemsPerformance:::limit"]=""
operation_parameters_collection_type["updateItemsPerformance:::meta"]=""
operation_parameters_collection_type["updateItemsPerformance:::offset"]=""
operation_parameters_collection_type["updateItemsPerformance:::sort"]="csv"
operation_parameters_collection_type["updateItemsPerformance:::filter"]="multi"
operation_parameters_collection_type["updateItemsPerformance:::search"]=""
operation_parameters_collection_type["updateItemsPerformance:::CreateItemsPerformanceRequest"]=""
operation_parameters_collection_type["updateItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["updateItemsPointofSale:::limit"]=""
operation_parameters_collection_type["updateItemsPointofSale:::meta"]=""
operation_parameters_collection_type["updateItemsPointofSale:::offset"]=""
operation_parameters_collection_type["updateItemsPointofSale:::sort"]="csv"
operation_parameters_collection_type["updateItemsPointofSale:::filter"]="multi"
operation_parameters_collection_type["updateItemsPointofSale:::search"]=""
operation_parameters_collection_type["updateItemsPointofSale:::CreateItemsPointofSaleRequest"]=""
operation_parameters_collection_type["updateItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["updateItemsPolicy:::limit"]=""
operation_parameters_collection_type["updateItemsPolicy:::meta"]=""
operation_parameters_collection_type["updateItemsPolicy:::offset"]=""
operation_parameters_collection_type["updateItemsPolicy:::sort"]="csv"
operation_parameters_collection_type["updateItemsPolicy:::filter"]="multi"
operation_parameters_collection_type["updateItemsPolicy:::search"]=""
operation_parameters_collection_type["updateItemsPolicy:::CreateItemsPolicyRequest"]=""
operation_parameters_collection_type["updateItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["updateItemsProcurement:::limit"]=""
operation_parameters_collection_type["updateItemsProcurement:::meta"]=""
operation_parameters_collection_type["updateItemsProcurement:::offset"]=""
operation_parameters_collection_type["updateItemsProcurement:::sort"]="csv"
operation_parameters_collection_type["updateItemsProcurement:::filter"]="multi"
operation_parameters_collection_type["updateItemsProcurement:::search"]=""
operation_parameters_collection_type["updateItemsProcurement:::CreateItemsProcurementRequest"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["updateItemsProductionBatch:::limit"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::offset"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::sort"]="csv"
operation_parameters_collection_type["updateItemsProductionBatch:::filter"]="multi"
operation_parameters_collection_type["updateItemsProductionBatch:::search"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::CreateItemsProductionBatchRequest"]=""
operation_parameters_collection_type["updateItemsProject:::fields"]="csv"
operation_parameters_collection_type["updateItemsProject:::limit"]=""
operation_parameters_collection_type["updateItemsProject:::meta"]=""
operation_parameters_collection_type["updateItemsProject:::offset"]=""
operation_parameters_collection_type["updateItemsProject:::sort"]="csv"
operation_parameters_collection_type["updateItemsProject:::filter"]="multi"
operation_parameters_collection_type["updateItemsProject:::search"]=""
operation_parameters_collection_type["updateItemsProject:::CreateItemsProjectRequest"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["updateItemsPurchaseOrders:::limit"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::offset"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::sort"]="csv"
operation_parameters_collection_type["updateItemsPurchaseOrders:::filter"]="multi"
operation_parameters_collection_type["updateItemsPurchaseOrders:::search"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["updateItemsQualityCheck:::limit"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::offset"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::sort"]="csv"
operation_parameters_collection_type["updateItemsQualityCheck:::filter"]="multi"
operation_parameters_collection_type["updateItemsQualityCheck:::search"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::CreateItemsQualityCheckRequest"]=""
operation_parameters_collection_type["updateItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["updateItemsQuotes:::limit"]=""
operation_parameters_collection_type["updateItemsQuotes:::meta"]=""
operation_parameters_collection_type["updateItemsQuotes:::offset"]=""
operation_parameters_collection_type["updateItemsQuotes:::sort"]="csv"
operation_parameters_collection_type["updateItemsQuotes:::filter"]="multi"
operation_parameters_collection_type["updateItemsQuotes:::search"]=""
operation_parameters_collection_type["updateItemsQuotes:::CreateItemsQuotesRequest"]=""
operation_parameters_collection_type["updateItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["updateItemsRecruit:::limit"]=""
operation_parameters_collection_type["updateItemsRecruit:::meta"]=""
operation_parameters_collection_type["updateItemsRecruit:::offset"]=""
operation_parameters_collection_type["updateItemsRecruit:::sort"]="csv"
operation_parameters_collection_type["updateItemsRecruit:::filter"]="multi"
operation_parameters_collection_type["updateItemsRecruit:::search"]=""
operation_parameters_collection_type["updateItemsRecruit:::CreateItemsRecruitRequest"]=""
operation_parameters_collection_type["updateItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["updateItemsRegulations:::limit"]=""
operation_parameters_collection_type["updateItemsRegulations:::meta"]=""
operation_parameters_collection_type["updateItemsRegulations:::offset"]=""
operation_parameters_collection_type["updateItemsRegulations:::sort"]="csv"
operation_parameters_collection_type["updateItemsRegulations:::filter"]="multi"
operation_parameters_collection_type["updateItemsRegulations:::search"]=""
operation_parameters_collection_type["updateItemsRegulations:::CreateItemsRegulationsRequest"]=""
operation_parameters_collection_type["updateItemsRentals:::fields"]="csv"
operation_parameters_collection_type["updateItemsRentals:::limit"]=""
operation_parameters_collection_type["updateItemsRentals:::meta"]=""
operation_parameters_collection_type["updateItemsRentals:::offset"]=""
operation_parameters_collection_type["updateItemsRentals:::sort"]="csv"
operation_parameters_collection_type["updateItemsRentals:::filter"]="multi"
operation_parameters_collection_type["updateItemsRentals:::search"]=""
operation_parameters_collection_type["updateItemsRentals:::CreateItemsRentalsRequest"]=""
operation_parameters_collection_type["updateItemsShipment:::fields"]="csv"
operation_parameters_collection_type["updateItemsShipment:::limit"]=""
operation_parameters_collection_type["updateItemsShipment:::meta"]=""
operation_parameters_collection_type["updateItemsShipment:::offset"]=""
operation_parameters_collection_type["updateItemsShipment:::sort"]="csv"
operation_parameters_collection_type["updateItemsShipment:::filter"]="multi"
operation_parameters_collection_type["updateItemsShipment:::search"]=""
operation_parameters_collection_type["updateItemsShipment:::CreateItemsShipmentRequest"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["updateItemsSocialMedia:::limit"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::offset"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::sort"]="csv"
operation_parameters_collection_type["updateItemsSocialMedia:::filter"]="multi"
operation_parameters_collection_type["updateItemsSocialMedia:::search"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::CreateItemsSocialMediaRequest"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["updateItemsSocialResponsibility:::limit"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::offset"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::sort"]="csv"
operation_parameters_collection_type["updateItemsSocialResponsibility:::filter"]="multi"
operation_parameters_collection_type["updateItemsSocialResponsibility:::search"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=""
operation_parameters_collection_type["updateItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["updateItemsSuppliers:::limit"]=""
operation_parameters_collection_type["updateItemsSuppliers:::meta"]=""
operation_parameters_collection_type["updateItemsSuppliers:::offset"]=""
operation_parameters_collection_type["updateItemsSuppliers:::sort"]="csv"
operation_parameters_collection_type["updateItemsSuppliers:::filter"]="multi"
operation_parameters_collection_type["updateItemsSuppliers:::search"]=""
operation_parameters_collection_type["updateItemsSuppliers:::CreateItemsSuppliersRequest"]=""
operation_parameters_collection_type["updateItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["updateItemsSurveys:::limit"]=""
operation_parameters_collection_type["updateItemsSurveys:::meta"]=""
operation_parameters_collection_type["updateItemsSurveys:::offset"]=""
operation_parameters_collection_type["updateItemsSurveys:::sort"]="csv"
operation_parameters_collection_type["updateItemsSurveys:::filter"]="multi"
operation_parameters_collection_type["updateItemsSurveys:::search"]=""
operation_parameters_collection_type["updateItemsSurveys:::CreateItemsSurveysRequest"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::limit"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::offset"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::sort"]="csv"
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::filter"]="multi"
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::search"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=""
operation_parameters_collection_type["updateItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["updateItemsTaxes:::limit"]=""
operation_parameters_collection_type["updateItemsTaxes:::meta"]=""
operation_parameters_collection_type["updateItemsTaxes:::offset"]=""
operation_parameters_collection_type["updateItemsTaxes:::sort"]="csv"
operation_parameters_collection_type["updateItemsTaxes:::filter"]="multi"
operation_parameters_collection_type["updateItemsTaxes:::search"]=""
operation_parameters_collection_type["updateItemsTaxes:::CreateItemsTaxesRequest"]=""
operation_parameters_collection_type["updateItemsTraining:::fields"]="csv"
operation_parameters_collection_type["updateItemsTraining:::limit"]=""
operation_parameters_collection_type["updateItemsTraining:::meta"]=""
operation_parameters_collection_type["updateItemsTraining:::offset"]=""
operation_parameters_collection_type["updateItemsTraining:::sort"]="csv"
operation_parameters_collection_type["updateItemsTraining:::filter"]="multi"
operation_parameters_collection_type["updateItemsTraining:::search"]=""
operation_parameters_collection_type["updateItemsTraining:::CreateItemsTrainingRequest"]=""
operation_parameters_collection_type["updateItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["updateItemsTransactions:::limit"]=""
operation_parameters_collection_type["updateItemsTransactions:::meta"]=""
operation_parameters_collection_type["updateItemsTransactions:::offset"]=""
operation_parameters_collection_type["updateItemsTransactions:::sort"]="csv"
operation_parameters_collection_type["updateItemsTransactions:::filter"]="multi"
operation_parameters_collection_type["updateItemsTransactions:::search"]=""
operation_parameters_collection_type["updateItemsTransactions:::CreateItemsTransactionsRequest"]=""
operation_parameters_collection_type["updateSingleItemsAccounts:::id"]=""
operation_parameters_collection_type["updateSingleItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsAccounts:::meta"]=""
operation_parameters_collection_type["updateSingleItemsAccounts:::ItemsAccounts"]=""
operation_parameters_collection_type["updateSingleItemsAppointments:::id"]=""
operation_parameters_collection_type["updateSingleItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsAppointments:::meta"]=""
operation_parameters_collection_type["updateSingleItemsAppointments:::ItemsAppointments"]=""
operation_parameters_collection_type["updateSingleItemsBudgets:::id"]=""
operation_parameters_collection_type["updateSingleItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsBudgets:::meta"]=""
operation_parameters_collection_type["updateSingleItemsBudgets:::ItemsBudgets"]=""
operation_parameters_collection_type["updateSingleItemsCampaigns:::id"]=""
operation_parameters_collection_type["updateSingleItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCampaigns:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCampaigns:::ItemsCampaigns"]=""
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::id"]=""
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::ItemsCarbonFootprint"]=""
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::id"]=""
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::ItemsCompanyAssets"]=""
operation_parameters_collection_type["updateSingleItemsContent:::id"]=""
operation_parameters_collection_type["updateSingleItemsContent:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsContent:::meta"]=""
operation_parameters_collection_type["updateSingleItemsContent:::ItemsContent"]=""
operation_parameters_collection_type["updateSingleItemsContracts:::id"]=""
operation_parameters_collection_type["updateSingleItemsContracts:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsContracts:::meta"]=""
operation_parameters_collection_type["updateSingleItemsContracts:::ItemsContracts"]=""
operation_parameters_collection_type["updateSingleItemsCrm:::id"]=""
operation_parameters_collection_type["updateSingleItemsCrm:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCrm:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCrm:::ItemsCrm"]=""
operation_parameters_collection_type["updateSingleItemsDepartment:::id"]=""
operation_parameters_collection_type["updateSingleItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsDepartment:::meta"]=""
operation_parameters_collection_type["updateSingleItemsDepartment:::ItemsDepartment"]=""
operation_parameters_collection_type["updateSingleItemsDistribution:::id"]=""
operation_parameters_collection_type["updateSingleItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsDistribution:::meta"]=""
operation_parameters_collection_type["updateSingleItemsDistribution:::ItemsDistribution"]=""
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::id"]=""
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::ItemsEmailCampaigns"]=""
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::id"]=""
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::ItemsEmployeeDirectory"]=""
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::id"]=""
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::ItemsEnergyEfficiency"]=""
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::id"]=""
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::ItemsEnvironmentalCompliance"]=""
operation_parameters_collection_type["updateSingleItemsEvents:::id"]=""
operation_parameters_collection_type["updateSingleItemsEvents:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEvents:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEvents:::ItemsEvents"]=""
operation_parameters_collection_type["updateSingleItemsExpenses:::id"]=""
operation_parameters_collection_type["updateSingleItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsExpenses:::meta"]=""
operation_parameters_collection_type["updateSingleItemsExpenses:::ItemsExpenses"]=""
operation_parameters_collection_type["updateSingleItemsFacilities:::id"]=""
operation_parameters_collection_type["updateSingleItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsFacilities:::meta"]=""
operation_parameters_collection_type["updateSingleItemsFacilities:::ItemsFacilities"]=""
operation_parameters_collection_type["updateSingleItemsFeedback:::id"]=""
operation_parameters_collection_type["updateSingleItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsFeedback:::meta"]=""
operation_parameters_collection_type["updateSingleItemsFeedback:::ItemsFeedback"]=""
operation_parameters_collection_type["updateSingleItemsForum:::id"]=""
operation_parameters_collection_type["updateSingleItemsForum:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsForum:::meta"]=""
operation_parameters_collection_type["updateSingleItemsForum:::ItemsForum"]=""
operation_parameters_collection_type["updateSingleItemsFulfillment:::id"]=""
operation_parameters_collection_type["updateSingleItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsFulfillment:::meta"]=""
operation_parameters_collection_type["updateSingleItemsFulfillment:::ItemsFulfillment"]=""
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::id"]=""
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::ItemsGovernanceandEthics"]=""
operation_parameters_collection_type["updateSingleItemsHelpdesk:::id"]=""
operation_parameters_collection_type["updateSingleItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["updateSingleItemsHelpdesk:::ItemsHelpdesk"]=""
operation_parameters_collection_type["updateSingleItemsInventory:::id"]=""
operation_parameters_collection_type["updateSingleItemsInventory:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsInventory:::meta"]=""
operation_parameters_collection_type["updateSingleItemsInventory:::ItemsInventory"]=""
operation_parameters_collection_type["updateSingleItemsInvoices:::id"]=""
operation_parameters_collection_type["updateSingleItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsInvoices:::meta"]=""
operation_parameters_collection_type["updateSingleItemsInvoices:::ItemsInvoices"]=""
operation_parameters_collection_type["updateSingleItemsInvoicing:::id"]=""
operation_parameters_collection_type["updateSingleItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsInvoicing:::meta"]=""
operation_parameters_collection_type["updateSingleItemsInvoicing:::ItemsInvoicing"]=""
operation_parameters_collection_type["updateSingleItemsLifecycle:::id"]=""
operation_parameters_collection_type["updateSingleItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsLifecycle:::meta"]=""
operation_parameters_collection_type["updateSingleItemsLifecycle:::ItemsLifecycle"]=""
operation_parameters_collection_type["updateSingleItemsLiveChat:::id"]=""
operation_parameters_collection_type["updateSingleItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsLiveChat:::meta"]=""
operation_parameters_collection_type["updateSingleItemsLiveChat:::ItemsLiveChat"]=""
operation_parameters_collection_type["updateSingleItemsLoyalty:::id"]=""
operation_parameters_collection_type["updateSingleItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsLoyalty:::meta"]=""
operation_parameters_collection_type["updateSingleItemsLoyalty:::ItemsLoyalty"]=""
operation_parameters_collection_type["updateSingleItemsMaintenance:::id"]=""
operation_parameters_collection_type["updateSingleItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsMaintenance:::meta"]=""
operation_parameters_collection_type["updateSingleItemsMaintenance:::ItemsMaintenance"]=""
operation_parameters_collection_type["updateSingleItemsPayroll:::id"]=""
operation_parameters_collection_type["updateSingleItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPayroll:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPayroll:::ItemsPayroll"]=""
operation_parameters_collection_type["updateSingleItemsPerformance:::id"]=""
operation_parameters_collection_type["updateSingleItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPerformance:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPerformance:::ItemsPerformance"]=""
operation_parameters_collection_type["updateSingleItemsPointofSale:::id"]=""
operation_parameters_collection_type["updateSingleItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPointofSale:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPointofSale:::ItemsPointofSale"]=""
operation_parameters_collection_type["updateSingleItemsPolicy:::id"]=""
operation_parameters_collection_type["updateSingleItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPolicy:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPolicy:::ItemsPolicy"]=""
operation_parameters_collection_type["updateSingleItemsProcurement:::id"]=""
operation_parameters_collection_type["updateSingleItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsProcurement:::meta"]=""
operation_parameters_collection_type["updateSingleItemsProcurement:::ItemsProcurement"]=""
operation_parameters_collection_type["updateSingleItemsProductionBatch:::id"]=""
operation_parameters_collection_type["updateSingleItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["updateSingleItemsProductionBatch:::ItemsProductionBatch"]=""
operation_parameters_collection_type["updateSingleItemsProject:::id"]=""
operation_parameters_collection_type["updateSingleItemsProject:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsProject:::meta"]=""
operation_parameters_collection_type["updateSingleItemsProject:::ItemsProject"]=""
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::id"]=""
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::ItemsPurchaseOrders"]=""
operation_parameters_collection_type["updateSingleItemsQualityCheck:::id"]=""
operation_parameters_collection_type["updateSingleItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["updateSingleItemsQualityCheck:::ItemsQualityCheck"]=""
operation_parameters_collection_type["updateSingleItemsQuotes:::id"]=""
operation_parameters_collection_type["updateSingleItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsQuotes:::meta"]=""
operation_parameters_collection_type["updateSingleItemsQuotes:::ItemsQuotes"]=""
operation_parameters_collection_type["updateSingleItemsRecruit:::id"]=""
operation_parameters_collection_type["updateSingleItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsRecruit:::meta"]=""
operation_parameters_collection_type["updateSingleItemsRecruit:::ItemsRecruit"]=""
operation_parameters_collection_type["updateSingleItemsRegulations:::id"]=""
operation_parameters_collection_type["updateSingleItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsRegulations:::meta"]=""
operation_parameters_collection_type["updateSingleItemsRegulations:::ItemsRegulations"]=""
operation_parameters_collection_type["updateSingleItemsRentals:::id"]=""
operation_parameters_collection_type["updateSingleItemsRentals:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsRentals:::meta"]=""
operation_parameters_collection_type["updateSingleItemsRentals:::ItemsRentals"]=""
operation_parameters_collection_type["updateSingleItemsShipment:::id"]=""
operation_parameters_collection_type["updateSingleItemsShipment:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsShipment:::meta"]=""
operation_parameters_collection_type["updateSingleItemsShipment:::ItemsShipment"]=""
operation_parameters_collection_type["updateSingleItemsSocialMedia:::id"]=""
operation_parameters_collection_type["updateSingleItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSocialMedia:::ItemsSocialMedia"]=""
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::id"]=""
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::ItemsSocialResponsibility"]=""
operation_parameters_collection_type["updateSingleItemsSuppliers:::id"]=""
operation_parameters_collection_type["updateSingleItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSuppliers:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSuppliers:::ItemsSuppliers"]=""
operation_parameters_collection_type["updateSingleItemsSurveys:::id"]=""
operation_parameters_collection_type["updateSingleItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSurveys:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSurveys:::ItemsSurveys"]=""
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::id"]=""
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::ItemsSustainableSupplyChain"]=""
operation_parameters_collection_type["updateSingleItemsTaxes:::id"]=""
operation_parameters_collection_type["updateSingleItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsTaxes:::meta"]=""
operation_parameters_collection_type["updateSingleItemsTaxes:::ItemsTaxes"]=""
operation_parameters_collection_type["updateSingleItemsTraining:::id"]=""
operation_parameters_collection_type["updateSingleItemsTraining:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsTraining:::meta"]=""
operation_parameters_collection_type["updateSingleItemsTraining:::ItemsTraining"]=""
operation_parameters_collection_type["updateSingleItemsTransactions:::id"]=""
operation_parameters_collection_type["updateSingleItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsTransactions:::meta"]=""
operation_parameters_collection_type["updateSingleItemsTransactions:::ItemsTransactions"]=""
operation_parameters_collection_type["createItemsAccounts:::meta"]=""
operation_parameters_collection_type["createItemsAccounts:::CreateItemsAccountsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsAccounts:::id"]=""
operation_parameters_collection_type["readItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["readItemsAccounts:::limit"]=""
operation_parameters_collection_type["readItemsAccounts:::meta"]=""
operation_parameters_collection_type["readItemsAccounts:::offset"]=""
operation_parameters_collection_type["readItemsAccounts:::sort"]="csv"
operation_parameters_collection_type["readItemsAccounts:::filter"]="multi"
operation_parameters_collection_type["readItemsAccounts:::search"]=""
operation_parameters_collection_type["readSingleItemsAccounts:::id"]=""
operation_parameters_collection_type["readSingleItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsAccounts:::meta"]=""
operation_parameters_collection_type["readSingleItemsAccounts:::version"]=""
operation_parameters_collection_type["updateItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["updateItemsAccounts:::limit"]=""
operation_parameters_collection_type["updateItemsAccounts:::meta"]=""
operation_parameters_collection_type["updateItemsAccounts:::offset"]=""
operation_parameters_collection_type["updateItemsAccounts:::sort"]="csv"
operation_parameters_collection_type["updateItemsAccounts:::filter"]="multi"
operation_parameters_collection_type["updateItemsAccounts:::search"]=""
operation_parameters_collection_type["updateItemsAccounts:::CreateItemsAccountsRequest"]=""
operation_parameters_collection_type["updateSingleItemsAccounts:::id"]=""
operation_parameters_collection_type["updateSingleItemsAccounts:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsAccounts:::meta"]=""
operation_parameters_collection_type["updateSingleItemsAccounts:::ItemsAccounts"]=""
operation_parameters_collection_type["createItemsAppointments:::meta"]=""
operation_parameters_collection_type["createItemsAppointments:::CreateItemsAppointmentsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsAppointments:::id"]=""
operation_parameters_collection_type["readItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["readItemsAppointments:::limit"]=""
operation_parameters_collection_type["readItemsAppointments:::meta"]=""
operation_parameters_collection_type["readItemsAppointments:::offset"]=""
operation_parameters_collection_type["readItemsAppointments:::sort"]="csv"
operation_parameters_collection_type["readItemsAppointments:::filter"]="multi"
operation_parameters_collection_type["readItemsAppointments:::search"]=""
operation_parameters_collection_type["readSingleItemsAppointments:::id"]=""
operation_parameters_collection_type["readSingleItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsAppointments:::meta"]=""
operation_parameters_collection_type["readSingleItemsAppointments:::version"]=""
operation_parameters_collection_type["updateItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["updateItemsAppointments:::limit"]=""
operation_parameters_collection_type["updateItemsAppointments:::meta"]=""
operation_parameters_collection_type["updateItemsAppointments:::offset"]=""
operation_parameters_collection_type["updateItemsAppointments:::sort"]="csv"
operation_parameters_collection_type["updateItemsAppointments:::filter"]="multi"
operation_parameters_collection_type["updateItemsAppointments:::search"]=""
operation_parameters_collection_type["updateItemsAppointments:::CreateItemsAppointmentsRequest"]=""
operation_parameters_collection_type["updateSingleItemsAppointments:::id"]=""
operation_parameters_collection_type["updateSingleItemsAppointments:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsAppointments:::meta"]=""
operation_parameters_collection_type["updateSingleItemsAppointments:::ItemsAppointments"]=""
operation_parameters_collection_type["createItemsBudgets:::meta"]=""
operation_parameters_collection_type["createItemsBudgets:::CreateItemsBudgetsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsBudgets:::id"]=""
operation_parameters_collection_type["readItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["readItemsBudgets:::limit"]=""
operation_parameters_collection_type["readItemsBudgets:::meta"]=""
operation_parameters_collection_type["readItemsBudgets:::offset"]=""
operation_parameters_collection_type["readItemsBudgets:::sort"]="csv"
operation_parameters_collection_type["readItemsBudgets:::filter"]="multi"
operation_parameters_collection_type["readItemsBudgets:::search"]=""
operation_parameters_collection_type["readSingleItemsBudgets:::id"]=""
operation_parameters_collection_type["readSingleItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsBudgets:::meta"]=""
operation_parameters_collection_type["readSingleItemsBudgets:::version"]=""
operation_parameters_collection_type["updateItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["updateItemsBudgets:::limit"]=""
operation_parameters_collection_type["updateItemsBudgets:::meta"]=""
operation_parameters_collection_type["updateItemsBudgets:::offset"]=""
operation_parameters_collection_type["updateItemsBudgets:::sort"]="csv"
operation_parameters_collection_type["updateItemsBudgets:::filter"]="multi"
operation_parameters_collection_type["updateItemsBudgets:::search"]=""
operation_parameters_collection_type["updateItemsBudgets:::CreateItemsBudgetsRequest"]=""
operation_parameters_collection_type["updateSingleItemsBudgets:::id"]=""
operation_parameters_collection_type["updateSingleItemsBudgets:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsBudgets:::meta"]=""
operation_parameters_collection_type["updateSingleItemsBudgets:::ItemsBudgets"]=""
operation_parameters_collection_type["createItemsCampaigns:::meta"]=""
operation_parameters_collection_type["createItemsCampaigns:::CreateItemsCampaignsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsCampaigns:::id"]=""
operation_parameters_collection_type["readItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["readItemsCampaigns:::limit"]=""
operation_parameters_collection_type["readItemsCampaigns:::meta"]=""
operation_parameters_collection_type["readItemsCampaigns:::offset"]=""
operation_parameters_collection_type["readItemsCampaigns:::sort"]="csv"
operation_parameters_collection_type["readItemsCampaigns:::filter"]="multi"
operation_parameters_collection_type["readItemsCampaigns:::search"]=""
operation_parameters_collection_type["readSingleItemsCampaigns:::id"]=""
operation_parameters_collection_type["readSingleItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCampaigns:::meta"]=""
operation_parameters_collection_type["readSingleItemsCampaigns:::version"]=""
operation_parameters_collection_type["updateItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateItemsCampaigns:::limit"]=""
operation_parameters_collection_type["updateItemsCampaigns:::meta"]=""
operation_parameters_collection_type["updateItemsCampaigns:::offset"]=""
operation_parameters_collection_type["updateItemsCampaigns:::sort"]="csv"
operation_parameters_collection_type["updateItemsCampaigns:::filter"]="multi"
operation_parameters_collection_type["updateItemsCampaigns:::search"]=""
operation_parameters_collection_type["updateItemsCampaigns:::CreateItemsCampaignsRequest"]=""
operation_parameters_collection_type["updateSingleItemsCampaigns:::id"]=""
operation_parameters_collection_type["updateSingleItemsCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCampaigns:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCampaigns:::ItemsCampaigns"]=""
operation_parameters_collection_type["createItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["createItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=""
operation_parameters_collection_type["deleteSingleItemsCarbonFootprint:::id"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["readItemsCarbonFootprint:::limit"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::offset"]=""
operation_parameters_collection_type["readItemsCarbonFootprint:::sort"]="csv"
operation_parameters_collection_type["readItemsCarbonFootprint:::filter"]="multi"
operation_parameters_collection_type["readItemsCarbonFootprint:::search"]=""
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::id"]=""
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["readSingleItemsCarbonFootprint:::version"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["updateItemsCarbonFootprint:::limit"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::offset"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::sort"]="csv"
operation_parameters_collection_type["updateItemsCarbonFootprint:::filter"]="multi"
operation_parameters_collection_type["updateItemsCarbonFootprint:::search"]=""
operation_parameters_collection_type["updateItemsCarbonFootprint:::CreateItemsCarbonFootprintRequest"]=""
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::id"]=""
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCarbonFootprint:::ItemsCarbonFootprint"]=""
operation_parameters_collection_type["createItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["createItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsCompanyAssets:::id"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["readItemsCompanyAssets:::limit"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::offset"]=""
operation_parameters_collection_type["readItemsCompanyAssets:::sort"]="csv"
operation_parameters_collection_type["readItemsCompanyAssets:::filter"]="multi"
operation_parameters_collection_type["readItemsCompanyAssets:::search"]=""
operation_parameters_collection_type["readSingleItemsCompanyAssets:::id"]=""
operation_parameters_collection_type["readSingleItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["readSingleItemsCompanyAssets:::version"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["updateItemsCompanyAssets:::limit"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::offset"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::sort"]="csv"
operation_parameters_collection_type["updateItemsCompanyAssets:::filter"]="multi"
operation_parameters_collection_type["updateItemsCompanyAssets:::search"]=""
operation_parameters_collection_type["updateItemsCompanyAssets:::CreateItemsCompanyAssetsRequest"]=""
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::id"]=""
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCompanyAssets:::ItemsCompanyAssets"]=""
operation_parameters_collection_type["createItemsContent:::meta"]=""
operation_parameters_collection_type["createItemsContent:::CreateItemsContentRequest"]=""
operation_parameters_collection_type["deleteSingleItemsContent:::id"]=""
operation_parameters_collection_type["readItemsContent:::fields"]="csv"
operation_parameters_collection_type["readItemsContent:::limit"]=""
operation_parameters_collection_type["readItemsContent:::meta"]=""
operation_parameters_collection_type["readItemsContent:::offset"]=""
operation_parameters_collection_type["readItemsContent:::sort"]="csv"
operation_parameters_collection_type["readItemsContent:::filter"]="multi"
operation_parameters_collection_type["readItemsContent:::search"]=""
operation_parameters_collection_type["readSingleItemsContent:::id"]=""
operation_parameters_collection_type["readSingleItemsContent:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsContent:::meta"]=""
operation_parameters_collection_type["readSingleItemsContent:::version"]=""
operation_parameters_collection_type["updateItemsContent:::fields"]="csv"
operation_parameters_collection_type["updateItemsContent:::limit"]=""
operation_parameters_collection_type["updateItemsContent:::meta"]=""
operation_parameters_collection_type["updateItemsContent:::offset"]=""
operation_parameters_collection_type["updateItemsContent:::sort"]="csv"
operation_parameters_collection_type["updateItemsContent:::filter"]="multi"
operation_parameters_collection_type["updateItemsContent:::search"]=""
operation_parameters_collection_type["updateItemsContent:::CreateItemsContentRequest"]=""
operation_parameters_collection_type["updateSingleItemsContent:::id"]=""
operation_parameters_collection_type["updateSingleItemsContent:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsContent:::meta"]=""
operation_parameters_collection_type["updateSingleItemsContent:::ItemsContent"]=""
operation_parameters_collection_type["createItemsContracts:::meta"]=""
operation_parameters_collection_type["createItemsContracts:::CreateItemsContractsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsContracts:::id"]=""
operation_parameters_collection_type["readItemsContracts:::fields"]="csv"
operation_parameters_collection_type["readItemsContracts:::limit"]=""
operation_parameters_collection_type["readItemsContracts:::meta"]=""
operation_parameters_collection_type["readItemsContracts:::offset"]=""
operation_parameters_collection_type["readItemsContracts:::sort"]="csv"
operation_parameters_collection_type["readItemsContracts:::filter"]="multi"
operation_parameters_collection_type["readItemsContracts:::search"]=""
operation_parameters_collection_type["readSingleItemsContracts:::id"]=""
operation_parameters_collection_type["readSingleItemsContracts:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsContracts:::meta"]=""
operation_parameters_collection_type["readSingleItemsContracts:::version"]=""
operation_parameters_collection_type["updateItemsContracts:::fields"]="csv"
operation_parameters_collection_type["updateItemsContracts:::limit"]=""
operation_parameters_collection_type["updateItemsContracts:::meta"]=""
operation_parameters_collection_type["updateItemsContracts:::offset"]=""
operation_parameters_collection_type["updateItemsContracts:::sort"]="csv"
operation_parameters_collection_type["updateItemsContracts:::filter"]="multi"
operation_parameters_collection_type["updateItemsContracts:::search"]=""
operation_parameters_collection_type["updateItemsContracts:::CreateItemsContractsRequest"]=""
operation_parameters_collection_type["updateSingleItemsContracts:::id"]=""
operation_parameters_collection_type["updateSingleItemsContracts:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsContracts:::meta"]=""
operation_parameters_collection_type["updateSingleItemsContracts:::ItemsContracts"]=""
operation_parameters_collection_type["createItemsCrm:::meta"]=""
operation_parameters_collection_type["createItemsCrm:::CreateItemsCrmRequest"]=""
operation_parameters_collection_type["deleteSingleItemsCrm:::id"]=""
operation_parameters_collection_type["readItemsCrm:::fields"]="csv"
operation_parameters_collection_type["readItemsCrm:::limit"]=""
operation_parameters_collection_type["readItemsCrm:::meta"]=""
operation_parameters_collection_type["readItemsCrm:::offset"]=""
operation_parameters_collection_type["readItemsCrm:::sort"]="csv"
operation_parameters_collection_type["readItemsCrm:::filter"]="multi"
operation_parameters_collection_type["readItemsCrm:::search"]=""
operation_parameters_collection_type["readSingleItemsCrm:::id"]=""
operation_parameters_collection_type["readSingleItemsCrm:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsCrm:::meta"]=""
operation_parameters_collection_type["readSingleItemsCrm:::version"]=""
operation_parameters_collection_type["updateItemsCrm:::fields"]="csv"
operation_parameters_collection_type["updateItemsCrm:::limit"]=""
operation_parameters_collection_type["updateItemsCrm:::meta"]=""
operation_parameters_collection_type["updateItemsCrm:::offset"]=""
operation_parameters_collection_type["updateItemsCrm:::sort"]="csv"
operation_parameters_collection_type["updateItemsCrm:::filter"]="multi"
operation_parameters_collection_type["updateItemsCrm:::search"]=""
operation_parameters_collection_type["updateItemsCrm:::CreateItemsCrmRequest"]=""
operation_parameters_collection_type["updateSingleItemsCrm:::id"]=""
operation_parameters_collection_type["updateSingleItemsCrm:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsCrm:::meta"]=""
operation_parameters_collection_type["updateSingleItemsCrm:::ItemsCrm"]=""
operation_parameters_collection_type["createItemsDepartment:::meta"]=""
operation_parameters_collection_type["createItemsDepartment:::CreateItemsDepartmentRequest"]=""
operation_parameters_collection_type["deleteSingleItemsDepartment:::id"]=""
operation_parameters_collection_type["readItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["readItemsDepartment:::limit"]=""
operation_parameters_collection_type["readItemsDepartment:::meta"]=""
operation_parameters_collection_type["readItemsDepartment:::offset"]=""
operation_parameters_collection_type["readItemsDepartment:::sort"]="csv"
operation_parameters_collection_type["readItemsDepartment:::filter"]="multi"
operation_parameters_collection_type["readItemsDepartment:::search"]=""
operation_parameters_collection_type["readSingleItemsDepartment:::id"]=""
operation_parameters_collection_type["readSingleItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsDepartment:::meta"]=""
operation_parameters_collection_type["readSingleItemsDepartment:::version"]=""
operation_parameters_collection_type["updateItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["updateItemsDepartment:::limit"]=""
operation_parameters_collection_type["updateItemsDepartment:::meta"]=""
operation_parameters_collection_type["updateItemsDepartment:::offset"]=""
operation_parameters_collection_type["updateItemsDepartment:::sort"]="csv"
operation_parameters_collection_type["updateItemsDepartment:::filter"]="multi"
operation_parameters_collection_type["updateItemsDepartment:::search"]=""
operation_parameters_collection_type["updateItemsDepartment:::CreateItemsDepartmentRequest"]=""
operation_parameters_collection_type["updateSingleItemsDepartment:::id"]=""
operation_parameters_collection_type["updateSingleItemsDepartment:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsDepartment:::meta"]=""
operation_parameters_collection_type["updateSingleItemsDepartment:::ItemsDepartment"]=""
operation_parameters_collection_type["createItemsDistribution:::meta"]=""
operation_parameters_collection_type["createItemsDistribution:::CreateItemsDistributionRequest"]=""
operation_parameters_collection_type["deleteSingleItemsDistribution:::id"]=""
operation_parameters_collection_type["readItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["readItemsDistribution:::limit"]=""
operation_parameters_collection_type["readItemsDistribution:::meta"]=""
operation_parameters_collection_type["readItemsDistribution:::offset"]=""
operation_parameters_collection_type["readItemsDistribution:::sort"]="csv"
operation_parameters_collection_type["readItemsDistribution:::filter"]="multi"
operation_parameters_collection_type["readItemsDistribution:::search"]=""
operation_parameters_collection_type["readSingleItemsDistribution:::id"]=""
operation_parameters_collection_type["readSingleItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsDistribution:::meta"]=""
operation_parameters_collection_type["readSingleItemsDistribution:::version"]=""
operation_parameters_collection_type["updateItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["updateItemsDistribution:::limit"]=""
operation_parameters_collection_type["updateItemsDistribution:::meta"]=""
operation_parameters_collection_type["updateItemsDistribution:::offset"]=""
operation_parameters_collection_type["updateItemsDistribution:::sort"]="csv"
operation_parameters_collection_type["updateItemsDistribution:::filter"]="multi"
operation_parameters_collection_type["updateItemsDistribution:::search"]=""
operation_parameters_collection_type["updateItemsDistribution:::CreateItemsDistributionRequest"]=""
operation_parameters_collection_type["updateSingleItemsDistribution:::id"]=""
operation_parameters_collection_type["updateSingleItemsDistribution:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsDistribution:::meta"]=""
operation_parameters_collection_type["updateSingleItemsDistribution:::ItemsDistribution"]=""
operation_parameters_collection_type["createItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["createItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsEmailCampaigns:::id"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["readItemsEmailCampaigns:::limit"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::offset"]=""
operation_parameters_collection_type["readItemsEmailCampaigns:::sort"]="csv"
operation_parameters_collection_type["readItemsEmailCampaigns:::filter"]="multi"
operation_parameters_collection_type["readItemsEmailCampaigns:::search"]=""
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::id"]=""
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["readSingleItemsEmailCampaigns:::version"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateItemsEmailCampaigns:::limit"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::offset"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::sort"]="csv"
operation_parameters_collection_type["updateItemsEmailCampaigns:::filter"]="multi"
operation_parameters_collection_type["updateItemsEmailCampaigns:::search"]=""
operation_parameters_collection_type["updateItemsEmailCampaigns:::CreateItemsEmailCampaignsRequest"]=""
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::id"]=""
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEmailCampaigns:::ItemsEmailCampaigns"]=""
operation_parameters_collection_type["createItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["createItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=""
operation_parameters_collection_type["deleteSingleItemsEmployeeDirectory:::id"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["readItemsEmployeeDirectory:::limit"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::offset"]=""
operation_parameters_collection_type["readItemsEmployeeDirectory:::sort"]="csv"
operation_parameters_collection_type["readItemsEmployeeDirectory:::filter"]="multi"
operation_parameters_collection_type["readItemsEmployeeDirectory:::search"]=""
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::id"]=""
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["readSingleItemsEmployeeDirectory:::version"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["updateItemsEmployeeDirectory:::limit"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::offset"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::sort"]="csv"
operation_parameters_collection_type["updateItemsEmployeeDirectory:::filter"]="multi"
operation_parameters_collection_type["updateItemsEmployeeDirectory:::search"]=""
operation_parameters_collection_type["updateItemsEmployeeDirectory:::CreateItemsEmployeeDirectoryRequest"]=""
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::id"]=""
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEmployeeDirectory:::ItemsEmployeeDirectory"]=""
operation_parameters_collection_type["createItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["createItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=""
operation_parameters_collection_type["deleteSingleItemsEnergyEfficiency:::id"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["readItemsEnergyEfficiency:::limit"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::offset"]=""
operation_parameters_collection_type["readItemsEnergyEfficiency:::sort"]="csv"
operation_parameters_collection_type["readItemsEnergyEfficiency:::filter"]="multi"
operation_parameters_collection_type["readItemsEnergyEfficiency:::search"]=""
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::id"]=""
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["readSingleItemsEnergyEfficiency:::version"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["updateItemsEnergyEfficiency:::limit"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::offset"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::sort"]="csv"
operation_parameters_collection_type["updateItemsEnergyEfficiency:::filter"]="multi"
operation_parameters_collection_type["updateItemsEnergyEfficiency:::search"]=""
operation_parameters_collection_type["updateItemsEnergyEfficiency:::CreateItemsEnergyEfficiencyRequest"]=""
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::id"]=""
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEnergyEfficiency:::ItemsEnergyEfficiency"]=""
operation_parameters_collection_type["createItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["createItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=""
operation_parameters_collection_type["deleteSingleItemsEnvironmentalCompliance:::id"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::limit"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::offset"]=""
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::sort"]="csv"
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::filter"]="multi"
operation_parameters_collection_type["readItemsEnvironmentalCompliance:::search"]=""
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::id"]=""
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["readSingleItemsEnvironmentalCompliance:::version"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::limit"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::offset"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::sort"]="csv"
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::filter"]="multi"
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::search"]=""
operation_parameters_collection_type["updateItemsEnvironmentalCompliance:::CreateItemsEnvironmentalComplianceRequest"]=""
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::id"]=""
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEnvironmentalCompliance:::ItemsEnvironmentalCompliance"]=""
operation_parameters_collection_type["createItemsEvents:::meta"]=""
operation_parameters_collection_type["createItemsEvents:::CreateItemsEventsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsEvents:::id"]=""
operation_parameters_collection_type["readItemsEvents:::fields"]="csv"
operation_parameters_collection_type["readItemsEvents:::limit"]=""
operation_parameters_collection_type["readItemsEvents:::meta"]=""
operation_parameters_collection_type["readItemsEvents:::offset"]=""
operation_parameters_collection_type["readItemsEvents:::sort"]="csv"
operation_parameters_collection_type["readItemsEvents:::filter"]="multi"
operation_parameters_collection_type["readItemsEvents:::search"]=""
operation_parameters_collection_type["readSingleItemsEvents:::id"]=""
operation_parameters_collection_type["readSingleItemsEvents:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsEvents:::meta"]=""
operation_parameters_collection_type["readSingleItemsEvents:::version"]=""
operation_parameters_collection_type["updateItemsEvents:::fields"]="csv"
operation_parameters_collection_type["updateItemsEvents:::limit"]=""
operation_parameters_collection_type["updateItemsEvents:::meta"]=""
operation_parameters_collection_type["updateItemsEvents:::offset"]=""
operation_parameters_collection_type["updateItemsEvents:::sort"]="csv"
operation_parameters_collection_type["updateItemsEvents:::filter"]="multi"
operation_parameters_collection_type["updateItemsEvents:::search"]=""
operation_parameters_collection_type["updateItemsEvents:::CreateItemsEventsRequest"]=""
operation_parameters_collection_type["updateSingleItemsEvents:::id"]=""
operation_parameters_collection_type["updateSingleItemsEvents:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsEvents:::meta"]=""
operation_parameters_collection_type["updateSingleItemsEvents:::ItemsEvents"]=""
operation_parameters_collection_type["createItemsExpenses:::meta"]=""
operation_parameters_collection_type["createItemsExpenses:::CreateItemsExpensesRequest"]=""
operation_parameters_collection_type["deleteSingleItemsExpenses:::id"]=""
operation_parameters_collection_type["readItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["readItemsExpenses:::limit"]=""
operation_parameters_collection_type["readItemsExpenses:::meta"]=""
operation_parameters_collection_type["readItemsExpenses:::offset"]=""
operation_parameters_collection_type["readItemsExpenses:::sort"]="csv"
operation_parameters_collection_type["readItemsExpenses:::filter"]="multi"
operation_parameters_collection_type["readItemsExpenses:::search"]=""
operation_parameters_collection_type["readSingleItemsExpenses:::id"]=""
operation_parameters_collection_type["readSingleItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsExpenses:::meta"]=""
operation_parameters_collection_type["readSingleItemsExpenses:::version"]=""
operation_parameters_collection_type["updateItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["updateItemsExpenses:::limit"]=""
operation_parameters_collection_type["updateItemsExpenses:::meta"]=""
operation_parameters_collection_type["updateItemsExpenses:::offset"]=""
operation_parameters_collection_type["updateItemsExpenses:::sort"]="csv"
operation_parameters_collection_type["updateItemsExpenses:::filter"]="multi"
operation_parameters_collection_type["updateItemsExpenses:::search"]=""
operation_parameters_collection_type["updateItemsExpenses:::CreateItemsExpensesRequest"]=""
operation_parameters_collection_type["updateSingleItemsExpenses:::id"]=""
operation_parameters_collection_type["updateSingleItemsExpenses:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsExpenses:::meta"]=""
operation_parameters_collection_type["updateSingleItemsExpenses:::ItemsExpenses"]=""
operation_parameters_collection_type["createItemsFacilities:::meta"]=""
operation_parameters_collection_type["createItemsFacilities:::CreateItemsFacilitiesRequest"]=""
operation_parameters_collection_type["deleteSingleItemsFacilities:::id"]=""
operation_parameters_collection_type["readItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["readItemsFacilities:::limit"]=""
operation_parameters_collection_type["readItemsFacilities:::meta"]=""
operation_parameters_collection_type["readItemsFacilities:::offset"]=""
operation_parameters_collection_type["readItemsFacilities:::sort"]="csv"
operation_parameters_collection_type["readItemsFacilities:::filter"]="multi"
operation_parameters_collection_type["readItemsFacilities:::search"]=""
operation_parameters_collection_type["readSingleItemsFacilities:::id"]=""
operation_parameters_collection_type["readSingleItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsFacilities:::meta"]=""
operation_parameters_collection_type["readSingleItemsFacilities:::version"]=""
operation_parameters_collection_type["updateItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["updateItemsFacilities:::limit"]=""
operation_parameters_collection_type["updateItemsFacilities:::meta"]=""
operation_parameters_collection_type["updateItemsFacilities:::offset"]=""
operation_parameters_collection_type["updateItemsFacilities:::sort"]="csv"
operation_parameters_collection_type["updateItemsFacilities:::filter"]="multi"
operation_parameters_collection_type["updateItemsFacilities:::search"]=""
operation_parameters_collection_type["updateItemsFacilities:::CreateItemsFacilitiesRequest"]=""
operation_parameters_collection_type["updateSingleItemsFacilities:::id"]=""
operation_parameters_collection_type["updateSingleItemsFacilities:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsFacilities:::meta"]=""
operation_parameters_collection_type["updateSingleItemsFacilities:::ItemsFacilities"]=""
operation_parameters_collection_type["createItemsFeedback:::meta"]=""
operation_parameters_collection_type["createItemsFeedback:::CreateItemsFeedbackRequest"]=""
operation_parameters_collection_type["deleteSingleItemsFeedback:::id"]=""
operation_parameters_collection_type["readItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["readItemsFeedback:::limit"]=""
operation_parameters_collection_type["readItemsFeedback:::meta"]=""
operation_parameters_collection_type["readItemsFeedback:::offset"]=""
operation_parameters_collection_type["readItemsFeedback:::sort"]="csv"
operation_parameters_collection_type["readItemsFeedback:::filter"]="multi"
operation_parameters_collection_type["readItemsFeedback:::search"]=""
operation_parameters_collection_type["readSingleItemsFeedback:::id"]=""
operation_parameters_collection_type["readSingleItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsFeedback:::meta"]=""
operation_parameters_collection_type["readSingleItemsFeedback:::version"]=""
operation_parameters_collection_type["updateItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["updateItemsFeedback:::limit"]=""
operation_parameters_collection_type["updateItemsFeedback:::meta"]=""
operation_parameters_collection_type["updateItemsFeedback:::offset"]=""
operation_parameters_collection_type["updateItemsFeedback:::sort"]="csv"
operation_parameters_collection_type["updateItemsFeedback:::filter"]="multi"
operation_parameters_collection_type["updateItemsFeedback:::search"]=""
operation_parameters_collection_type["updateItemsFeedback:::CreateItemsFeedbackRequest"]=""
operation_parameters_collection_type["updateSingleItemsFeedback:::id"]=""
operation_parameters_collection_type["updateSingleItemsFeedback:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsFeedback:::meta"]=""
operation_parameters_collection_type["updateSingleItemsFeedback:::ItemsFeedback"]=""
operation_parameters_collection_type["createItemsForum:::meta"]=""
operation_parameters_collection_type["createItemsForum:::CreateItemsForumRequest"]=""
operation_parameters_collection_type["deleteSingleItemsForum:::id"]=""
operation_parameters_collection_type["readItemsForum:::fields"]="csv"
operation_parameters_collection_type["readItemsForum:::limit"]=""
operation_parameters_collection_type["readItemsForum:::meta"]=""
operation_parameters_collection_type["readItemsForum:::offset"]=""
operation_parameters_collection_type["readItemsForum:::sort"]="csv"
operation_parameters_collection_type["readItemsForum:::filter"]="multi"
operation_parameters_collection_type["readItemsForum:::search"]=""
operation_parameters_collection_type["readSingleItemsForum:::id"]=""
operation_parameters_collection_type["readSingleItemsForum:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsForum:::meta"]=""
operation_parameters_collection_type["readSingleItemsForum:::version"]=""
operation_parameters_collection_type["updateItemsForum:::fields"]="csv"
operation_parameters_collection_type["updateItemsForum:::limit"]=""
operation_parameters_collection_type["updateItemsForum:::meta"]=""
operation_parameters_collection_type["updateItemsForum:::offset"]=""
operation_parameters_collection_type["updateItemsForum:::sort"]="csv"
operation_parameters_collection_type["updateItemsForum:::filter"]="multi"
operation_parameters_collection_type["updateItemsForum:::search"]=""
operation_parameters_collection_type["updateItemsForum:::CreateItemsForumRequest"]=""
operation_parameters_collection_type["updateSingleItemsForum:::id"]=""
operation_parameters_collection_type["updateSingleItemsForum:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsForum:::meta"]=""
operation_parameters_collection_type["updateSingleItemsForum:::ItemsForum"]=""
operation_parameters_collection_type["createItemsFulfillment:::meta"]=""
operation_parameters_collection_type["createItemsFulfillment:::CreateItemsFulfillmentRequest"]=""
operation_parameters_collection_type["deleteSingleItemsFulfillment:::id"]=""
operation_parameters_collection_type["readItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["readItemsFulfillment:::limit"]=""
operation_parameters_collection_type["readItemsFulfillment:::meta"]=""
operation_parameters_collection_type["readItemsFulfillment:::offset"]=""
operation_parameters_collection_type["readItemsFulfillment:::sort"]="csv"
operation_parameters_collection_type["readItemsFulfillment:::filter"]="multi"
operation_parameters_collection_type["readItemsFulfillment:::search"]=""
operation_parameters_collection_type["readSingleItemsFulfillment:::id"]=""
operation_parameters_collection_type["readSingleItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsFulfillment:::meta"]=""
operation_parameters_collection_type["readSingleItemsFulfillment:::version"]=""
operation_parameters_collection_type["updateItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["updateItemsFulfillment:::limit"]=""
operation_parameters_collection_type["updateItemsFulfillment:::meta"]=""
operation_parameters_collection_type["updateItemsFulfillment:::offset"]=""
operation_parameters_collection_type["updateItemsFulfillment:::sort"]="csv"
operation_parameters_collection_type["updateItemsFulfillment:::filter"]="multi"
operation_parameters_collection_type["updateItemsFulfillment:::search"]=""
operation_parameters_collection_type["updateItemsFulfillment:::CreateItemsFulfillmentRequest"]=""
operation_parameters_collection_type["updateSingleItemsFulfillment:::id"]=""
operation_parameters_collection_type["updateSingleItemsFulfillment:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsFulfillment:::meta"]=""
operation_parameters_collection_type["updateSingleItemsFulfillment:::ItemsFulfillment"]=""
operation_parameters_collection_type["createItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["createItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsGovernanceandEthics:::id"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["readItemsGovernanceandEthics:::limit"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::offset"]=""
operation_parameters_collection_type["readItemsGovernanceandEthics:::sort"]="csv"
operation_parameters_collection_type["readItemsGovernanceandEthics:::filter"]="multi"
operation_parameters_collection_type["readItemsGovernanceandEthics:::search"]=""
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::id"]=""
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["readSingleItemsGovernanceandEthics:::version"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["updateItemsGovernanceandEthics:::limit"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::offset"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::sort"]="csv"
operation_parameters_collection_type["updateItemsGovernanceandEthics:::filter"]="multi"
operation_parameters_collection_type["updateItemsGovernanceandEthics:::search"]=""
operation_parameters_collection_type["updateItemsGovernanceandEthics:::CreateItemsGovernanceandEthicsRequest"]=""
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::id"]=""
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::meta"]=""
operation_parameters_collection_type["updateSingleItemsGovernanceandEthics:::ItemsGovernanceandEthics"]=""
operation_parameters_collection_type["createItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["createItemsHelpdesk:::CreateItemsHelpdeskRequest"]=""
operation_parameters_collection_type["deleteSingleItemsHelpdesk:::id"]=""
operation_parameters_collection_type["readItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["readItemsHelpdesk:::limit"]=""
operation_parameters_collection_type["readItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["readItemsHelpdesk:::offset"]=""
operation_parameters_collection_type["readItemsHelpdesk:::sort"]="csv"
operation_parameters_collection_type["readItemsHelpdesk:::filter"]="multi"
operation_parameters_collection_type["readItemsHelpdesk:::search"]=""
operation_parameters_collection_type["readSingleItemsHelpdesk:::id"]=""
operation_parameters_collection_type["readSingleItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["readSingleItemsHelpdesk:::version"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["updateItemsHelpdesk:::limit"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::offset"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::sort"]="csv"
operation_parameters_collection_type["updateItemsHelpdesk:::filter"]="multi"
operation_parameters_collection_type["updateItemsHelpdesk:::search"]=""
operation_parameters_collection_type["updateItemsHelpdesk:::CreateItemsHelpdeskRequest"]=""
operation_parameters_collection_type["updateSingleItemsHelpdesk:::id"]=""
operation_parameters_collection_type["updateSingleItemsHelpdesk:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsHelpdesk:::meta"]=""
operation_parameters_collection_type["updateSingleItemsHelpdesk:::ItemsHelpdesk"]=""
operation_parameters_collection_type["createItemsInventory:::meta"]=""
operation_parameters_collection_type["createItemsInventory:::CreateItemsInventoryRequest"]=""
operation_parameters_collection_type["deleteSingleItemsInventory:::id"]=""
operation_parameters_collection_type["readItemsInventory:::fields"]="csv"
operation_parameters_collection_type["readItemsInventory:::limit"]=""
operation_parameters_collection_type["readItemsInventory:::meta"]=""
operation_parameters_collection_type["readItemsInventory:::offset"]=""
operation_parameters_collection_type["readItemsInventory:::sort"]="csv"
operation_parameters_collection_type["readItemsInventory:::filter"]="multi"
operation_parameters_collection_type["readItemsInventory:::search"]=""
operation_parameters_collection_type["readSingleItemsInventory:::id"]=""
operation_parameters_collection_type["readSingleItemsInventory:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsInventory:::meta"]=""
operation_parameters_collection_type["readSingleItemsInventory:::version"]=""
operation_parameters_collection_type["updateItemsInventory:::fields"]="csv"
operation_parameters_collection_type["updateItemsInventory:::limit"]=""
operation_parameters_collection_type["updateItemsInventory:::meta"]=""
operation_parameters_collection_type["updateItemsInventory:::offset"]=""
operation_parameters_collection_type["updateItemsInventory:::sort"]="csv"
operation_parameters_collection_type["updateItemsInventory:::filter"]="multi"
operation_parameters_collection_type["updateItemsInventory:::search"]=""
operation_parameters_collection_type["updateItemsInventory:::CreateItemsInventoryRequest"]=""
operation_parameters_collection_type["updateSingleItemsInventory:::id"]=""
operation_parameters_collection_type["updateSingleItemsInventory:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsInventory:::meta"]=""
operation_parameters_collection_type["updateSingleItemsInventory:::ItemsInventory"]=""
operation_parameters_collection_type["createItemsInvoices:::meta"]=""
operation_parameters_collection_type["createItemsInvoices:::CreateItemsInvoicesRequest"]=""
operation_parameters_collection_type["deleteSingleItemsInvoices:::id"]=""
operation_parameters_collection_type["readItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["readItemsInvoices:::limit"]=""
operation_parameters_collection_type["readItemsInvoices:::meta"]=""
operation_parameters_collection_type["readItemsInvoices:::offset"]=""
operation_parameters_collection_type["readItemsInvoices:::sort"]="csv"
operation_parameters_collection_type["readItemsInvoices:::filter"]="multi"
operation_parameters_collection_type["readItemsInvoices:::search"]=""
operation_parameters_collection_type["readSingleItemsInvoices:::id"]=""
operation_parameters_collection_type["readSingleItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsInvoices:::meta"]=""
operation_parameters_collection_type["readSingleItemsInvoices:::version"]=""
operation_parameters_collection_type["updateItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["updateItemsInvoices:::limit"]=""
operation_parameters_collection_type["updateItemsInvoices:::meta"]=""
operation_parameters_collection_type["updateItemsInvoices:::offset"]=""
operation_parameters_collection_type["updateItemsInvoices:::sort"]="csv"
operation_parameters_collection_type["updateItemsInvoices:::filter"]="multi"
operation_parameters_collection_type["updateItemsInvoices:::search"]=""
operation_parameters_collection_type["updateItemsInvoices:::CreateItemsInvoicesRequest"]=""
operation_parameters_collection_type["updateSingleItemsInvoices:::id"]=""
operation_parameters_collection_type["updateSingleItemsInvoices:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsInvoices:::meta"]=""
operation_parameters_collection_type["updateSingleItemsInvoices:::ItemsInvoices"]=""
operation_parameters_collection_type["createItemsInvoicing:::meta"]=""
operation_parameters_collection_type["createItemsInvoicing:::CreateItemsInvoicingRequest"]=""
operation_parameters_collection_type["deleteSingleItemsInvoicing:::id"]=""
operation_parameters_collection_type["readItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["readItemsInvoicing:::limit"]=""
operation_parameters_collection_type["readItemsInvoicing:::meta"]=""
operation_parameters_collection_type["readItemsInvoicing:::offset"]=""
operation_parameters_collection_type["readItemsInvoicing:::sort"]="csv"
operation_parameters_collection_type["readItemsInvoicing:::filter"]="multi"
operation_parameters_collection_type["readItemsInvoicing:::search"]=""
operation_parameters_collection_type["readSingleItemsInvoicing:::id"]=""
operation_parameters_collection_type["readSingleItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsInvoicing:::meta"]=""
operation_parameters_collection_type["readSingleItemsInvoicing:::version"]=""
operation_parameters_collection_type["updateItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["updateItemsInvoicing:::limit"]=""
operation_parameters_collection_type["updateItemsInvoicing:::meta"]=""
operation_parameters_collection_type["updateItemsInvoicing:::offset"]=""
operation_parameters_collection_type["updateItemsInvoicing:::sort"]="csv"
operation_parameters_collection_type["updateItemsInvoicing:::filter"]="multi"
operation_parameters_collection_type["updateItemsInvoicing:::search"]=""
operation_parameters_collection_type["updateItemsInvoicing:::CreateItemsInvoicingRequest"]=""
operation_parameters_collection_type["updateSingleItemsInvoicing:::id"]=""
operation_parameters_collection_type["updateSingleItemsInvoicing:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsInvoicing:::meta"]=""
operation_parameters_collection_type["updateSingleItemsInvoicing:::ItemsInvoicing"]=""
operation_parameters_collection_type["createItemsLifecycle:::meta"]=""
operation_parameters_collection_type["createItemsLifecycle:::CreateItemsLifecycleRequest"]=""
operation_parameters_collection_type["deleteSingleItemsLifecycle:::id"]=""
operation_parameters_collection_type["readItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["readItemsLifecycle:::limit"]=""
operation_parameters_collection_type["readItemsLifecycle:::meta"]=""
operation_parameters_collection_type["readItemsLifecycle:::offset"]=""
operation_parameters_collection_type["readItemsLifecycle:::sort"]="csv"
operation_parameters_collection_type["readItemsLifecycle:::filter"]="multi"
operation_parameters_collection_type["readItemsLifecycle:::search"]=""
operation_parameters_collection_type["readSingleItemsLifecycle:::id"]=""
operation_parameters_collection_type["readSingleItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsLifecycle:::meta"]=""
operation_parameters_collection_type["readSingleItemsLifecycle:::version"]=""
operation_parameters_collection_type["updateItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["updateItemsLifecycle:::limit"]=""
operation_parameters_collection_type["updateItemsLifecycle:::meta"]=""
operation_parameters_collection_type["updateItemsLifecycle:::offset"]=""
operation_parameters_collection_type["updateItemsLifecycle:::sort"]="csv"
operation_parameters_collection_type["updateItemsLifecycle:::filter"]="multi"
operation_parameters_collection_type["updateItemsLifecycle:::search"]=""
operation_parameters_collection_type["updateItemsLifecycle:::CreateItemsLifecycleRequest"]=""
operation_parameters_collection_type["updateSingleItemsLifecycle:::id"]=""
operation_parameters_collection_type["updateSingleItemsLifecycle:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsLifecycle:::meta"]=""
operation_parameters_collection_type["updateSingleItemsLifecycle:::ItemsLifecycle"]=""
operation_parameters_collection_type["createItemsLiveChat:::meta"]=""
operation_parameters_collection_type["createItemsLiveChat:::CreateItemsLiveChatRequest"]=""
operation_parameters_collection_type["deleteSingleItemsLiveChat:::id"]=""
operation_parameters_collection_type["readItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["readItemsLiveChat:::limit"]=""
operation_parameters_collection_type["readItemsLiveChat:::meta"]=""
operation_parameters_collection_type["readItemsLiveChat:::offset"]=""
operation_parameters_collection_type["readItemsLiveChat:::sort"]="csv"
operation_parameters_collection_type["readItemsLiveChat:::filter"]="multi"
operation_parameters_collection_type["readItemsLiveChat:::search"]=""
operation_parameters_collection_type["readSingleItemsLiveChat:::id"]=""
operation_parameters_collection_type["readSingleItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsLiveChat:::meta"]=""
operation_parameters_collection_type["readSingleItemsLiveChat:::version"]=""
operation_parameters_collection_type["updateItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["updateItemsLiveChat:::limit"]=""
operation_parameters_collection_type["updateItemsLiveChat:::meta"]=""
operation_parameters_collection_type["updateItemsLiveChat:::offset"]=""
operation_parameters_collection_type["updateItemsLiveChat:::sort"]="csv"
operation_parameters_collection_type["updateItemsLiveChat:::filter"]="multi"
operation_parameters_collection_type["updateItemsLiveChat:::search"]=""
operation_parameters_collection_type["updateItemsLiveChat:::CreateItemsLiveChatRequest"]=""
operation_parameters_collection_type["updateSingleItemsLiveChat:::id"]=""
operation_parameters_collection_type["updateSingleItemsLiveChat:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsLiveChat:::meta"]=""
operation_parameters_collection_type["updateSingleItemsLiveChat:::ItemsLiveChat"]=""
operation_parameters_collection_type["createItemsLoyalty:::meta"]=""
operation_parameters_collection_type["createItemsLoyalty:::CreateItemsLoyaltyRequest"]=""
operation_parameters_collection_type["deleteSingleItemsLoyalty:::id"]=""
operation_parameters_collection_type["readItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["readItemsLoyalty:::limit"]=""
operation_parameters_collection_type["readItemsLoyalty:::meta"]=""
operation_parameters_collection_type["readItemsLoyalty:::offset"]=""
operation_parameters_collection_type["readItemsLoyalty:::sort"]="csv"
operation_parameters_collection_type["readItemsLoyalty:::filter"]="multi"
operation_parameters_collection_type["readItemsLoyalty:::search"]=""
operation_parameters_collection_type["readSingleItemsLoyalty:::id"]=""
operation_parameters_collection_type["readSingleItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsLoyalty:::meta"]=""
operation_parameters_collection_type["readSingleItemsLoyalty:::version"]=""
operation_parameters_collection_type["updateItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["updateItemsLoyalty:::limit"]=""
operation_parameters_collection_type["updateItemsLoyalty:::meta"]=""
operation_parameters_collection_type["updateItemsLoyalty:::offset"]=""
operation_parameters_collection_type["updateItemsLoyalty:::sort"]="csv"
operation_parameters_collection_type["updateItemsLoyalty:::filter"]="multi"
operation_parameters_collection_type["updateItemsLoyalty:::search"]=""
operation_parameters_collection_type["updateItemsLoyalty:::CreateItemsLoyaltyRequest"]=""
operation_parameters_collection_type["updateSingleItemsLoyalty:::id"]=""
operation_parameters_collection_type["updateSingleItemsLoyalty:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsLoyalty:::meta"]=""
operation_parameters_collection_type["updateSingleItemsLoyalty:::ItemsLoyalty"]=""
operation_parameters_collection_type["createItemsMaintenance:::meta"]=""
operation_parameters_collection_type["createItemsMaintenance:::CreateItemsMaintenanceRequest"]=""
operation_parameters_collection_type["deleteSingleItemsMaintenance:::id"]=""
operation_parameters_collection_type["readItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["readItemsMaintenance:::limit"]=""
operation_parameters_collection_type["readItemsMaintenance:::meta"]=""
operation_parameters_collection_type["readItemsMaintenance:::offset"]=""
operation_parameters_collection_type["readItemsMaintenance:::sort"]="csv"
operation_parameters_collection_type["readItemsMaintenance:::filter"]="multi"
operation_parameters_collection_type["readItemsMaintenance:::search"]=""
operation_parameters_collection_type["readSingleItemsMaintenance:::id"]=""
operation_parameters_collection_type["readSingleItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsMaintenance:::meta"]=""
operation_parameters_collection_type["readSingleItemsMaintenance:::version"]=""
operation_parameters_collection_type["updateItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["updateItemsMaintenance:::limit"]=""
operation_parameters_collection_type["updateItemsMaintenance:::meta"]=""
operation_parameters_collection_type["updateItemsMaintenance:::offset"]=""
operation_parameters_collection_type["updateItemsMaintenance:::sort"]="csv"
operation_parameters_collection_type["updateItemsMaintenance:::filter"]="multi"
operation_parameters_collection_type["updateItemsMaintenance:::search"]=""
operation_parameters_collection_type["updateItemsMaintenance:::CreateItemsMaintenanceRequest"]=""
operation_parameters_collection_type["updateSingleItemsMaintenance:::id"]=""
operation_parameters_collection_type["updateSingleItemsMaintenance:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsMaintenance:::meta"]=""
operation_parameters_collection_type["updateSingleItemsMaintenance:::ItemsMaintenance"]=""
operation_parameters_collection_type["createItemsPayroll:::meta"]=""
operation_parameters_collection_type["createItemsPayroll:::CreateItemsPayrollRequest"]=""
operation_parameters_collection_type["deleteSingleItemsPayroll:::id"]=""
operation_parameters_collection_type["readItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["readItemsPayroll:::limit"]=""
operation_parameters_collection_type["readItemsPayroll:::meta"]=""
operation_parameters_collection_type["readItemsPayroll:::offset"]=""
operation_parameters_collection_type["readItemsPayroll:::sort"]="csv"
operation_parameters_collection_type["readItemsPayroll:::filter"]="multi"
operation_parameters_collection_type["readItemsPayroll:::search"]=""
operation_parameters_collection_type["readSingleItemsPayroll:::id"]=""
operation_parameters_collection_type["readSingleItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPayroll:::meta"]=""
operation_parameters_collection_type["readSingleItemsPayroll:::version"]=""
operation_parameters_collection_type["updateItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["updateItemsPayroll:::limit"]=""
operation_parameters_collection_type["updateItemsPayroll:::meta"]=""
operation_parameters_collection_type["updateItemsPayroll:::offset"]=""
operation_parameters_collection_type["updateItemsPayroll:::sort"]="csv"
operation_parameters_collection_type["updateItemsPayroll:::filter"]="multi"
operation_parameters_collection_type["updateItemsPayroll:::search"]=""
operation_parameters_collection_type["updateItemsPayroll:::CreateItemsPayrollRequest"]=""
operation_parameters_collection_type["updateSingleItemsPayroll:::id"]=""
operation_parameters_collection_type["updateSingleItemsPayroll:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPayroll:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPayroll:::ItemsPayroll"]=""
operation_parameters_collection_type["createItemsPerformance:::meta"]=""
operation_parameters_collection_type["createItemsPerformance:::CreateItemsPerformanceRequest"]=""
operation_parameters_collection_type["deleteSingleItemsPerformance:::id"]=""
operation_parameters_collection_type["readItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["readItemsPerformance:::limit"]=""
operation_parameters_collection_type["readItemsPerformance:::meta"]=""
operation_parameters_collection_type["readItemsPerformance:::offset"]=""
operation_parameters_collection_type["readItemsPerformance:::sort"]="csv"
operation_parameters_collection_type["readItemsPerformance:::filter"]="multi"
operation_parameters_collection_type["readItemsPerformance:::search"]=""
operation_parameters_collection_type["readSingleItemsPerformance:::id"]=""
operation_parameters_collection_type["readSingleItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPerformance:::meta"]=""
operation_parameters_collection_type["readSingleItemsPerformance:::version"]=""
operation_parameters_collection_type["updateItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["updateItemsPerformance:::limit"]=""
operation_parameters_collection_type["updateItemsPerformance:::meta"]=""
operation_parameters_collection_type["updateItemsPerformance:::offset"]=""
operation_parameters_collection_type["updateItemsPerformance:::sort"]="csv"
operation_parameters_collection_type["updateItemsPerformance:::filter"]="multi"
operation_parameters_collection_type["updateItemsPerformance:::search"]=""
operation_parameters_collection_type["updateItemsPerformance:::CreateItemsPerformanceRequest"]=""
operation_parameters_collection_type["updateSingleItemsPerformance:::id"]=""
operation_parameters_collection_type["updateSingleItemsPerformance:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPerformance:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPerformance:::ItemsPerformance"]=""
operation_parameters_collection_type["createItemsPointofSale:::meta"]=""
operation_parameters_collection_type["createItemsPointofSale:::CreateItemsPointofSaleRequest"]=""
operation_parameters_collection_type["deleteSingleItemsPointofSale:::id"]=""
operation_parameters_collection_type["readItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["readItemsPointofSale:::limit"]=""
operation_parameters_collection_type["readItemsPointofSale:::meta"]=""
operation_parameters_collection_type["readItemsPointofSale:::offset"]=""
operation_parameters_collection_type["readItemsPointofSale:::sort"]="csv"
operation_parameters_collection_type["readItemsPointofSale:::filter"]="multi"
operation_parameters_collection_type["readItemsPointofSale:::search"]=""
operation_parameters_collection_type["readSingleItemsPointofSale:::id"]=""
operation_parameters_collection_type["readSingleItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPointofSale:::meta"]=""
operation_parameters_collection_type["readSingleItemsPointofSale:::version"]=""
operation_parameters_collection_type["updateItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["updateItemsPointofSale:::limit"]=""
operation_parameters_collection_type["updateItemsPointofSale:::meta"]=""
operation_parameters_collection_type["updateItemsPointofSale:::offset"]=""
operation_parameters_collection_type["updateItemsPointofSale:::sort"]="csv"
operation_parameters_collection_type["updateItemsPointofSale:::filter"]="multi"
operation_parameters_collection_type["updateItemsPointofSale:::search"]=""
operation_parameters_collection_type["updateItemsPointofSale:::CreateItemsPointofSaleRequest"]=""
operation_parameters_collection_type["updateSingleItemsPointofSale:::id"]=""
operation_parameters_collection_type["updateSingleItemsPointofSale:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPointofSale:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPointofSale:::ItemsPointofSale"]=""
operation_parameters_collection_type["createItemsPolicy:::meta"]=""
operation_parameters_collection_type["createItemsPolicy:::CreateItemsPolicyRequest"]=""
operation_parameters_collection_type["deleteSingleItemsPolicy:::id"]=""
operation_parameters_collection_type["readItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["readItemsPolicy:::limit"]=""
operation_parameters_collection_type["readItemsPolicy:::meta"]=""
operation_parameters_collection_type["readItemsPolicy:::offset"]=""
operation_parameters_collection_type["readItemsPolicy:::sort"]="csv"
operation_parameters_collection_type["readItemsPolicy:::filter"]="multi"
operation_parameters_collection_type["readItemsPolicy:::search"]=""
operation_parameters_collection_type["readSingleItemsPolicy:::id"]=""
operation_parameters_collection_type["readSingleItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPolicy:::meta"]=""
operation_parameters_collection_type["readSingleItemsPolicy:::version"]=""
operation_parameters_collection_type["updateItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["updateItemsPolicy:::limit"]=""
operation_parameters_collection_type["updateItemsPolicy:::meta"]=""
operation_parameters_collection_type["updateItemsPolicy:::offset"]=""
operation_parameters_collection_type["updateItemsPolicy:::sort"]="csv"
operation_parameters_collection_type["updateItemsPolicy:::filter"]="multi"
operation_parameters_collection_type["updateItemsPolicy:::search"]=""
operation_parameters_collection_type["updateItemsPolicy:::CreateItemsPolicyRequest"]=""
operation_parameters_collection_type["updateSingleItemsPolicy:::id"]=""
operation_parameters_collection_type["updateSingleItemsPolicy:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPolicy:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPolicy:::ItemsPolicy"]=""
operation_parameters_collection_type["createItemsProcurement:::meta"]=""
operation_parameters_collection_type["createItemsProcurement:::CreateItemsProcurementRequest"]=""
operation_parameters_collection_type["deleteSingleItemsProcurement:::id"]=""
operation_parameters_collection_type["readItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["readItemsProcurement:::limit"]=""
operation_parameters_collection_type["readItemsProcurement:::meta"]=""
operation_parameters_collection_type["readItemsProcurement:::offset"]=""
operation_parameters_collection_type["readItemsProcurement:::sort"]="csv"
operation_parameters_collection_type["readItemsProcurement:::filter"]="multi"
operation_parameters_collection_type["readItemsProcurement:::search"]=""
operation_parameters_collection_type["readSingleItemsProcurement:::id"]=""
operation_parameters_collection_type["readSingleItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsProcurement:::meta"]=""
operation_parameters_collection_type["readSingleItemsProcurement:::version"]=""
operation_parameters_collection_type["updateItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["updateItemsProcurement:::limit"]=""
operation_parameters_collection_type["updateItemsProcurement:::meta"]=""
operation_parameters_collection_type["updateItemsProcurement:::offset"]=""
operation_parameters_collection_type["updateItemsProcurement:::sort"]="csv"
operation_parameters_collection_type["updateItemsProcurement:::filter"]="multi"
operation_parameters_collection_type["updateItemsProcurement:::search"]=""
operation_parameters_collection_type["updateItemsProcurement:::CreateItemsProcurementRequest"]=""
operation_parameters_collection_type["updateSingleItemsProcurement:::id"]=""
operation_parameters_collection_type["updateSingleItemsProcurement:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsProcurement:::meta"]=""
operation_parameters_collection_type["updateSingleItemsProcurement:::ItemsProcurement"]=""
operation_parameters_collection_type["createItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["createItemsProductionBatch:::CreateItemsProductionBatchRequest"]=""
operation_parameters_collection_type["deleteSingleItemsProductionBatch:::id"]=""
operation_parameters_collection_type["readItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["readItemsProductionBatch:::limit"]=""
operation_parameters_collection_type["readItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["readItemsProductionBatch:::offset"]=""
operation_parameters_collection_type["readItemsProductionBatch:::sort"]="csv"
operation_parameters_collection_type["readItemsProductionBatch:::filter"]="multi"
operation_parameters_collection_type["readItemsProductionBatch:::search"]=""
operation_parameters_collection_type["readSingleItemsProductionBatch:::id"]=""
operation_parameters_collection_type["readSingleItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["readSingleItemsProductionBatch:::version"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["updateItemsProductionBatch:::limit"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::offset"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::sort"]="csv"
operation_parameters_collection_type["updateItemsProductionBatch:::filter"]="multi"
operation_parameters_collection_type["updateItemsProductionBatch:::search"]=""
operation_parameters_collection_type["updateItemsProductionBatch:::CreateItemsProductionBatchRequest"]=""
operation_parameters_collection_type["updateSingleItemsProductionBatch:::id"]=""
operation_parameters_collection_type["updateSingleItemsProductionBatch:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsProductionBatch:::meta"]=""
operation_parameters_collection_type["updateSingleItemsProductionBatch:::ItemsProductionBatch"]=""
operation_parameters_collection_type["createItemsProject:::meta"]=""
operation_parameters_collection_type["createItemsProject:::CreateItemsProjectRequest"]=""
operation_parameters_collection_type["deleteSingleItemsProject:::id"]=""
operation_parameters_collection_type["readItemsProject:::fields"]="csv"
operation_parameters_collection_type["readItemsProject:::limit"]=""
operation_parameters_collection_type["readItemsProject:::meta"]=""
operation_parameters_collection_type["readItemsProject:::offset"]=""
operation_parameters_collection_type["readItemsProject:::sort"]="csv"
operation_parameters_collection_type["readItemsProject:::filter"]="multi"
operation_parameters_collection_type["readItemsProject:::search"]=""
operation_parameters_collection_type["readSingleItemsProject:::id"]=""
operation_parameters_collection_type["readSingleItemsProject:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsProject:::meta"]=""
operation_parameters_collection_type["readSingleItemsProject:::version"]=""
operation_parameters_collection_type["updateItemsProject:::fields"]="csv"
operation_parameters_collection_type["updateItemsProject:::limit"]=""
operation_parameters_collection_type["updateItemsProject:::meta"]=""
operation_parameters_collection_type["updateItemsProject:::offset"]=""
operation_parameters_collection_type["updateItemsProject:::sort"]="csv"
operation_parameters_collection_type["updateItemsProject:::filter"]="multi"
operation_parameters_collection_type["updateItemsProject:::search"]=""
operation_parameters_collection_type["updateItemsProject:::CreateItemsProjectRequest"]=""
operation_parameters_collection_type["updateSingleItemsProject:::id"]=""
operation_parameters_collection_type["updateSingleItemsProject:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsProject:::meta"]=""
operation_parameters_collection_type["updateSingleItemsProject:::ItemsProject"]=""
operation_parameters_collection_type["createItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["createItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=""
operation_parameters_collection_type["deleteSingleItemsPurchaseOrders:::id"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["readItemsPurchaseOrders:::limit"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::offset"]=""
operation_parameters_collection_type["readItemsPurchaseOrders:::sort"]="csv"
operation_parameters_collection_type["readItemsPurchaseOrders:::filter"]="multi"
operation_parameters_collection_type["readItemsPurchaseOrders:::search"]=""
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::id"]=""
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["readSingleItemsPurchaseOrders:::version"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["updateItemsPurchaseOrders:::limit"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::offset"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::sort"]="csv"
operation_parameters_collection_type["updateItemsPurchaseOrders:::filter"]="multi"
operation_parameters_collection_type["updateItemsPurchaseOrders:::search"]=""
operation_parameters_collection_type["updateItemsPurchaseOrders:::CreateItemsPurchaseOrdersRequest"]=""
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::id"]=""
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::meta"]=""
operation_parameters_collection_type["updateSingleItemsPurchaseOrders:::ItemsPurchaseOrders"]=""
operation_parameters_collection_type["createItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["createItemsQualityCheck:::CreateItemsQualityCheckRequest"]=""
operation_parameters_collection_type["deleteSingleItemsQualityCheck:::id"]=""
operation_parameters_collection_type["readItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["readItemsQualityCheck:::limit"]=""
operation_parameters_collection_type["readItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["readItemsQualityCheck:::offset"]=""
operation_parameters_collection_type["readItemsQualityCheck:::sort"]="csv"
operation_parameters_collection_type["readItemsQualityCheck:::filter"]="multi"
operation_parameters_collection_type["readItemsQualityCheck:::search"]=""
operation_parameters_collection_type["readSingleItemsQualityCheck:::id"]=""
operation_parameters_collection_type["readSingleItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["readSingleItemsQualityCheck:::version"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["updateItemsQualityCheck:::limit"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::offset"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::sort"]="csv"
operation_parameters_collection_type["updateItemsQualityCheck:::filter"]="multi"
operation_parameters_collection_type["updateItemsQualityCheck:::search"]=""
operation_parameters_collection_type["updateItemsQualityCheck:::CreateItemsQualityCheckRequest"]=""
operation_parameters_collection_type["updateSingleItemsQualityCheck:::id"]=""
operation_parameters_collection_type["updateSingleItemsQualityCheck:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsQualityCheck:::meta"]=""
operation_parameters_collection_type["updateSingleItemsQualityCheck:::ItemsQualityCheck"]=""
operation_parameters_collection_type["createItemsQuotes:::meta"]=""
operation_parameters_collection_type["createItemsQuotes:::CreateItemsQuotesRequest"]=""
operation_parameters_collection_type["deleteSingleItemsQuotes:::id"]=""
operation_parameters_collection_type["readItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["readItemsQuotes:::limit"]=""
operation_parameters_collection_type["readItemsQuotes:::meta"]=""
operation_parameters_collection_type["readItemsQuotes:::offset"]=""
operation_parameters_collection_type["readItemsQuotes:::sort"]="csv"
operation_parameters_collection_type["readItemsQuotes:::filter"]="multi"
operation_parameters_collection_type["readItemsQuotes:::search"]=""
operation_parameters_collection_type["readSingleItemsQuotes:::id"]=""
operation_parameters_collection_type["readSingleItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsQuotes:::meta"]=""
operation_parameters_collection_type["readSingleItemsQuotes:::version"]=""
operation_parameters_collection_type["updateItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["updateItemsQuotes:::limit"]=""
operation_parameters_collection_type["updateItemsQuotes:::meta"]=""
operation_parameters_collection_type["updateItemsQuotes:::offset"]=""
operation_parameters_collection_type["updateItemsQuotes:::sort"]="csv"
operation_parameters_collection_type["updateItemsQuotes:::filter"]="multi"
operation_parameters_collection_type["updateItemsQuotes:::search"]=""
operation_parameters_collection_type["updateItemsQuotes:::CreateItemsQuotesRequest"]=""
operation_parameters_collection_type["updateSingleItemsQuotes:::id"]=""
operation_parameters_collection_type["updateSingleItemsQuotes:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsQuotes:::meta"]=""
operation_parameters_collection_type["updateSingleItemsQuotes:::ItemsQuotes"]=""
operation_parameters_collection_type["createItemsRecruit:::meta"]=""
operation_parameters_collection_type["createItemsRecruit:::CreateItemsRecruitRequest"]=""
operation_parameters_collection_type["deleteSingleItemsRecruit:::id"]=""
operation_parameters_collection_type["readItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["readItemsRecruit:::limit"]=""
operation_parameters_collection_type["readItemsRecruit:::meta"]=""
operation_parameters_collection_type["readItemsRecruit:::offset"]=""
operation_parameters_collection_type["readItemsRecruit:::sort"]="csv"
operation_parameters_collection_type["readItemsRecruit:::filter"]="multi"
operation_parameters_collection_type["readItemsRecruit:::search"]=""
operation_parameters_collection_type["readSingleItemsRecruit:::id"]=""
operation_parameters_collection_type["readSingleItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsRecruit:::meta"]=""
operation_parameters_collection_type["readSingleItemsRecruit:::version"]=""
operation_parameters_collection_type["updateItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["updateItemsRecruit:::limit"]=""
operation_parameters_collection_type["updateItemsRecruit:::meta"]=""
operation_parameters_collection_type["updateItemsRecruit:::offset"]=""
operation_parameters_collection_type["updateItemsRecruit:::sort"]="csv"
operation_parameters_collection_type["updateItemsRecruit:::filter"]="multi"
operation_parameters_collection_type["updateItemsRecruit:::search"]=""
operation_parameters_collection_type["updateItemsRecruit:::CreateItemsRecruitRequest"]=""
operation_parameters_collection_type["updateSingleItemsRecruit:::id"]=""
operation_parameters_collection_type["updateSingleItemsRecruit:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsRecruit:::meta"]=""
operation_parameters_collection_type["updateSingleItemsRecruit:::ItemsRecruit"]=""
operation_parameters_collection_type["createItemsRegulations:::meta"]=""
operation_parameters_collection_type["createItemsRegulations:::CreateItemsRegulationsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsRegulations:::id"]=""
operation_parameters_collection_type["readItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["readItemsRegulations:::limit"]=""
operation_parameters_collection_type["readItemsRegulations:::meta"]=""
operation_parameters_collection_type["readItemsRegulations:::offset"]=""
operation_parameters_collection_type["readItemsRegulations:::sort"]="csv"
operation_parameters_collection_type["readItemsRegulations:::filter"]="multi"
operation_parameters_collection_type["readItemsRegulations:::search"]=""
operation_parameters_collection_type["readSingleItemsRegulations:::id"]=""
operation_parameters_collection_type["readSingleItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsRegulations:::meta"]=""
operation_parameters_collection_type["readSingleItemsRegulations:::version"]=""
operation_parameters_collection_type["updateItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["updateItemsRegulations:::limit"]=""
operation_parameters_collection_type["updateItemsRegulations:::meta"]=""
operation_parameters_collection_type["updateItemsRegulations:::offset"]=""
operation_parameters_collection_type["updateItemsRegulations:::sort"]="csv"
operation_parameters_collection_type["updateItemsRegulations:::filter"]="multi"
operation_parameters_collection_type["updateItemsRegulations:::search"]=""
operation_parameters_collection_type["updateItemsRegulations:::CreateItemsRegulationsRequest"]=""
operation_parameters_collection_type["updateSingleItemsRegulations:::id"]=""
operation_parameters_collection_type["updateSingleItemsRegulations:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsRegulations:::meta"]=""
operation_parameters_collection_type["updateSingleItemsRegulations:::ItemsRegulations"]=""
operation_parameters_collection_type["createItemsRentals:::meta"]=""
operation_parameters_collection_type["createItemsRentals:::CreateItemsRentalsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsRentals:::id"]=""
operation_parameters_collection_type["readItemsRentals:::fields"]="csv"
operation_parameters_collection_type["readItemsRentals:::limit"]=""
operation_parameters_collection_type["readItemsRentals:::meta"]=""
operation_parameters_collection_type["readItemsRentals:::offset"]=""
operation_parameters_collection_type["readItemsRentals:::sort"]="csv"
operation_parameters_collection_type["readItemsRentals:::filter"]="multi"
operation_parameters_collection_type["readItemsRentals:::search"]=""
operation_parameters_collection_type["readSingleItemsRentals:::id"]=""
operation_parameters_collection_type["readSingleItemsRentals:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsRentals:::meta"]=""
operation_parameters_collection_type["readSingleItemsRentals:::version"]=""
operation_parameters_collection_type["updateItemsRentals:::fields"]="csv"
operation_parameters_collection_type["updateItemsRentals:::limit"]=""
operation_parameters_collection_type["updateItemsRentals:::meta"]=""
operation_parameters_collection_type["updateItemsRentals:::offset"]=""
operation_parameters_collection_type["updateItemsRentals:::sort"]="csv"
operation_parameters_collection_type["updateItemsRentals:::filter"]="multi"
operation_parameters_collection_type["updateItemsRentals:::search"]=""
operation_parameters_collection_type["updateItemsRentals:::CreateItemsRentalsRequest"]=""
operation_parameters_collection_type["updateSingleItemsRentals:::id"]=""
operation_parameters_collection_type["updateSingleItemsRentals:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsRentals:::meta"]=""
operation_parameters_collection_type["updateSingleItemsRentals:::ItemsRentals"]=""
operation_parameters_collection_type["createItemsShipment:::meta"]=""
operation_parameters_collection_type["createItemsShipment:::CreateItemsShipmentRequest"]=""
operation_parameters_collection_type["deleteSingleItemsShipment:::id"]=""
operation_parameters_collection_type["readItemsShipment:::fields"]="csv"
operation_parameters_collection_type["readItemsShipment:::limit"]=""
operation_parameters_collection_type["readItemsShipment:::meta"]=""
operation_parameters_collection_type["readItemsShipment:::offset"]=""
operation_parameters_collection_type["readItemsShipment:::sort"]="csv"
operation_parameters_collection_type["readItemsShipment:::filter"]="multi"
operation_parameters_collection_type["readItemsShipment:::search"]=""
operation_parameters_collection_type["readSingleItemsShipment:::id"]=""
operation_parameters_collection_type["readSingleItemsShipment:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsShipment:::meta"]=""
operation_parameters_collection_type["readSingleItemsShipment:::version"]=""
operation_parameters_collection_type["updateItemsShipment:::fields"]="csv"
operation_parameters_collection_type["updateItemsShipment:::limit"]=""
operation_parameters_collection_type["updateItemsShipment:::meta"]=""
operation_parameters_collection_type["updateItemsShipment:::offset"]=""
operation_parameters_collection_type["updateItemsShipment:::sort"]="csv"
operation_parameters_collection_type["updateItemsShipment:::filter"]="multi"
operation_parameters_collection_type["updateItemsShipment:::search"]=""
operation_parameters_collection_type["updateItemsShipment:::CreateItemsShipmentRequest"]=""
operation_parameters_collection_type["updateSingleItemsShipment:::id"]=""
operation_parameters_collection_type["updateSingleItemsShipment:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsShipment:::meta"]=""
operation_parameters_collection_type["updateSingleItemsShipment:::ItemsShipment"]=""
operation_parameters_collection_type["createItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["createItemsSocialMedia:::CreateItemsSocialMediaRequest"]=""
operation_parameters_collection_type["deleteSingleItemsSocialMedia:::id"]=""
operation_parameters_collection_type["readItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["readItemsSocialMedia:::limit"]=""
operation_parameters_collection_type["readItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["readItemsSocialMedia:::offset"]=""
operation_parameters_collection_type["readItemsSocialMedia:::sort"]="csv"
operation_parameters_collection_type["readItemsSocialMedia:::filter"]="multi"
operation_parameters_collection_type["readItemsSocialMedia:::search"]=""
operation_parameters_collection_type["readSingleItemsSocialMedia:::id"]=""
operation_parameters_collection_type["readSingleItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["readSingleItemsSocialMedia:::version"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["updateItemsSocialMedia:::limit"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::offset"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::sort"]="csv"
operation_parameters_collection_type["updateItemsSocialMedia:::filter"]="multi"
operation_parameters_collection_type["updateItemsSocialMedia:::search"]=""
operation_parameters_collection_type["updateItemsSocialMedia:::CreateItemsSocialMediaRequest"]=""
operation_parameters_collection_type["updateSingleItemsSocialMedia:::id"]=""
operation_parameters_collection_type["updateSingleItemsSocialMedia:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSocialMedia:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSocialMedia:::ItemsSocialMedia"]=""
operation_parameters_collection_type["createItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["createItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=""
operation_parameters_collection_type["deleteSingleItemsSocialResponsibility:::id"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["readItemsSocialResponsibility:::limit"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::offset"]=""
operation_parameters_collection_type["readItemsSocialResponsibility:::sort"]="csv"
operation_parameters_collection_type["readItemsSocialResponsibility:::filter"]="multi"
operation_parameters_collection_type["readItemsSocialResponsibility:::search"]=""
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::id"]=""
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["readSingleItemsSocialResponsibility:::version"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["updateItemsSocialResponsibility:::limit"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::offset"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::sort"]="csv"
operation_parameters_collection_type["updateItemsSocialResponsibility:::filter"]="multi"
operation_parameters_collection_type["updateItemsSocialResponsibility:::search"]=""
operation_parameters_collection_type["updateItemsSocialResponsibility:::CreateItemsSocialResponsibilityRequest"]=""
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::id"]=""
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSocialResponsibility:::ItemsSocialResponsibility"]=""
operation_parameters_collection_type["createItemsSuppliers:::meta"]=""
operation_parameters_collection_type["createItemsSuppliers:::CreateItemsSuppliersRequest"]=""
operation_parameters_collection_type["deleteSingleItemsSuppliers:::id"]=""
operation_parameters_collection_type["readItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["readItemsSuppliers:::limit"]=""
operation_parameters_collection_type["readItemsSuppliers:::meta"]=""
operation_parameters_collection_type["readItemsSuppliers:::offset"]=""
operation_parameters_collection_type["readItemsSuppliers:::sort"]="csv"
operation_parameters_collection_type["readItemsSuppliers:::filter"]="multi"
operation_parameters_collection_type["readItemsSuppliers:::search"]=""
operation_parameters_collection_type["readSingleItemsSuppliers:::id"]=""
operation_parameters_collection_type["readSingleItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSuppliers:::meta"]=""
operation_parameters_collection_type["readSingleItemsSuppliers:::version"]=""
operation_parameters_collection_type["updateItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["updateItemsSuppliers:::limit"]=""
operation_parameters_collection_type["updateItemsSuppliers:::meta"]=""
operation_parameters_collection_type["updateItemsSuppliers:::offset"]=""
operation_parameters_collection_type["updateItemsSuppliers:::sort"]="csv"
operation_parameters_collection_type["updateItemsSuppliers:::filter"]="multi"
operation_parameters_collection_type["updateItemsSuppliers:::search"]=""
operation_parameters_collection_type["updateItemsSuppliers:::CreateItemsSuppliersRequest"]=""
operation_parameters_collection_type["updateSingleItemsSuppliers:::id"]=""
operation_parameters_collection_type["updateSingleItemsSuppliers:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSuppliers:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSuppliers:::ItemsSuppliers"]=""
operation_parameters_collection_type["createItemsSurveys:::meta"]=""
operation_parameters_collection_type["createItemsSurveys:::CreateItemsSurveysRequest"]=""
operation_parameters_collection_type["deleteSingleItemsSurveys:::id"]=""
operation_parameters_collection_type["readItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["readItemsSurveys:::limit"]=""
operation_parameters_collection_type["readItemsSurveys:::meta"]=""
operation_parameters_collection_type["readItemsSurveys:::offset"]=""
operation_parameters_collection_type["readItemsSurveys:::sort"]="csv"
operation_parameters_collection_type["readItemsSurveys:::filter"]="multi"
operation_parameters_collection_type["readItemsSurveys:::search"]=""
operation_parameters_collection_type["readSingleItemsSurveys:::id"]=""
operation_parameters_collection_type["readSingleItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSurveys:::meta"]=""
operation_parameters_collection_type["readSingleItemsSurveys:::version"]=""
operation_parameters_collection_type["updateItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["updateItemsSurveys:::limit"]=""
operation_parameters_collection_type["updateItemsSurveys:::meta"]=""
operation_parameters_collection_type["updateItemsSurveys:::offset"]=""
operation_parameters_collection_type["updateItemsSurveys:::sort"]="csv"
operation_parameters_collection_type["updateItemsSurveys:::filter"]="multi"
operation_parameters_collection_type["updateItemsSurveys:::search"]=""
operation_parameters_collection_type["updateItemsSurveys:::CreateItemsSurveysRequest"]=""
operation_parameters_collection_type["updateSingleItemsSurveys:::id"]=""
operation_parameters_collection_type["updateSingleItemsSurveys:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSurveys:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSurveys:::ItemsSurveys"]=""
operation_parameters_collection_type["createItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["createItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=""
operation_parameters_collection_type["deleteSingleItemsSustainableSupplyChain:::id"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["readItemsSustainableSupplyChain:::limit"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::offset"]=""
operation_parameters_collection_type["readItemsSustainableSupplyChain:::sort"]="csv"
operation_parameters_collection_type["readItemsSustainableSupplyChain:::filter"]="multi"
operation_parameters_collection_type["readItemsSustainableSupplyChain:::search"]=""
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::id"]=""
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["readSingleItemsSustainableSupplyChain:::version"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::limit"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::offset"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::sort"]="csv"
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::filter"]="multi"
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::search"]=""
operation_parameters_collection_type["updateItemsSustainableSupplyChain:::CreateItemsSustainableSupplyChainRequest"]=""
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::id"]=""
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::meta"]=""
operation_parameters_collection_type["updateSingleItemsSustainableSupplyChain:::ItemsSustainableSupplyChain"]=""
operation_parameters_collection_type["createItemsTaxes:::meta"]=""
operation_parameters_collection_type["createItemsTaxes:::CreateItemsTaxesRequest"]=""
operation_parameters_collection_type["deleteSingleItemsTaxes:::id"]=""
operation_parameters_collection_type["readItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["readItemsTaxes:::limit"]=""
operation_parameters_collection_type["readItemsTaxes:::meta"]=""
operation_parameters_collection_type["readItemsTaxes:::offset"]=""
operation_parameters_collection_type["readItemsTaxes:::sort"]="csv"
operation_parameters_collection_type["readItemsTaxes:::filter"]="multi"
operation_parameters_collection_type["readItemsTaxes:::search"]=""
operation_parameters_collection_type["readSingleItemsTaxes:::id"]=""
operation_parameters_collection_type["readSingleItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsTaxes:::meta"]=""
operation_parameters_collection_type["readSingleItemsTaxes:::version"]=""
operation_parameters_collection_type["updateItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["updateItemsTaxes:::limit"]=""
operation_parameters_collection_type["updateItemsTaxes:::meta"]=""
operation_parameters_collection_type["updateItemsTaxes:::offset"]=""
operation_parameters_collection_type["updateItemsTaxes:::sort"]="csv"
operation_parameters_collection_type["updateItemsTaxes:::filter"]="multi"
operation_parameters_collection_type["updateItemsTaxes:::search"]=""
operation_parameters_collection_type["updateItemsTaxes:::CreateItemsTaxesRequest"]=""
operation_parameters_collection_type["updateSingleItemsTaxes:::id"]=""
operation_parameters_collection_type["updateSingleItemsTaxes:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsTaxes:::meta"]=""
operation_parameters_collection_type["updateSingleItemsTaxes:::ItemsTaxes"]=""
operation_parameters_collection_type["createItemsTraining:::meta"]=""
operation_parameters_collection_type["createItemsTraining:::CreateItemsTrainingRequest"]=""
operation_parameters_collection_type["deleteSingleItemsTraining:::id"]=""
operation_parameters_collection_type["readItemsTraining:::fields"]="csv"
operation_parameters_collection_type["readItemsTraining:::limit"]=""
operation_parameters_collection_type["readItemsTraining:::meta"]=""
operation_parameters_collection_type["readItemsTraining:::offset"]=""
operation_parameters_collection_type["readItemsTraining:::sort"]="csv"
operation_parameters_collection_type["readItemsTraining:::filter"]="multi"
operation_parameters_collection_type["readItemsTraining:::search"]=""
operation_parameters_collection_type["readSingleItemsTraining:::id"]=""
operation_parameters_collection_type["readSingleItemsTraining:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsTraining:::meta"]=""
operation_parameters_collection_type["readSingleItemsTraining:::version"]=""
operation_parameters_collection_type["updateItemsTraining:::fields"]="csv"
operation_parameters_collection_type["updateItemsTraining:::limit"]=""
operation_parameters_collection_type["updateItemsTraining:::meta"]=""
operation_parameters_collection_type["updateItemsTraining:::offset"]=""
operation_parameters_collection_type["updateItemsTraining:::sort"]="csv"
operation_parameters_collection_type["updateItemsTraining:::filter"]="multi"
operation_parameters_collection_type["updateItemsTraining:::search"]=""
operation_parameters_collection_type["updateItemsTraining:::CreateItemsTrainingRequest"]=""
operation_parameters_collection_type["updateSingleItemsTraining:::id"]=""
operation_parameters_collection_type["updateSingleItemsTraining:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsTraining:::meta"]=""
operation_parameters_collection_type["updateSingleItemsTraining:::ItemsTraining"]=""
operation_parameters_collection_type["createItemsTransactions:::meta"]=""
operation_parameters_collection_type["createItemsTransactions:::CreateItemsTransactionsRequest"]=""
operation_parameters_collection_type["deleteSingleItemsTransactions:::id"]=""
operation_parameters_collection_type["readItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["readItemsTransactions:::limit"]=""
operation_parameters_collection_type["readItemsTransactions:::meta"]=""
operation_parameters_collection_type["readItemsTransactions:::offset"]=""
operation_parameters_collection_type["readItemsTransactions:::sort"]="csv"
operation_parameters_collection_type["readItemsTransactions:::filter"]="multi"
operation_parameters_collection_type["readItemsTransactions:::search"]=""
operation_parameters_collection_type["readSingleItemsTransactions:::id"]=""
operation_parameters_collection_type["readSingleItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["readSingleItemsTransactions:::meta"]=""
operation_parameters_collection_type["readSingleItemsTransactions:::version"]=""
operation_parameters_collection_type["updateItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["updateItemsTransactions:::limit"]=""
operation_parameters_collection_type["updateItemsTransactions:::meta"]=""
operation_parameters_collection_type["updateItemsTransactions:::offset"]=""
operation_parameters_collection_type["updateItemsTransactions:::sort"]="csv"
operation_parameters_collection_type["updateItemsTransactions:::filter"]="multi"
operation_parameters_collection_type["updateItemsTransactions:::search"]=""
operation_parameters_collection_type["updateItemsTransactions:::CreateItemsTransactionsRequest"]=""
operation_parameters_collection_type["updateSingleItemsTransactions:::id"]=""
operation_parameters_collection_type["updateSingleItemsTransactions:::fields"]="csv"
operation_parameters_collection_type["updateSingleItemsTransactions:::meta"]=""
operation_parameters_collection_type["updateSingleItemsTransactions:::ItemsTransactions"]=""
operation_parameters_collection_type["getPermission:::id"]=""
operation_parameters_collection_type["getPermission:::fields"]="csv"
operation_parameters_collection_type["getPermission:::meta"]=""
operation_parameters_collection_type["getPermissions:::fields"]="csv"
operation_parameters_collection_type["getPermissions:::limit"]=""
operation_parameters_collection_type["getPermissions:::offset"]=""
operation_parameters_collection_type["getPermissions:::meta"]=""
operation_parameters_collection_type["getPermissions:::sort"]="csv"
operation_parameters_collection_type["getPermissions:::filter"]="multi"
operation_parameters_collection_type["getPermissions:::search"]=""
operation_parameters_collection_type["getPermissions:::page"]=""
operation_parameters_collection_type["createPreset:::fields"]="csv"
operation_parameters_collection_type["createPreset:::meta"]=""
operation_parameters_collection_type["createPreset:::CreatePresetRequest"]=""
operation_parameters_collection_type["deletePreset:::id"]=""
operation_parameters_collection_type["getPreset:::id"]=""
operation_parameters_collection_type["getPreset:::fields"]="csv"
operation_parameters_collection_type["getPreset:::meta"]=""
operation_parameters_collection_type["getPresets:::fields"]="csv"
operation_parameters_collection_type["getPresets:::limit"]=""
operation_parameters_collection_type["getPresets:::offset"]=""
operation_parameters_collection_type["getPresets:::page"]=""
operation_parameters_collection_type["getPresets:::sort"]="csv"
operation_parameters_collection_type["getPresets:::filter"]="multi"
operation_parameters_collection_type["getPresets:::search"]=""
operation_parameters_collection_type["getPresets:::meta"]=""
operation_parameters_collection_type["updatePreset:::id"]=""
operation_parameters_collection_type["updatePreset:::fields"]="csv"
operation_parameters_collection_type["updatePreset:::meta"]=""
operation_parameters_collection_type["updatePreset:::UpdatePresetRequest"]=""
operation_parameters_collection_type["updatePresets:::fields"]="csv"
operation_parameters_collection_type["updatePresets:::limit"]=""
operation_parameters_collection_type["updatePresets:::meta"]=""
operation_parameters_collection_type["updatePresets:::offset"]=""
operation_parameters_collection_type["updatePresets:::sort"]="csv"
operation_parameters_collection_type["updatePresets:::filter"]="multi"
operation_parameters_collection_type["updatePresets:::search"]=""
operation_parameters_collection_type["updatePresets:::UpdatePresetsRequest"]=""
operation_parameters_collection_type["getRelation:::id"]=""
operation_parameters_collection_type["getRelation:::fields"]="csv"
operation_parameters_collection_type["getRelation:::meta"]=""
operation_parameters_collection_type["getRelations:::fields"]="csv"
operation_parameters_collection_type["getRelations:::limit"]=""
operation_parameters_collection_type["getRelations:::offset"]=""
operation_parameters_collection_type["getRelations:::meta"]=""
operation_parameters_collection_type["getRelations:::sort"]="csv"
operation_parameters_collection_type["getRelations:::filter"]="multi"
operation_parameters_collection_type["getRelations:::search"]=""
operation_parameters_collection_type["getRelations:::page"]=""
operation_parameters_collection_type["getRole:::id"]=""
operation_parameters_collection_type["getRole:::fields"]="csv"
operation_parameters_collection_type["getRole:::meta"]=""
operation_parameters_collection_type["getRoles:::fields"]="csv"
operation_parameters_collection_type["getRoles:::limit"]=""
operation_parameters_collection_type["getRoles:::offset"]=""
operation_parameters_collection_type["getRoles:::meta"]=""
operation_parameters_collection_type["getRoles:::sort"]="csv"
operation_parameters_collection_type["getRoles:::filter"]="multi"
operation_parameters_collection_type["getRoles:::search"]=""
operation_parameters_collection_type["getRoles:::page"]=""
operation_parameters_collection_type["schemaApply:::SchemaApplyRequest"]=""
operation_parameters_collection_type["schemaDiff:::SchemaSnapshot200Response"]=""
operation_parameters_collection_type["schemaDiff:::force"]=""
operation_parameters_collection_type["schemaSnapshot:::export"]=""
operation_parameters_collection_type["serverInfo:::super_admin_token"]=""
operation_parameters_collection_type["getSettings:::limit"]=""
operation_parameters_collection_type["getSettings:::offset"]=""
operation_parameters_collection_type["getSettings:::meta"]=""
operation_parameters_collection_type["getSettings:::page"]=""
operation_parameters_collection_type["getMe:::fields"]="csv"
operation_parameters_collection_type["getMe:::meta"]=""
operation_parameters_collection_type["getUser:::id"]=""
operation_parameters_collection_type["getUser:::fields"]="csv"
operation_parameters_collection_type["getUser:::meta"]=""
operation_parameters_collection_type["getUsers:::fields"]="csv"
operation_parameters_collection_type["getUsers:::limit"]=""
operation_parameters_collection_type["getUsers:::offset"]=""
operation_parameters_collection_type["getUsers:::meta"]=""
operation_parameters_collection_type["getUsers:::sort"]="csv"
operation_parameters_collection_type["getUsers:::filter"]="multi"
operation_parameters_collection_type["getUsers:::search"]=""
operation_parameters_collection_type["updateLastUsedPageMe:::UpdateLastUsedPageMeRequest"]=""
operation_parameters_collection_type["updateUser:::id"]=""
operation_parameters_collection_type["updateUser:::fields"]="csv"
operation_parameters_collection_type["updateUser:::meta"]=""
operation_parameters_collection_type["updateUser:::Users"]=""
operation_parameters_collection_type["updateUsers:::fields"]="csv"
operation_parameters_collection_type["updateUsers:::limit"]=""
operation_parameters_collection_type["updateUsers:::meta"]=""
operation_parameters_collection_type["updateUsers:::offset"]=""
operation_parameters_collection_type["updateUsers:::sort"]="csv"
operation_parameters_collection_type["updateUsers:::filter"]="multi"
operation_parameters_collection_type["updateUsers:::search"]=""
operation_parameters_collection_type["updateUsers:::UpdateUsersRequest"]=""
operation_parameters_collection_type["export:::collection"]=""
operation_parameters_collection_type["export:::ExportRequest"]=""
operation_parameters_collection_type["hashGenerate:::HashGenerateRequest"]=""
operation_parameters_collection_type["hashVerify:::HashVerifyRequest"]=""
operation_parameters_collection_type["import:::collection"]=""
operation_parameters_collection_type["import:::file"]=""
operation_parameters_collection_type["random:::length"]=""
operation_parameters_collection_type["sort:::collection"]=""
operation_parameters_collection_type["sort:::SortRequest"]=""


##
# Map for body parameters passed after operation as
# PARAMETER==STRING_VALUE or PARAMETER:=NUMERIC_VALUE
# These will be mapped to top level json keys ( { "PARAMETER": "VALUE" })
declare -A body_parameters

##
# These arguments will be directly passed to cURL
curl_arguments=""

##
# The host for making the request
host=""

##
# The user credentials for basic authentication
basic_auth_credential=""

##
# The user API key
apikey_auth_credential=""

##
# If true, the script will only output the actual cURL command that would be
# used
print_curl=false

##
# The operation ID passed on the command line
operation=""

##
# The provided Accept header value
header_accept=""

##
# The provided Content-type header value
header_content_type=""

##
# If there is any body content on the stdin pass it to the body of the request
body_content_temp_file=""

##
# If this variable is set to true, the request will be performed even
# if parameters for required query, header or body values are not provided
# (path parameters are still required).
force=false

##
# Declare some mime types abbreviations for easier content-type and accepts
# headers specification
declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


##############################################################################
#
# Escape special URL characters
# Based on table at http://www.w3schools.com/tags/ref_urlencode.asp
#
##############################################################################
url_escape() {
    local raw_url="$1"

    value=$(sed -e 's/ /%20/g' \
       -e 's/!/%21/g' \
       -e 's/"/%22/g' \
       -e 's/#/%23/g' \
       -e 's/\&/%26/g' \
       -e 's/'\''/%28/g' \
       -e 's/(/%28/g' \
       -e 's/)/%29/g' \
       -e 's/:/%3A/g' \
       -e 's/\\t/%09/g' \
       -e 's/?/%3F/g' <<<"$raw_url");

    echo "$value"
}

##############################################################################
#
# Lookup the mime type abbreviation in the mime_type_abbreviations array.
# If not present assume the user provided a valid mime type
#
##############################################################################
lookup_mime_type() {
    local mime_type="$1"

    if [[ ${mime_type_abbreviations[$mime_type]} ]]; then
        echo "${mime_type_abbreviations[$mime_type]}"
    else
        echo "$mime_type"
    fi
}

##############################################################################
#
# Converts an associative array into a list of cURL header
# arguments (-H "KEY: VALUE")
#
##############################################################################
header_arguments_to_curl() {
    local headers_curl=""
    local api_key_header=""
    local api_key_header_in_cli=""
    api_key_header="Authorization"

    for key in "${!header_arguments[@]}"; do
        headers_curl+="-H \"${key}: ${header_arguments[${key}]}\" "
        if [[ "${key}XX" == "${api_key_header}XX" ]]; then
            api_key_header_in_cli="YES"
        fi
    done
    #
    # If the api_key was not provided in the header, try one from the
    # environment variable
    #
    if [[ -z $api_key_header_in_cli && -n $apikey_auth_credential ]]; then
        headers_curl+="-H \"${api_key_header}: ${apikey_auth_credential}\""
    fi
    headers_curl+=" "

    echo "${headers_curl}"
}

##############################################################################
#
# Converts an associative array into a simple JSON with keys as top
# level object attributes
#
# \todo Add conversion of more complex attributes using paths
#
##############################################################################
body_parameters_to_json() {
    local body_json="-d '{"
    local count=0
    for key in "${!body_parameters[@]}"; do
        if [[ $((count++)) -gt 0 ]]; then
            body_json+=", "
        fi
        body_json+="\"${key}\": ${body_parameters[${key}]}"
    done
    body_json+="}'"

    if [[ "${#body_parameters[@]}" -eq 0 ]]; then
        echo ""
    else
        echo "${body_json}"
    fi
}

##############################################################################
#
# Converts an associative array into form urlencoded string
#
##############################################################################
body_parameters_to_form_urlencoded() {
    local body_form_urlencoded="-d '"
    local count=0
    for key in "${!body_parameters[@]}"; do
        if [[ $((count++)) -gt 0 ]]; then
            body_form_urlencoded+="&"
        fi
        body_form_urlencoded+="${key}=${body_parameters[${key}]}"
    done
    body_form_urlencoded+="'"

    if [[ "${#body_parameters[@]}" -eq 0 ]]; then
        echo ""
    else
        echo "${body_form_urlencoded}"
    fi
}

##############################################################################
#
# Helper method for showing error because for example echo in
# build_request_path() is evaluated as part of command line not printed on
# output. Anyway better idea for resource clean up ;-).
#
##############################################################################
ERROR_MSG=""
function finish {
    if [[ -n "$ERROR_MSG" ]]; then
        echo >&2 "${OFF}${RED}$ERROR_MSG"
        echo >&2 "${OFF}Check usage: '${script_name} --help'"
    fi
}
trap finish EXIT


##############################################################################
#
# Validate and build request path including query parameters
#
##############################################################################
build_request_path() {
    local path_template=$1
    local -n path_params=$2
    local -n query_params=$3


    #
    # Check input parameters count against minimum and maximum required
    #
    if [[ "$force" = false ]]; then
        local was_error=""
        for qparam in "${query_params[@]}" "${path_params[@]}"; do
            local parameter_values
            mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")

            #
            # Check if the number of provided values is not less than minimum required
            #
            if [[ ${#parameter_values[@]} -lt ${operation_parameters_minimum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too few values provided for '${qparam}' parameter."
                was_error=true
            fi

            #
            # Check if the number of provided values is not more than maximum
            #
            if [[ ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} -gt 0 \
                  && ${#parameter_values[@]} -gt ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too many values provided for '${qparam}' parameter"
                was_error=true
            fi
        done
        if [[ -n "$was_error" ]]; then
            exit 1
        fi
    fi

    # First replace all path parameters in the path
    for pparam in "${path_params[@]}"; do
        local path_regex="(.*)(\\{$pparam\\})(.*)"
        if [[ $path_template =~ $path_regex ]]; then
            path_template=${BASH_REMATCH[1]}${operation_parameters[$pparam]}${BASH_REMATCH[3]}
        fi
    done

    local query_request_part=""

    for qparam in "${query_params[@]}"; do
        if [[ "${operation_parameters[$qparam]}" == "" ]]; then
            continue
        fi

        # Get the array of parameter values
        local parameter_value=""
        local parameter_values
        mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")


        if [[ ${qparam} == "access_token" ]]; then
            if [[ -n "${parameter_values[*]}" ]]; then
                parameter_value+="${qparam}=${parameter_values}"
            else
                echo "Missing ApiKey!!! You have to provide on command line option 'access_token=...'"
                exit 1
            fi
            continue
        fi

        #
        # Append parameters without specific cardinality
        #
        local collection_type="${operation_parameters_collection_type["${operation}:::${qparam}"]}"
        if [[ "${collection_type}" == "" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'multi' collections i.e. param=value1&param=value2&...
        #
        elif [[ "${collection_type}" == "multi" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'csv' collections i.e. param=value1,value2,...
        #
        elif [[ "${collection_type}" == "csv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=","
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'ssv' collections i.e. param="value1 value2 ..."
        #
        elif [[ "${collection_type}" == "ssv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=" "
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'tsv' collections i.e. param="value1\tvalue2\t..."
        #
        elif [[ "${collection_type}" == "tsv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="\\t"
                fi
                parameter_value+="${qvalue}"
            done
        else
            echo "Unsupported collection format \"${collection_type}\""
            exit 1
        fi

        if [[ -n "${parameter_value}" ]]; then
            if [[ -n "${query_request_part}" ]]; then
                query_request_part+="&"
            fi
            query_request_part+="${parameter_value}"
        fi

    done


    # Now append query parameters - if any
    if [[ -n "${query_request_part}" ]]; then
        path_template+="?${query_request_part}"
    fi

    echo "$path_template"
}



###############################################################################
#
# Print main help message
#
###############################################################################
print_help() {
cat <<EOF

${BOLD}${WHITE}Dynamic API Specification command line client (API version 14.0.2)${OFF}

${BOLD}${WHITE}Usage${OFF}

  ${GREEN}${script_name}${OFF} [-h|--help] [-V|--version] [--about] [${RED}<curl-options>${OFF}]
           [-ac|--accept ${GREEN}<mime-type>${OFF}] [-ct,--content-type ${GREEN}<mime-type>${OFF}]
           [--host ${CYAN}<url>${OFF}] [--dry-run] [-nc|--no-colors] ${YELLOW}<operation>${OFF} [-h|--help]
           [${BLUE}<headers>${OFF}] [${MAGENTA}<parameters>${OFF}] [${MAGENTA}<body-parameters>${OFF}]

  - ${CYAN}<url>${OFF} - endpoint of the REST service without basepath

  - ${RED}<curl-options>${OFF} - any valid cURL options can be passed before ${YELLOW}<operation>${OFF}
  - ${GREEN}<mime-type>${OFF} - either full mime-type or one of supported abbreviations:
                   (text, html, md, csv, css, rtf, json, xml, yaml, js, bin,
                    rdf, jpg, png, gif, bmp, tiff)
  - ${BLUE}<headers>${OFF} - HTTP headers can be passed in the form ${YELLOW}HEADER${OFF}:${BLUE}VALUE${OFF}
  - ${MAGENTA}<parameters>${OFF} - REST operation parameters can be passed in the following
                   forms:
                   * ${YELLOW}KEY${OFF}=${BLUE}VALUE${OFF} - path or query parameters
  - ${MAGENTA}<body-parameters>${OFF} - simple JSON body content (first level only) can be build
                        using the following arguments:
                        * ${YELLOW}KEY${OFF}==${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": "${BLUE}VALUE${OFF}", ... }'
                        * ${YELLOW}KEY${OFF}:=${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": ${BLUE}VALUE${OFF}, ... }'

EOF
    echo -e "${BOLD}${WHITE}Authentication methods${OFF}"
    echo -e ""
    echo -e "  - ${BLUE}Api-key${OFF} - add '${RED}access_token=<api-key>${OFF}' after ${YELLOW}<operation>${OFF}"
    
    echo -e "  - ${BLUE}Api-key${OFF} - add '${RED}Authorization:<api-key>${OFF}' after ${YELLOW}<operation>${OFF}"
    
    echo ""
    echo -e "${BOLD}${WHITE}Operations (grouped by tags)${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}[activity]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createComment${OFF};Create a Comment
  ${CYAN}getActivities${OFF};List Activity Actions
  ${CYAN}getActivity${OFF};Retrieve an Activity Action
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[assets]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getAsset${OFF};Get an Asset
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[authentication]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}login${OFF};Retrieve a Temporary Access Token
  ${CYAN}logout${OFF};Log Out
  ${CYAN}oauth${OFF};List OAuth Providers
  ${CYAN}oauthProvider${OFF};Authenticated using an OAuth provider
  ${CYAN}passwordRequest${OFF};Request a Password Reset
  ${CYAN}passwordReset${OFF};Reset a Password
  ${CYAN}refresh${OFF};Refresh Token
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[collections]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getCollection${OFF};Retrieve a Collection
  ${CYAN}getCollections${OFF};List Collections
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[extensions]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getDisplays${OFF};List Displays
  ${CYAN}getInterfaces${OFF};List Interfaces
  ${CYAN}getLayouts${OFF};List Layouts
  ${CYAN}getModules${OFF};List Modules
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[fields]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getCollectionField${OFF};Retrieve a Field
  ${CYAN}getCollectionFields${OFF};List Fields in Collection
  ${CYAN}getFields${OFF};List All Fields
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[files]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createFile${OFF};Create a File
  ${CYAN}deleteFile${OFF};Delete a File
  ${CYAN}deleteFiles${OFF};Delete Multiple Files
  ${CYAN}getFile${OFF};Retrieve a Files
  ${CYAN}getFiles${OFF};List Files
  ${CYAN}updateFile${OFF};Update a File
  ${CYAN}updateFiles${OFF};Update Multiple Files
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[flows]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getFlow${OFF};Retrieve a Flow
  ${CYAN}getFlows${OFF};List Flows
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[folders]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createFolder${OFF};Create a Folder
  ${CYAN}deleteFolder${OFF};Delete a Folder
  ${CYAN}deleteFolders${OFF};Delete Multiple Folders
  ${CYAN}getFolder${OFF};Retrieve a Folder
  ${CYAN}getFolders${OFF};List Folders
  ${CYAN}updateFolder${OFF};Update a Folder
  ${CYAN}updateFolders${OFF};Update Multiple Folders
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[items]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsAccounts${OFF};Create an Item
  ${CYAN}createItemsAppointments${OFF};Create an Item
  ${CYAN}createItemsBudgets${OFF};Create an Item
  ${CYAN}createItemsCampaigns${OFF};Create an Item
  ${CYAN}createItemsCarbonFootprint${OFF};Create an Item
  ${CYAN}createItemsCompanyAssets${OFF};Create an Item
  ${CYAN}createItemsContent${OFF};Create an Item
  ${CYAN}createItemsContracts${OFF};Create an Item
  ${CYAN}createItemsCrm${OFF};Create an Item
  ${CYAN}createItemsDepartment${OFF};Create an Item
  ${CYAN}createItemsDistribution${OFF};Create an Item
  ${CYAN}createItemsEmailCampaigns${OFF};Create an Item
  ${CYAN}createItemsEmployeeDirectory${OFF};Create an Item
  ${CYAN}createItemsEnergyEfficiency${OFF};Create an Item
  ${CYAN}createItemsEnvironmentalCompliance${OFF};Create an Item
  ${CYAN}createItemsEvents${OFF};Create an Item
  ${CYAN}createItemsExpenses${OFF};Create an Item
  ${CYAN}createItemsFacilities${OFF};Create an Item
  ${CYAN}createItemsFeedback${OFF};Create an Item
  ${CYAN}createItemsForum${OFF};Create an Item
  ${CYAN}createItemsFulfillment${OFF};Create an Item
  ${CYAN}createItemsGovernanceandEthics${OFF};Create an Item
  ${CYAN}createItemsHelpdesk${OFF};Create an Item
  ${CYAN}createItemsInventory${OFF};Create an Item
  ${CYAN}createItemsInvoices${OFF};Create an Item
  ${CYAN}createItemsInvoicing${OFF};Create an Item
  ${CYAN}createItemsLifecycle${OFF};Create an Item
  ${CYAN}createItemsLiveChat${OFF};Create an Item
  ${CYAN}createItemsLoyalty${OFF};Create an Item
  ${CYAN}createItemsMaintenance${OFF};Create an Item
  ${CYAN}createItemsPayroll${OFF};Create an Item
  ${CYAN}createItemsPerformance${OFF};Create an Item
  ${CYAN}createItemsPointofSale${OFF};Create an Item
  ${CYAN}createItemsPolicy${OFF};Create an Item
  ${CYAN}createItemsProcurement${OFF};Create an Item
  ${CYAN}createItemsProductionBatch${OFF};Create an Item
  ${CYAN}createItemsProject${OFF};Create an Item
  ${CYAN}createItemsPurchaseOrders${OFF};Create an Item
  ${CYAN}createItemsQualityCheck${OFF};Create an Item
  ${CYAN}createItemsQuotes${OFF};Create an Item
  ${CYAN}createItemsRecruit${OFF};Create an Item
  ${CYAN}createItemsRegulations${OFF};Create an Item
  ${CYAN}createItemsRentals${OFF};Create an Item
  ${CYAN}createItemsShipment${OFF};Create an Item
  ${CYAN}createItemsSocialMedia${OFF};Create an Item
  ${CYAN}createItemsSocialResponsibility${OFF};Create an Item
  ${CYAN}createItemsSuppliers${OFF};Create an Item
  ${CYAN}createItemsSurveys${OFF};Create an Item
  ${CYAN}createItemsSustainableSupplyChain${OFF};Create an Item
  ${CYAN}createItemsTaxes${OFF};Create an Item
  ${CYAN}createItemsTraining${OFF};Create an Item
  ${CYAN}createItemsTransactions${OFF};Create an Item
  ${CYAN}deleteItemsAccounts${OFF};Delete Multiple Items
  ${CYAN}deleteItemsAppointments${OFF};Delete Multiple Items
  ${CYAN}deleteItemsBudgets${OFF};Delete Multiple Items
  ${CYAN}deleteItemsCampaigns${OFF};Delete Multiple Items
  ${CYAN}deleteItemsCarbonFootprint${OFF};Delete Multiple Items
  ${CYAN}deleteItemsCompanyAssets${OFF};Delete Multiple Items
  ${CYAN}deleteItemsContent${OFF};Delete Multiple Items
  ${CYAN}deleteItemsContracts${OFF};Delete Multiple Items
  ${CYAN}deleteItemsCrm${OFF};Delete Multiple Items
  ${CYAN}deleteItemsDepartment${OFF};Delete Multiple Items
  ${CYAN}deleteItemsDistribution${OFF};Delete Multiple Items
  ${CYAN}deleteItemsEmailCampaigns${OFF};Delete Multiple Items
  ${CYAN}deleteItemsEmployeeDirectory${OFF};Delete Multiple Items
  ${CYAN}deleteItemsEnergyEfficiency${OFF};Delete Multiple Items
  ${CYAN}deleteItemsEnvironmentalCompliance${OFF};Delete Multiple Items
  ${CYAN}deleteItemsEvents${OFF};Delete Multiple Items
  ${CYAN}deleteItemsExpenses${OFF};Delete Multiple Items
  ${CYAN}deleteItemsFacilities${OFF};Delete Multiple Items
  ${CYAN}deleteItemsFeedback${OFF};Delete Multiple Items
  ${CYAN}deleteItemsForum${OFF};Delete Multiple Items
  ${CYAN}deleteItemsFulfillment${OFF};Delete Multiple Items
  ${CYAN}deleteItemsGovernanceandEthics${OFF};Delete Multiple Items
  ${CYAN}deleteItemsHelpdesk${OFF};Delete Multiple Items
  ${CYAN}deleteItemsInventory${OFF};Delete Multiple Items
  ${CYAN}deleteItemsInvoices${OFF};Delete Multiple Items
  ${CYAN}deleteItemsInvoicing${OFF};Delete Multiple Items
  ${CYAN}deleteItemsLifecycle${OFF};Delete Multiple Items
  ${CYAN}deleteItemsLiveChat${OFF};Delete Multiple Items
  ${CYAN}deleteItemsLoyalty${OFF};Delete Multiple Items
  ${CYAN}deleteItemsMaintenance${OFF};Delete Multiple Items
  ${CYAN}deleteItemsPayroll${OFF};Delete Multiple Items
  ${CYAN}deleteItemsPerformance${OFF};Delete Multiple Items
  ${CYAN}deleteItemsPointofSale${OFF};Delete Multiple Items
  ${CYAN}deleteItemsPolicy${OFF};Delete Multiple Items
  ${CYAN}deleteItemsProcurement${OFF};Delete Multiple Items
  ${CYAN}deleteItemsProductionBatch${OFF};Delete Multiple Items
  ${CYAN}deleteItemsProject${OFF};Delete Multiple Items
  ${CYAN}deleteItemsPurchaseOrders${OFF};Delete Multiple Items
  ${CYAN}deleteItemsQualityCheck${OFF};Delete Multiple Items
  ${CYAN}deleteItemsQuotes${OFF};Delete Multiple Items
  ${CYAN}deleteItemsRecruit${OFF};Delete Multiple Items
  ${CYAN}deleteItemsRegulations${OFF};Delete Multiple Items
  ${CYAN}deleteItemsRentals${OFF};Delete Multiple Items
  ${CYAN}deleteItemsShipment${OFF};Delete Multiple Items
  ${CYAN}deleteItemsSocialMedia${OFF};Delete Multiple Items
  ${CYAN}deleteItemsSocialResponsibility${OFF};Delete Multiple Items
  ${CYAN}deleteItemsSuppliers${OFF};Delete Multiple Items
  ${CYAN}deleteItemsSurveys${OFF};Delete Multiple Items
  ${CYAN}deleteItemsSustainableSupplyChain${OFF};Delete Multiple Items
  ${CYAN}deleteItemsTaxes${OFF};Delete Multiple Items
  ${CYAN}deleteItemsTraining${OFF};Delete Multiple Items
  ${CYAN}deleteItemsTransactions${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsAccounts${OFF};Delete an Item
  ${CYAN}deleteSingleItemsAppointments${OFF};Delete an Item
  ${CYAN}deleteSingleItemsBudgets${OFF};Delete an Item
  ${CYAN}deleteSingleItemsCampaigns${OFF};Delete an Item
  ${CYAN}deleteSingleItemsCarbonFootprint${OFF};Delete an Item
  ${CYAN}deleteSingleItemsCompanyAssets${OFF};Delete an Item
  ${CYAN}deleteSingleItemsContent${OFF};Delete an Item
  ${CYAN}deleteSingleItemsContracts${OFF};Delete an Item
  ${CYAN}deleteSingleItemsCrm${OFF};Delete an Item
  ${CYAN}deleteSingleItemsDepartment${OFF};Delete an Item
  ${CYAN}deleteSingleItemsDistribution${OFF};Delete an Item
  ${CYAN}deleteSingleItemsEmailCampaigns${OFF};Delete an Item
  ${CYAN}deleteSingleItemsEmployeeDirectory${OFF};Delete an Item
  ${CYAN}deleteSingleItemsEnergyEfficiency${OFF};Delete an Item
  ${CYAN}deleteSingleItemsEnvironmentalCompliance${OFF};Delete an Item
  ${CYAN}deleteSingleItemsEvents${OFF};Delete an Item
  ${CYAN}deleteSingleItemsExpenses${OFF};Delete an Item
  ${CYAN}deleteSingleItemsFacilities${OFF};Delete an Item
  ${CYAN}deleteSingleItemsFeedback${OFF};Delete an Item
  ${CYAN}deleteSingleItemsForum${OFF};Delete an Item
  ${CYAN}deleteSingleItemsFulfillment${OFF};Delete an Item
  ${CYAN}deleteSingleItemsGovernanceandEthics${OFF};Delete an Item
  ${CYAN}deleteSingleItemsHelpdesk${OFF};Delete an Item
  ${CYAN}deleteSingleItemsInventory${OFF};Delete an Item
  ${CYAN}deleteSingleItemsInvoices${OFF};Delete an Item
  ${CYAN}deleteSingleItemsInvoicing${OFF};Delete an Item
  ${CYAN}deleteSingleItemsLifecycle${OFF};Delete an Item
  ${CYAN}deleteSingleItemsLiveChat${OFF};Delete an Item
  ${CYAN}deleteSingleItemsLoyalty${OFF};Delete an Item
  ${CYAN}deleteSingleItemsMaintenance${OFF};Delete an Item
  ${CYAN}deleteSingleItemsPayroll${OFF};Delete an Item
  ${CYAN}deleteSingleItemsPerformance${OFF};Delete an Item
  ${CYAN}deleteSingleItemsPointofSale${OFF};Delete an Item
  ${CYAN}deleteSingleItemsPolicy${OFF};Delete an Item
  ${CYAN}deleteSingleItemsProcurement${OFF};Delete an Item
  ${CYAN}deleteSingleItemsProductionBatch${OFF};Delete an Item
  ${CYAN}deleteSingleItemsProject${OFF};Delete an Item
  ${CYAN}deleteSingleItemsPurchaseOrders${OFF};Delete an Item
  ${CYAN}deleteSingleItemsQualityCheck${OFF};Delete an Item
  ${CYAN}deleteSingleItemsQuotes${OFF};Delete an Item
  ${CYAN}deleteSingleItemsRecruit${OFF};Delete an Item
  ${CYAN}deleteSingleItemsRegulations${OFF};Delete an Item
  ${CYAN}deleteSingleItemsRentals${OFF};Delete an Item
  ${CYAN}deleteSingleItemsShipment${OFF};Delete an Item
  ${CYAN}deleteSingleItemsSocialMedia${OFF};Delete an Item
  ${CYAN}deleteSingleItemsSocialResponsibility${OFF};Delete an Item
  ${CYAN}deleteSingleItemsSuppliers${OFF};Delete an Item
  ${CYAN}deleteSingleItemsSurveys${OFF};Delete an Item
  ${CYAN}deleteSingleItemsSustainableSupplyChain${OFF};Delete an Item
  ${CYAN}deleteSingleItemsTaxes${OFF};Delete an Item
  ${CYAN}deleteSingleItemsTraining${OFF};Delete an Item
  ${CYAN}deleteSingleItemsTransactions${OFF};Delete an Item
  ${CYAN}readItemsAccounts${OFF};List Items (AUTH)
  ${CYAN}readItemsAppointments${OFF};List Items (AUTH)
  ${CYAN}readItemsBudgets${OFF};List Items (AUTH)
  ${CYAN}readItemsCampaigns${OFF};List Items (AUTH)
  ${CYAN}readItemsCarbonFootprint${OFF};List Items (AUTH)
  ${CYAN}readItemsCompanyAssets${OFF};List Items (AUTH)
  ${CYAN}readItemsContent${OFF};List Items (AUTH)
  ${CYAN}readItemsContracts${OFF};List Items (AUTH)
  ${CYAN}readItemsCrm${OFF};List Items (AUTH)
  ${CYAN}readItemsDepartment${OFF};List Items (AUTH)
  ${CYAN}readItemsDistribution${OFF};List Items (AUTH)
  ${CYAN}readItemsEmailCampaigns${OFF};List Items (AUTH)
  ${CYAN}readItemsEmployeeDirectory${OFF};List Items (AUTH)
  ${CYAN}readItemsEnergyEfficiency${OFF};List Items (AUTH)
  ${CYAN}readItemsEnvironmentalCompliance${OFF};List Items (AUTH)
  ${CYAN}readItemsEvents${OFF};List Items (AUTH)
  ${CYAN}readItemsExpenses${OFF};List Items (AUTH)
  ${CYAN}readItemsFacilities${OFF};List Items (AUTH)
  ${CYAN}readItemsFeedback${OFF};List Items (AUTH)
  ${CYAN}readItemsForum${OFF};List Items (AUTH)
  ${CYAN}readItemsFulfillment${OFF};List Items (AUTH)
  ${CYAN}readItemsGovernanceandEthics${OFF};List Items (AUTH)
  ${CYAN}readItemsHelpdesk${OFF};List Items (AUTH)
  ${CYAN}readItemsInventory${OFF};List Items (AUTH)
  ${CYAN}readItemsInvoices${OFF};List Items (AUTH)
  ${CYAN}readItemsInvoicing${OFF};List Items (AUTH)
  ${CYAN}readItemsLifecycle${OFF};List Items (AUTH)
  ${CYAN}readItemsLiveChat${OFF};List Items (AUTH)
  ${CYAN}readItemsLoyalty${OFF};List Items (AUTH)
  ${CYAN}readItemsMaintenance${OFF};List Items (AUTH)
  ${CYAN}readItemsPayroll${OFF};List Items (AUTH)
  ${CYAN}readItemsPerformance${OFF};List Items (AUTH)
  ${CYAN}readItemsPointofSale${OFF};List Items (AUTH)
  ${CYAN}readItemsPolicy${OFF};List Items (AUTH)
  ${CYAN}readItemsProcurement${OFF};List Items (AUTH)
  ${CYAN}readItemsProductionBatch${OFF};List Items (AUTH)
  ${CYAN}readItemsProject${OFF};List Items (AUTH)
  ${CYAN}readItemsPurchaseOrders${OFF};List Items (AUTH)
  ${CYAN}readItemsQualityCheck${OFF};List Items (AUTH)
  ${CYAN}readItemsQuotes${OFF};List Items (AUTH)
  ${CYAN}readItemsRecruit${OFF};List Items (AUTH)
  ${CYAN}readItemsRegulations${OFF};List Items (AUTH)
  ${CYAN}readItemsRentals${OFF};List Items (AUTH)
  ${CYAN}readItemsShipment${OFF};List Items (AUTH)
  ${CYAN}readItemsSocialMedia${OFF};List Items (AUTH)
  ${CYAN}readItemsSocialResponsibility${OFF};List Items (AUTH)
  ${CYAN}readItemsSuppliers${OFF};List Items (AUTH)
  ${CYAN}readItemsSurveys${OFF};List Items (AUTH)
  ${CYAN}readItemsSustainableSupplyChain${OFF};List Items (AUTH)
  ${CYAN}readItemsTaxes${OFF};List Items (AUTH)
  ${CYAN}readItemsTraining${OFF};List Items (AUTH)
  ${CYAN}readItemsTransactions${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsAccounts${OFF};Retrieve an Item
  ${CYAN}readSingleItemsAppointments${OFF};Retrieve an Item
  ${CYAN}readSingleItemsBudgets${OFF};Retrieve an Item
  ${CYAN}readSingleItemsCampaigns${OFF};Retrieve an Item
  ${CYAN}readSingleItemsCarbonFootprint${OFF};Retrieve an Item
  ${CYAN}readSingleItemsCompanyAssets${OFF};Retrieve an Item
  ${CYAN}readSingleItemsContent${OFF};Retrieve an Item
  ${CYAN}readSingleItemsContracts${OFF};Retrieve an Item
  ${CYAN}readSingleItemsCrm${OFF};Retrieve an Item
  ${CYAN}readSingleItemsDepartment${OFF};Retrieve an Item
  ${CYAN}readSingleItemsDistribution${OFF};Retrieve an Item
  ${CYAN}readSingleItemsEmailCampaigns${OFF};Retrieve an Item
  ${CYAN}readSingleItemsEmployeeDirectory${OFF};Retrieve an Item
  ${CYAN}readSingleItemsEnergyEfficiency${OFF};Retrieve an Item
  ${CYAN}readSingleItemsEnvironmentalCompliance${OFF};Retrieve an Item
  ${CYAN}readSingleItemsEvents${OFF};Retrieve an Item
  ${CYAN}readSingleItemsExpenses${OFF};Retrieve an Item
  ${CYAN}readSingleItemsFacilities${OFF};Retrieve an Item
  ${CYAN}readSingleItemsFeedback${OFF};Retrieve an Item
  ${CYAN}readSingleItemsForum${OFF};Retrieve an Item
  ${CYAN}readSingleItemsFulfillment${OFF};Retrieve an Item
  ${CYAN}readSingleItemsGovernanceandEthics${OFF};Retrieve an Item
  ${CYAN}readSingleItemsHelpdesk${OFF};Retrieve an Item
  ${CYAN}readSingleItemsInventory${OFF};Retrieve an Item
  ${CYAN}readSingleItemsInvoices${OFF};Retrieve an Item
  ${CYAN}readSingleItemsInvoicing${OFF};Retrieve an Item
  ${CYAN}readSingleItemsLifecycle${OFF};Retrieve an Item
  ${CYAN}readSingleItemsLiveChat${OFF};Retrieve an Item
  ${CYAN}readSingleItemsLoyalty${OFF};Retrieve an Item
  ${CYAN}readSingleItemsMaintenance${OFF};Retrieve an Item
  ${CYAN}readSingleItemsPayroll${OFF};Retrieve an Item
  ${CYAN}readSingleItemsPerformance${OFF};Retrieve an Item
  ${CYAN}readSingleItemsPointofSale${OFF};Retrieve an Item
  ${CYAN}readSingleItemsPolicy${OFF};Retrieve an Item
  ${CYAN}readSingleItemsProcurement${OFF};Retrieve an Item
  ${CYAN}readSingleItemsProductionBatch${OFF};Retrieve an Item
  ${CYAN}readSingleItemsProject${OFF};Retrieve an Item
  ${CYAN}readSingleItemsPurchaseOrders${OFF};Retrieve an Item
  ${CYAN}readSingleItemsQualityCheck${OFF};Retrieve an Item
  ${CYAN}readSingleItemsQuotes${OFF};Retrieve an Item
  ${CYAN}readSingleItemsRecruit${OFF};Retrieve an Item
  ${CYAN}readSingleItemsRegulations${OFF};Retrieve an Item
  ${CYAN}readSingleItemsRentals${OFF};Retrieve an Item
  ${CYAN}readSingleItemsShipment${OFF};Retrieve an Item
  ${CYAN}readSingleItemsSocialMedia${OFF};Retrieve an Item
  ${CYAN}readSingleItemsSocialResponsibility${OFF};Retrieve an Item
  ${CYAN}readSingleItemsSuppliers${OFF};Retrieve an Item
  ${CYAN}readSingleItemsSurveys${OFF};Retrieve an Item
  ${CYAN}readSingleItemsSustainableSupplyChain${OFF};Retrieve an Item
  ${CYAN}readSingleItemsTaxes${OFF};Retrieve an Item
  ${CYAN}readSingleItemsTraining${OFF};Retrieve an Item
  ${CYAN}readSingleItemsTransactions${OFF};Retrieve an Item
  ${CYAN}updateItemsAccounts${OFF};Update Multiple Items
  ${CYAN}updateItemsAppointments${OFF};Update Multiple Items
  ${CYAN}updateItemsBudgets${OFF};Update Multiple Items
  ${CYAN}updateItemsCampaigns${OFF};Update Multiple Items
  ${CYAN}updateItemsCarbonFootprint${OFF};Update Multiple Items
  ${CYAN}updateItemsCompanyAssets${OFF};Update Multiple Items
  ${CYAN}updateItemsContent${OFF};Update Multiple Items
  ${CYAN}updateItemsContracts${OFF};Update Multiple Items
  ${CYAN}updateItemsCrm${OFF};Update Multiple Items
  ${CYAN}updateItemsDepartment${OFF};Update Multiple Items
  ${CYAN}updateItemsDistribution${OFF};Update Multiple Items
  ${CYAN}updateItemsEmailCampaigns${OFF};Update Multiple Items
  ${CYAN}updateItemsEmployeeDirectory${OFF};Update Multiple Items
  ${CYAN}updateItemsEnergyEfficiency${OFF};Update Multiple Items
  ${CYAN}updateItemsEnvironmentalCompliance${OFF};Update Multiple Items
  ${CYAN}updateItemsEvents${OFF};Update Multiple Items
  ${CYAN}updateItemsExpenses${OFF};Update Multiple Items
  ${CYAN}updateItemsFacilities${OFF};Update Multiple Items
  ${CYAN}updateItemsFeedback${OFF};Update Multiple Items
  ${CYAN}updateItemsForum${OFF};Update Multiple Items
  ${CYAN}updateItemsFulfillment${OFF};Update Multiple Items
  ${CYAN}updateItemsGovernanceandEthics${OFF};Update Multiple Items
  ${CYAN}updateItemsHelpdesk${OFF};Update Multiple Items
  ${CYAN}updateItemsInventory${OFF};Update Multiple Items
  ${CYAN}updateItemsInvoices${OFF};Update Multiple Items
  ${CYAN}updateItemsInvoicing${OFF};Update Multiple Items
  ${CYAN}updateItemsLifecycle${OFF};Update Multiple Items
  ${CYAN}updateItemsLiveChat${OFF};Update Multiple Items
  ${CYAN}updateItemsLoyalty${OFF};Update Multiple Items
  ${CYAN}updateItemsMaintenance${OFF};Update Multiple Items
  ${CYAN}updateItemsPayroll${OFF};Update Multiple Items
  ${CYAN}updateItemsPerformance${OFF};Update Multiple Items
  ${CYAN}updateItemsPointofSale${OFF};Update Multiple Items
  ${CYAN}updateItemsPolicy${OFF};Update Multiple Items
  ${CYAN}updateItemsProcurement${OFF};Update Multiple Items
  ${CYAN}updateItemsProductionBatch${OFF};Update Multiple Items
  ${CYAN}updateItemsProject${OFF};Update Multiple Items
  ${CYAN}updateItemsPurchaseOrders${OFF};Update Multiple Items
  ${CYAN}updateItemsQualityCheck${OFF};Update Multiple Items
  ${CYAN}updateItemsQuotes${OFF};Update Multiple Items
  ${CYAN}updateItemsRecruit${OFF};Update Multiple Items
  ${CYAN}updateItemsRegulations${OFF};Update Multiple Items
  ${CYAN}updateItemsRentals${OFF};Update Multiple Items
  ${CYAN}updateItemsShipment${OFF};Update Multiple Items
  ${CYAN}updateItemsSocialMedia${OFF};Update Multiple Items
  ${CYAN}updateItemsSocialResponsibility${OFF};Update Multiple Items
  ${CYAN}updateItemsSuppliers${OFF};Update Multiple Items
  ${CYAN}updateItemsSurveys${OFF};Update Multiple Items
  ${CYAN}updateItemsSustainableSupplyChain${OFF};Update Multiple Items
  ${CYAN}updateItemsTaxes${OFF};Update Multiple Items
  ${CYAN}updateItemsTraining${OFF};Update Multiple Items
  ${CYAN}updateItemsTransactions${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsAccounts${OFF};Update an Item
  ${CYAN}updateSingleItemsAppointments${OFF};Update an Item
  ${CYAN}updateSingleItemsBudgets${OFF};Update an Item
  ${CYAN}updateSingleItemsCampaigns${OFF};Update an Item
  ${CYAN}updateSingleItemsCarbonFootprint${OFF};Update an Item
  ${CYAN}updateSingleItemsCompanyAssets${OFF};Update an Item
  ${CYAN}updateSingleItemsContent${OFF};Update an Item
  ${CYAN}updateSingleItemsContracts${OFF};Update an Item
  ${CYAN}updateSingleItemsCrm${OFF};Update an Item
  ${CYAN}updateSingleItemsDepartment${OFF};Update an Item
  ${CYAN}updateSingleItemsDistribution${OFF};Update an Item
  ${CYAN}updateSingleItemsEmailCampaigns${OFF};Update an Item
  ${CYAN}updateSingleItemsEmployeeDirectory${OFF};Update an Item
  ${CYAN}updateSingleItemsEnergyEfficiency${OFF};Update an Item
  ${CYAN}updateSingleItemsEnvironmentalCompliance${OFF};Update an Item
  ${CYAN}updateSingleItemsEvents${OFF};Update an Item
  ${CYAN}updateSingleItemsExpenses${OFF};Update an Item
  ${CYAN}updateSingleItemsFacilities${OFF};Update an Item
  ${CYAN}updateSingleItemsFeedback${OFF};Update an Item
  ${CYAN}updateSingleItemsForum${OFF};Update an Item
  ${CYAN}updateSingleItemsFulfillment${OFF};Update an Item
  ${CYAN}updateSingleItemsGovernanceandEthics${OFF};Update an Item
  ${CYAN}updateSingleItemsHelpdesk${OFF};Update an Item
  ${CYAN}updateSingleItemsInventory${OFF};Update an Item
  ${CYAN}updateSingleItemsInvoices${OFF};Update an Item
  ${CYAN}updateSingleItemsInvoicing${OFF};Update an Item
  ${CYAN}updateSingleItemsLifecycle${OFF};Update an Item
  ${CYAN}updateSingleItemsLiveChat${OFF};Update an Item
  ${CYAN}updateSingleItemsLoyalty${OFF};Update an Item
  ${CYAN}updateSingleItemsMaintenance${OFF};Update an Item
  ${CYAN}updateSingleItemsPayroll${OFF};Update an Item
  ${CYAN}updateSingleItemsPerformance${OFF};Update an Item
  ${CYAN}updateSingleItemsPointofSale${OFF};Update an Item
  ${CYAN}updateSingleItemsPolicy${OFF};Update an Item
  ${CYAN}updateSingleItemsProcurement${OFF};Update an Item
  ${CYAN}updateSingleItemsProductionBatch${OFF};Update an Item
  ${CYAN}updateSingleItemsProject${OFF};Update an Item
  ${CYAN}updateSingleItemsPurchaseOrders${OFF};Update an Item
  ${CYAN}updateSingleItemsQualityCheck${OFF};Update an Item
  ${CYAN}updateSingleItemsQuotes${OFF};Update an Item
  ${CYAN}updateSingleItemsRecruit${OFF};Update an Item
  ${CYAN}updateSingleItemsRegulations${OFF};Update an Item
  ${CYAN}updateSingleItemsRentals${OFF};Update an Item
  ${CYAN}updateSingleItemsShipment${OFF};Update an Item
  ${CYAN}updateSingleItemsSocialMedia${OFF};Update an Item
  ${CYAN}updateSingleItemsSocialResponsibility${OFF};Update an Item
  ${CYAN}updateSingleItemsSuppliers${OFF};Update an Item
  ${CYAN}updateSingleItemsSurveys${OFF};Update an Item
  ${CYAN}updateSingleItemsSustainableSupplyChain${OFF};Update an Item
  ${CYAN}updateSingleItemsTaxes${OFF};Update an Item
  ${CYAN}updateSingleItemsTraining${OFF};Update an Item
  ${CYAN}updateSingleItemsTransactions${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsAccounts]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsAccounts${OFF};Create an Item
  ${CYAN}deleteItemsAccounts${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsAccounts${OFF};Delete an Item
  ${CYAN}readItemsAccounts${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsAccounts${OFF};Retrieve an Item
  ${CYAN}updateItemsAccounts${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsAccounts${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsAppointments]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsAppointments${OFF};Create an Item
  ${CYAN}deleteItemsAppointments${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsAppointments${OFF};Delete an Item
  ${CYAN}readItemsAppointments${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsAppointments${OFF};Retrieve an Item
  ${CYAN}updateItemsAppointments${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsAppointments${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsBudgets]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsBudgets${OFF};Create an Item
  ${CYAN}deleteItemsBudgets${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsBudgets${OFF};Delete an Item
  ${CYAN}readItemsBudgets${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsBudgets${OFF};Retrieve an Item
  ${CYAN}updateItemsBudgets${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsBudgets${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsCampaigns]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsCampaigns${OFF};Create an Item
  ${CYAN}deleteItemsCampaigns${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsCampaigns${OFF};Delete an Item
  ${CYAN}readItemsCampaigns${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsCampaigns${OFF};Retrieve an Item
  ${CYAN}updateItemsCampaigns${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsCampaigns${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsCarbonFootprint]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsCarbonFootprint${OFF};Create an Item
  ${CYAN}deleteItemsCarbonFootprint${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsCarbonFootprint${OFF};Delete an Item
  ${CYAN}readItemsCarbonFootprint${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsCarbonFootprint${OFF};Retrieve an Item
  ${CYAN}updateItemsCarbonFootprint${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsCarbonFootprint${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsCompanyAssets]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsCompanyAssets${OFF};Create an Item
  ${CYAN}deleteItemsCompanyAssets${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsCompanyAssets${OFF};Delete an Item
  ${CYAN}readItemsCompanyAssets${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsCompanyAssets${OFF};Retrieve an Item
  ${CYAN}updateItemsCompanyAssets${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsCompanyAssets${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsContent]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsContent${OFF};Create an Item
  ${CYAN}deleteItemsContent${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsContent${OFF};Delete an Item
  ${CYAN}readItemsContent${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsContent${OFF};Retrieve an Item
  ${CYAN}updateItemsContent${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsContent${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsContracts]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsContracts${OFF};Create an Item
  ${CYAN}deleteItemsContracts${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsContracts${OFF};Delete an Item
  ${CYAN}readItemsContracts${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsContracts${OFF};Retrieve an Item
  ${CYAN}updateItemsContracts${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsContracts${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsCrm]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsCrm${OFF};Create an Item
  ${CYAN}deleteItemsCrm${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsCrm${OFF};Delete an Item
  ${CYAN}readItemsCrm${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsCrm${OFF};Retrieve an Item
  ${CYAN}updateItemsCrm${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsCrm${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsDepartment]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsDepartment${OFF};Create an Item
  ${CYAN}deleteItemsDepartment${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsDepartment${OFF};Delete an Item
  ${CYAN}readItemsDepartment${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsDepartment${OFF};Retrieve an Item
  ${CYAN}updateItemsDepartment${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsDepartment${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsDistribution]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsDistribution${OFF};Create an Item
  ${CYAN}deleteItemsDistribution${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsDistribution${OFF};Delete an Item
  ${CYAN}readItemsDistribution${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsDistribution${OFF};Retrieve an Item
  ${CYAN}updateItemsDistribution${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsDistribution${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsEmailCampaigns]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsEmailCampaigns${OFF};Create an Item
  ${CYAN}deleteItemsEmailCampaigns${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsEmailCampaigns${OFF};Delete an Item
  ${CYAN}readItemsEmailCampaigns${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsEmailCampaigns${OFF};Retrieve an Item
  ${CYAN}updateItemsEmailCampaigns${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsEmailCampaigns${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsEmployeeDirectory]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsEmployeeDirectory${OFF};Create an Item
  ${CYAN}deleteItemsEmployeeDirectory${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsEmployeeDirectory${OFF};Delete an Item
  ${CYAN}readItemsEmployeeDirectory${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsEmployeeDirectory${OFF};Retrieve an Item
  ${CYAN}updateItemsEmployeeDirectory${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsEmployeeDirectory${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsEnergyEfficiency]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsEnergyEfficiency${OFF};Create an Item
  ${CYAN}deleteItemsEnergyEfficiency${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsEnergyEfficiency${OFF};Delete an Item
  ${CYAN}readItemsEnergyEfficiency${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsEnergyEfficiency${OFF};Retrieve an Item
  ${CYAN}updateItemsEnergyEfficiency${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsEnergyEfficiency${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsEnvironmentalCompliance]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsEnvironmentalCompliance${OFF};Create an Item
  ${CYAN}deleteItemsEnvironmentalCompliance${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsEnvironmentalCompliance${OFF};Delete an Item
  ${CYAN}readItemsEnvironmentalCompliance${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsEnvironmentalCompliance${OFF};Retrieve an Item
  ${CYAN}updateItemsEnvironmentalCompliance${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsEnvironmentalCompliance${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsEvents]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsEvents${OFF};Create an Item
  ${CYAN}deleteItemsEvents${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsEvents${OFF};Delete an Item
  ${CYAN}readItemsEvents${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsEvents${OFF};Retrieve an Item
  ${CYAN}updateItemsEvents${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsEvents${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsExpenses]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsExpenses${OFF};Create an Item
  ${CYAN}deleteItemsExpenses${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsExpenses${OFF};Delete an Item
  ${CYAN}readItemsExpenses${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsExpenses${OFF};Retrieve an Item
  ${CYAN}updateItemsExpenses${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsExpenses${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsFacilities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsFacilities${OFF};Create an Item
  ${CYAN}deleteItemsFacilities${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsFacilities${OFF};Delete an Item
  ${CYAN}readItemsFacilities${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsFacilities${OFF};Retrieve an Item
  ${CYAN}updateItemsFacilities${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsFacilities${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsFeedback]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsFeedback${OFF};Create an Item
  ${CYAN}deleteItemsFeedback${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsFeedback${OFF};Delete an Item
  ${CYAN}readItemsFeedback${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsFeedback${OFF};Retrieve an Item
  ${CYAN}updateItemsFeedback${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsFeedback${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsForum]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsForum${OFF};Create an Item
  ${CYAN}deleteItemsForum${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsForum${OFF};Delete an Item
  ${CYAN}readItemsForum${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsForum${OFF};Retrieve an Item
  ${CYAN}updateItemsForum${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsForum${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsFulfillment]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsFulfillment${OFF};Create an Item
  ${CYAN}deleteItemsFulfillment${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsFulfillment${OFF};Delete an Item
  ${CYAN}readItemsFulfillment${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsFulfillment${OFF};Retrieve an Item
  ${CYAN}updateItemsFulfillment${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsFulfillment${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsGovernanceandEthics]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsGovernanceandEthics${OFF};Create an Item
  ${CYAN}deleteItemsGovernanceandEthics${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsGovernanceandEthics${OFF};Delete an Item
  ${CYAN}readItemsGovernanceandEthics${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsGovernanceandEthics${OFF};Retrieve an Item
  ${CYAN}updateItemsGovernanceandEthics${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsGovernanceandEthics${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsHelpdesk]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsHelpdesk${OFF};Create an Item
  ${CYAN}deleteItemsHelpdesk${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsHelpdesk${OFF};Delete an Item
  ${CYAN}readItemsHelpdesk${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsHelpdesk${OFF};Retrieve an Item
  ${CYAN}updateItemsHelpdesk${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsHelpdesk${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsInventory]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsInventory${OFF};Create an Item
  ${CYAN}deleteItemsInventory${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsInventory${OFF};Delete an Item
  ${CYAN}readItemsInventory${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsInventory${OFF};Retrieve an Item
  ${CYAN}updateItemsInventory${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsInventory${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsInvoices]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsInvoices${OFF};Create an Item
  ${CYAN}deleteItemsInvoices${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsInvoices${OFF};Delete an Item
  ${CYAN}readItemsInvoices${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsInvoices${OFF};Retrieve an Item
  ${CYAN}updateItemsInvoices${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsInvoices${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsInvoicing]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsInvoicing${OFF};Create an Item
  ${CYAN}deleteItemsInvoicing${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsInvoicing${OFF};Delete an Item
  ${CYAN}readItemsInvoicing${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsInvoicing${OFF};Retrieve an Item
  ${CYAN}updateItemsInvoicing${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsInvoicing${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsLifecycle]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsLifecycle${OFF};Create an Item
  ${CYAN}deleteItemsLifecycle${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsLifecycle${OFF};Delete an Item
  ${CYAN}readItemsLifecycle${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsLifecycle${OFF};Retrieve an Item
  ${CYAN}updateItemsLifecycle${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsLifecycle${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsLiveChat]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsLiveChat${OFF};Create an Item
  ${CYAN}deleteItemsLiveChat${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsLiveChat${OFF};Delete an Item
  ${CYAN}readItemsLiveChat${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsLiveChat${OFF};Retrieve an Item
  ${CYAN}updateItemsLiveChat${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsLiveChat${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsLoyalty]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsLoyalty${OFF};Create an Item
  ${CYAN}deleteItemsLoyalty${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsLoyalty${OFF};Delete an Item
  ${CYAN}readItemsLoyalty${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsLoyalty${OFF};Retrieve an Item
  ${CYAN}updateItemsLoyalty${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsLoyalty${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsMaintenance]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsMaintenance${OFF};Create an Item
  ${CYAN}deleteItemsMaintenance${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsMaintenance${OFF};Delete an Item
  ${CYAN}readItemsMaintenance${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsMaintenance${OFF};Retrieve an Item
  ${CYAN}updateItemsMaintenance${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsMaintenance${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsPayroll]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsPayroll${OFF};Create an Item
  ${CYAN}deleteItemsPayroll${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsPayroll${OFF};Delete an Item
  ${CYAN}readItemsPayroll${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsPayroll${OFF};Retrieve an Item
  ${CYAN}updateItemsPayroll${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsPayroll${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsPerformance]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsPerformance${OFF};Create an Item
  ${CYAN}deleteItemsPerformance${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsPerformance${OFF};Delete an Item
  ${CYAN}readItemsPerformance${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsPerformance${OFF};Retrieve an Item
  ${CYAN}updateItemsPerformance${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsPerformance${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsPointofSale]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsPointofSale${OFF};Create an Item
  ${CYAN}deleteItemsPointofSale${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsPointofSale${OFF};Delete an Item
  ${CYAN}readItemsPointofSale${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsPointofSale${OFF};Retrieve an Item
  ${CYAN}updateItemsPointofSale${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsPointofSale${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsPolicy]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsPolicy${OFF};Create an Item
  ${CYAN}deleteItemsPolicy${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsPolicy${OFF};Delete an Item
  ${CYAN}readItemsPolicy${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsPolicy${OFF};Retrieve an Item
  ${CYAN}updateItemsPolicy${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsPolicy${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsProcurement]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsProcurement${OFF};Create an Item
  ${CYAN}deleteItemsProcurement${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsProcurement${OFF};Delete an Item
  ${CYAN}readItemsProcurement${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsProcurement${OFF};Retrieve an Item
  ${CYAN}updateItemsProcurement${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsProcurement${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsProductionBatch]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsProductionBatch${OFF};Create an Item
  ${CYAN}deleteItemsProductionBatch${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsProductionBatch${OFF};Delete an Item
  ${CYAN}readItemsProductionBatch${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsProductionBatch${OFF};Retrieve an Item
  ${CYAN}updateItemsProductionBatch${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsProductionBatch${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsProject]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsProject${OFF};Create an Item
  ${CYAN}deleteItemsProject${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsProject${OFF};Delete an Item
  ${CYAN}readItemsProject${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsProject${OFF};Retrieve an Item
  ${CYAN}updateItemsProject${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsProject${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsPurchaseOrders]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsPurchaseOrders${OFF};Create an Item
  ${CYAN}deleteItemsPurchaseOrders${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsPurchaseOrders${OFF};Delete an Item
  ${CYAN}readItemsPurchaseOrders${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsPurchaseOrders${OFF};Retrieve an Item
  ${CYAN}updateItemsPurchaseOrders${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsPurchaseOrders${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsQualityCheck]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsQualityCheck${OFF};Create an Item
  ${CYAN}deleteItemsQualityCheck${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsQualityCheck${OFF};Delete an Item
  ${CYAN}readItemsQualityCheck${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsQualityCheck${OFF};Retrieve an Item
  ${CYAN}updateItemsQualityCheck${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsQualityCheck${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsQuotes]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsQuotes${OFF};Create an Item
  ${CYAN}deleteItemsQuotes${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsQuotes${OFF};Delete an Item
  ${CYAN}readItemsQuotes${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsQuotes${OFF};Retrieve an Item
  ${CYAN}updateItemsQuotes${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsQuotes${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsRecruit]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsRecruit${OFF};Create an Item
  ${CYAN}deleteItemsRecruit${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsRecruit${OFF};Delete an Item
  ${CYAN}readItemsRecruit${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsRecruit${OFF};Retrieve an Item
  ${CYAN}updateItemsRecruit${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsRecruit${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsRegulations]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsRegulations${OFF};Create an Item
  ${CYAN}deleteItemsRegulations${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsRegulations${OFF};Delete an Item
  ${CYAN}readItemsRegulations${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsRegulations${OFF};Retrieve an Item
  ${CYAN}updateItemsRegulations${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsRegulations${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsRentals]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsRentals${OFF};Create an Item
  ${CYAN}deleteItemsRentals${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsRentals${OFF};Delete an Item
  ${CYAN}readItemsRentals${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsRentals${OFF};Retrieve an Item
  ${CYAN}updateItemsRentals${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsRentals${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsShipment]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsShipment${OFF};Create an Item
  ${CYAN}deleteItemsShipment${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsShipment${OFF};Delete an Item
  ${CYAN}readItemsShipment${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsShipment${OFF};Retrieve an Item
  ${CYAN}updateItemsShipment${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsShipment${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsSocialMedia]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsSocialMedia${OFF};Create an Item
  ${CYAN}deleteItemsSocialMedia${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsSocialMedia${OFF};Delete an Item
  ${CYAN}readItemsSocialMedia${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsSocialMedia${OFF};Retrieve an Item
  ${CYAN}updateItemsSocialMedia${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsSocialMedia${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsSocialResponsibility]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsSocialResponsibility${OFF};Create an Item
  ${CYAN}deleteItemsSocialResponsibility${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsSocialResponsibility${OFF};Delete an Item
  ${CYAN}readItemsSocialResponsibility${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsSocialResponsibility${OFF};Retrieve an Item
  ${CYAN}updateItemsSocialResponsibility${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsSocialResponsibility${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsSuppliers]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsSuppliers${OFF};Create an Item
  ${CYAN}deleteItemsSuppliers${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsSuppliers${OFF};Delete an Item
  ${CYAN}readItemsSuppliers${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsSuppliers${OFF};Retrieve an Item
  ${CYAN}updateItemsSuppliers${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsSuppliers${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsSurveys]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsSurveys${OFF};Create an Item
  ${CYAN}deleteItemsSurveys${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsSurveys${OFF};Delete an Item
  ${CYAN}readItemsSurveys${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsSurveys${OFF};Retrieve an Item
  ${CYAN}updateItemsSurveys${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsSurveys${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsSustainableSupplyChain]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsSustainableSupplyChain${OFF};Create an Item
  ${CYAN}deleteItemsSustainableSupplyChain${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsSustainableSupplyChain${OFF};Delete an Item
  ${CYAN}readItemsSustainableSupplyChain${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsSustainableSupplyChain${OFF};Retrieve an Item
  ${CYAN}updateItemsSustainableSupplyChain${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsSustainableSupplyChain${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsTaxes]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsTaxes${OFF};Create an Item
  ${CYAN}deleteItemsTaxes${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsTaxes${OFF};Delete an Item
  ${CYAN}readItemsTaxes${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsTaxes${OFF};Retrieve an Item
  ${CYAN}updateItemsTaxes${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsTaxes${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsTraining]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsTraining${OFF};Create an Item
  ${CYAN}deleteItemsTraining${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsTraining${OFF};Delete an Item
  ${CYAN}readItemsTraining${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsTraining${OFF};Retrieve an Item
  ${CYAN}updateItemsTraining${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsTraining${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[itemsTransactions]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createItemsTransactions${OFF};Create an Item
  ${CYAN}deleteItemsTransactions${OFF};Delete Multiple Items
  ${CYAN}deleteSingleItemsTransactions${OFF};Delete an Item
  ${CYAN}readItemsTransactions${OFF};List Items (AUTH)
  ${CYAN}readSingleItemsTransactions${OFF};Retrieve an Item
  ${CYAN}updateItemsTransactions${OFF};Update Multiple Items
  ${CYAN}updateSingleItemsTransactions${OFF};Update an Item
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[permissions]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getMyPermissions${OFF};List My Permissions
  ${CYAN}getPermission${OFF};Retrieve a Permission
  ${CYAN}getPermissions${OFF};List Permissions
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[presets]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createPreset${OFF};Create a Preset
  ${CYAN}deletePreset${OFF};Delete a Preset (AUTH)
  ${CYAN}deletePresets${OFF};Delete Multiple Presets
  ${CYAN}getPreset${OFF};Retrieve a Preset (AUTH)
  ${CYAN}getPresets${OFF};List Presets (AUTH)
  ${CYAN}updatePreset${OFF};Update a Preset
  ${CYAN}updatePresets${OFF};Update Multiple Presets
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[relations]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getRelation${OFF};Retrieve a Relation
  ${CYAN}getRelations${OFF};List Relations
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[roles]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getRole${OFF};Retrieve a Role
  ${CYAN}getRoles${OFF};List Roles
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[schema]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}schemaApply${OFF};Apply Schema Difference
  ${CYAN}schemaDiff${OFF};Retrieve Schema Difference
  ${CYAN}schemaSnapshot${OFF};Retrieve Schema Snapshot
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[server]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}ping${OFF};Ping
  ${CYAN}serverInfo${OFF};System Info
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[settings]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getSettings${OFF};Retrieve Settings
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[users]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getMe${OFF};Retrieve Current User
  ${CYAN}getUser${OFF};Retrieve a User
  ${CYAN}getUsers${OFF};List Users
  ${CYAN}updateLastUsedPageMe${OFF};Update Last Page
  ${CYAN}updateMe${OFF};Update Current User
  ${CYAN}updateUser${OFF};Update a User
  ${CYAN}updateUsers${OFF};Update Multiple Users
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[utilities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}clearCache${OFF};Clear Cache
  ${CYAN}export${OFF};Export Items
  ${CYAN}hashGenerate${OFF};Hash a string
  ${CYAN}hashVerify${OFF};Hash a string
  ${CYAN}import${OFF};Import Items
  ${CYAN}random${OFF};Get a Random String
  ${CYAN}sort${OFF};Sort Items
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}Options${OFF}"
    echo -e "  -h,--help\\t\\t\\t\\tPrint this help"
    echo -e "  -V,--version\\t\\t\\t\\tPrint API version"
    echo -e "  --about\\t\\t\\t\\tPrint the information about service"
    echo -e "  --host ${CYAN}<url>${OFF}\\t\\t\\t\\tSpecify the host URL "
echo -e "              \\t\\t\\t\\t(e.g. 'https://app.empress.eco')"

    echo -e "  --force\\t\\t\\t\\tForce command invocation in spite of missing"
    echo -e "         \\t\\t\\t\\trequired parameters or wrong content type"
    echo -e "  --dry-run\\t\\t\\t\\tPrint out the cURL command without"
    echo -e "           \\t\\t\\t\\texecuting it"
    echo -e "  -nc,--no-colors\\t\\t\\tEnforce print without colors, otherwise autodetected"
    echo -e "  -ac,--accept ${YELLOW}<mime-type>${OFF}\\t\\tSet the 'Accept' header in the request"
    echo -e "  -ct,--content-type ${YELLOW}<mime-type>${OFF}\\tSet the 'Content-type' header in "
    echo -e "                                \\tthe request"
    echo ""
}


##############################################################################
#
# Print REST service description
#
##############################################################################
print_about() {
    echo ""
    echo -e "${BOLD}${WHITE}Dynamic API Specification command line client (API version 14.0.2)${OFF}"
    echo ""
    echo -e "License: "
    echo -e "Contact: "
    echo ""
read -r -d '' appdescription <<EOF

This is a dynamically generated API specification for all endpoints existing on the current project.
EOF
echo "$appdescription" | paste -sd' ' | fold -sw 80
}


##############################################################################
#
# Print REST api version
#
##############################################################################
print_version() {
    echo ""
    echo -e "${BOLD}Dynamic API Specification command line client (API version 14.0.2)${OFF}"
    echo ""
}

##############################################################################
#
# Print help for createComment operation
#
##############################################################################
print_createComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createComment - Create a Comment${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Creates a new comment." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getActivities operation
#
##############################################################################
print_getActivities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActivities - List Activity Actions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a list of activity actions." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getActivity operation
#
##############################################################################
print_getActivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActivity - Retrieve an Activity Action${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieves the details of an existing activity action. Provide the primary key of the activity action and Empress will return the corresponding information." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getAsset operation
#
##############################################################################
print_getAsset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAsset - Get an Asset${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Image typed files can be dynamically resized and transformed to fit any need." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The id of the file. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}key${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The key of the asset size configured in settings.${YELLOW} Specify as: key=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}transforms${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - A JSON array of image transformations${YELLOW} Specify as: transforms=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}download${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Download the asset to your computer${YELLOW} Specify as: download=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for login operation
#
##############################################################################
print_login_help() {
    echo ""
    echo -e "${BOLD}${WHITE}login - Retrieve a Temporary Access Token${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a Temporary Access Token" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful authentification${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for logout operation
#
##############################################################################
print_logout_help() {
    echo ""
    echo -e "${BOLD}${WHITE}logout - Log Out${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Log Out" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Request successful${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for oauth operation
#
##############################################################################
print_oauth_help() {
    echo ""
    echo -e "${BOLD}${WHITE}oauth - List OAuth Providers${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List configured OAuth providers." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for oauthProvider operation
#
##############################################################################
print_oauthProvider_help() {
    echo ""
    echo -e "${BOLD}${WHITE}oauthProvider - Authenticated using an OAuth provider${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Start OAuth flow using the specified provider" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}provider${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Key of the activated OAuth provider. ${YELLOW}Specify as: provider=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}redirect${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.${YELLOW} Specify as: redirect=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for passwordRequest operation
#
##############################################################################
print_passwordRequest_help() {
    echo ""
    echo -e "${BOLD}${WHITE}passwordRequest - Request a Password Reset${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Request a reset password email to be send." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for passwordReset operation
#
##############################################################################
print_passwordReset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}passwordReset - Reset a Password${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for refresh operation
#
##############################################################################
print_refresh_help() {
    echo ""
    echo -e "${BOLD}${WHITE}refresh - Refresh Token${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Refresh a Temporary Access Token." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCollection operation
#
##############################################################################
print_getCollection_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCollection - Retrieve a Collection${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieves the details of a single collection." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier of the collection. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCollections operation
#
##############################################################################
print_getCollections_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCollections - List Collections${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a list of the collections available in the project." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getDisplays operation
#
##############################################################################
print_getDisplays_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDisplays - List Displays${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all installed custom displays." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getInterfaces operation
#
##############################################################################
print_getInterfaces_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getInterfaces - List Interfaces${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all installed custom interfaces." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLayouts operation
#
##############################################################################
print_getLayouts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLayouts - List Layouts${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all installed custom layouts." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getModules operation
#
##############################################################################
print_getModules_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getModules - List Modules${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all installed custom modules." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCollectionField operation
#
##############################################################################
print_getCollectionField_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCollectionField - Retrieve a Field${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieves the details of a single field in a given collection." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}collection${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier of the collection the item resides in. ${YELLOW}Specify as: collection=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier of the field. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getCollectionFields operation
#
##############################################################################
print_getCollectionFields_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCollectionFields - List Fields in Collection${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a list of the fields available in the given collection." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}collection${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier of the collection the item resides in. ${YELLOW}Specify as: collection=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFields operation
#
##############################################################################
print_getFields_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFields - List All Fields${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a list of the fields available in the project." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createFile operation
#
##############################################################################
print_createFile_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createFile - Create a File${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new file" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteFile operation
#
##############################################################################
print_deleteFile_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteFile - Delete a File${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing file." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteFiles operation
#
##############################################################################
print_deleteFiles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteFiles - Delete Multiple Files${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing files." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFile operation
#
##############################################################################
print_getFile_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFile - Retrieve a Files${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single file by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFiles operation
#
##############################################################################
print_getFiles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFiles - List Files${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the files." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateFile operation
#
##############################################################################
print_updateFile_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateFile - Update a File${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing file, and/or replace it's file contents." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateFiles operation
#
##############################################################################
print_updateFiles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateFiles - Update Multiple Files${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple files at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFlow operation
#
##############################################################################
print_getFlow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFlow - Retrieve a Flow${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single flow by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFlows operation
#
##############################################################################
print_getFlows_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFlows - List Flows${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get all flows." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createFolder operation
#
##############################################################################
print_createFolder_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createFolder - Create a Folder${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new folder." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteFolder operation
#
##############################################################################
print_deleteFolder_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteFolder - Delete a Folder${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing folder" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteFolders operation
#
##############################################################################
print_deleteFolders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteFolders - Delete Multiple Folders${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing folders." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFolder operation
#
##############################################################################
print_getFolder_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFolder - Retrieve a Folder${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single folder by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getFolders operation
#
##############################################################################
print_getFolders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getFolders - List Folders${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the folders." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateFolder operation
#
##############################################################################
print_updateFolder_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateFolder - Update a Folder${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing folder" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateFolders operation
#
##############################################################################
print_updateFolders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateFolders - Update Multiple Folders${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple folders at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsAccounts operation
#
##############################################################################
print_createItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsAccounts - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new accounts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsAppointments operation
#
##############################################################################
print_createItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsAppointments - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new appointments item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsBudgets operation
#
##############################################################################
print_createItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsBudgets - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new budgets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCampaigns operation
#
##############################################################################
print_createItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCampaigns - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCarbonFootprint operation
#
##############################################################################
print_createItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCarbonFootprint - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new carbon_footprint item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCompanyAssets operation
#
##############################################################################
print_createItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCompanyAssets - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new company_assets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsContent operation
#
##############################################################################
print_createItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsContent - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new content item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsContracts operation
#
##############################################################################
print_createItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsContracts - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new contracts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCrm operation
#
##############################################################################
print_createItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCrm - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new crm item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsDepartment operation
#
##############################################################################
print_createItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsDepartment - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new department item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsDistribution operation
#
##############################################################################
print_createItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsDistribution - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new distribution item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEmailCampaigns operation
#
##############################################################################
print_createItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEmailCampaigns - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new email_campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEmployeeDirectory operation
#
##############################################################################
print_createItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEmployeeDirectory - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new employee_directory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEnergyEfficiency operation
#
##############################################################################
print_createItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEnergyEfficiency - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new energy_efficiency item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEnvironmentalCompliance operation
#
##############################################################################
print_createItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEnvironmentalCompliance - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new environmental_compliance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEvents operation
#
##############################################################################
print_createItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEvents - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new events item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsExpenses operation
#
##############################################################################
print_createItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsExpenses - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new expenses item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsFacilities operation
#
##############################################################################
print_createItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsFacilities - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new facilities item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsFeedback operation
#
##############################################################################
print_createItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsFeedback - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new feedback item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsForum operation
#
##############################################################################
print_createItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsForum - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new forum item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsFulfillment operation
#
##############################################################################
print_createItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsFulfillment - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new fulfillment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsGovernanceandEthics operation
#
##############################################################################
print_createItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsGovernanceandEthics - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new governance_and_ethics item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsHelpdesk operation
#
##############################################################################
print_createItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsHelpdesk - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new helpdesk item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsInventory operation
#
##############################################################################
print_createItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsInventory - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new inventory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsInvoices operation
#
##############################################################################
print_createItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsInvoices - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new invoices item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsInvoicing operation
#
##############################################################################
print_createItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsInvoicing - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new invoicing item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsLifecycle operation
#
##############################################################################
print_createItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsLifecycle - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new lifecycle item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsLiveChat operation
#
##############################################################################
print_createItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsLiveChat - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new live_chat item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsLoyalty operation
#
##############################################################################
print_createItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsLoyalty - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new loyalty item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsMaintenance operation
#
##############################################################################
print_createItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsMaintenance - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new maintenance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPayroll operation
#
##############################################################################
print_createItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPayroll - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new payroll item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPerformance operation
#
##############################################################################
print_createItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPerformance - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new performance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPointofSale operation
#
##############################################################################
print_createItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPointofSale - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new point_of_sale item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPolicy operation
#
##############################################################################
print_createItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPolicy - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new policy item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsProcurement operation
#
##############################################################################
print_createItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsProcurement - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new procurement item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsProductionBatch operation
#
##############################################################################
print_createItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsProductionBatch - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new production_batch item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsProject operation
#
##############################################################################
print_createItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsProject - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new project item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPurchaseOrders operation
#
##############################################################################
print_createItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPurchaseOrders - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new purchase_orders item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsQualityCheck operation
#
##############################################################################
print_createItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsQualityCheck - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new quality_check item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsQuotes operation
#
##############################################################################
print_createItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsQuotes - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new quotes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsRecruit operation
#
##############################################################################
print_createItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsRecruit - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new recruit item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsRegulations operation
#
##############################################################################
print_createItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsRegulations - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new regulations item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsRentals operation
#
##############################################################################
print_createItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsRentals - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new rentals item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsShipment operation
#
##############################################################################
print_createItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsShipment - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new shipment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSocialMedia operation
#
##############################################################################
print_createItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSocialMedia - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new social_media item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSocialResponsibility operation
#
##############################################################################
print_createItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSocialResponsibility - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new social_responsibility item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSuppliers operation
#
##############################################################################
print_createItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSuppliers - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new suppliers item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSurveys operation
#
##############################################################################
print_createItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSurveys - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new surveys item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSustainableSupplyChain operation
#
##############################################################################
print_createItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSustainableSupplyChain - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new sustainable_supply_chain item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsTaxes operation
#
##############################################################################
print_createItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsTaxes - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new taxes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsTraining operation
#
##############################################################################
print_createItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsTraining - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new training item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsTransactions operation
#
##############################################################################
print_createItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsTransactions - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new transactions item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsAccounts operation
#
##############################################################################
print_deleteItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsAccounts - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing accounts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsAppointments operation
#
##############################################################################
print_deleteItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsAppointments - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing appointments items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsBudgets operation
#
##############################################################################
print_deleteItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsBudgets - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing budgets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCampaigns operation
#
##############################################################################
print_deleteItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCampaigns - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCarbonFootprint operation
#
##############################################################################
print_deleteItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCarbonFootprint - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing carbon_footprint items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCompanyAssets operation
#
##############################################################################
print_deleteItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCompanyAssets - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing company_assets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsContent operation
#
##############################################################################
print_deleteItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsContent - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing content items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsContracts operation
#
##############################################################################
print_deleteItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsContracts - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing contracts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCrm operation
#
##############################################################################
print_deleteItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCrm - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing crm items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsDepartment operation
#
##############################################################################
print_deleteItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsDepartment - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing department items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsDistribution operation
#
##############################################################################
print_deleteItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsDistribution - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing distribution items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEmailCampaigns operation
#
##############################################################################
print_deleteItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEmailCampaigns - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing email_campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEmployeeDirectory operation
#
##############################################################################
print_deleteItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEmployeeDirectory - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing employee_directory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEnergyEfficiency operation
#
##############################################################################
print_deleteItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEnergyEfficiency - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing energy_efficiency items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEnvironmentalCompliance operation
#
##############################################################################
print_deleteItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEnvironmentalCompliance - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing environmental_compliance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEvents operation
#
##############################################################################
print_deleteItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEvents - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing events items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsExpenses operation
#
##############################################################################
print_deleteItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsExpenses - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing expenses items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsFacilities operation
#
##############################################################################
print_deleteItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsFacilities - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing facilities items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsFeedback operation
#
##############################################################################
print_deleteItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsFeedback - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing feedback items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsForum operation
#
##############################################################################
print_deleteItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsForum - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing forum items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsFulfillment operation
#
##############################################################################
print_deleteItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsFulfillment - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing fulfillment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsGovernanceandEthics operation
#
##############################################################################
print_deleteItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsGovernanceandEthics - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing governance_and_ethics items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsHelpdesk operation
#
##############################################################################
print_deleteItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsHelpdesk - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing helpdesk items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsInventory operation
#
##############################################################################
print_deleteItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsInventory - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing inventory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsInvoices operation
#
##############################################################################
print_deleteItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsInvoices - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing invoices items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsInvoicing operation
#
##############################################################################
print_deleteItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsInvoicing - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing invoicing items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsLifecycle operation
#
##############################################################################
print_deleteItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsLifecycle - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing lifecycle items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsLiveChat operation
#
##############################################################################
print_deleteItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsLiveChat - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing live_chat items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsLoyalty operation
#
##############################################################################
print_deleteItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsLoyalty - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing loyalty items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsMaintenance operation
#
##############################################################################
print_deleteItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsMaintenance - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing maintenance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPayroll operation
#
##############################################################################
print_deleteItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPayroll - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing payroll items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPerformance operation
#
##############################################################################
print_deleteItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPerformance - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing performance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPointofSale operation
#
##############################################################################
print_deleteItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPointofSale - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing point_of_sale items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPolicy operation
#
##############################################################################
print_deleteItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPolicy - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing policy items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsProcurement operation
#
##############################################################################
print_deleteItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsProcurement - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing procurement items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsProductionBatch operation
#
##############################################################################
print_deleteItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsProductionBatch - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing production_batch items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsProject operation
#
##############################################################################
print_deleteItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsProject - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing project items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPurchaseOrders operation
#
##############################################################################
print_deleteItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPurchaseOrders - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing purchase_orders items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsQualityCheck operation
#
##############################################################################
print_deleteItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsQualityCheck - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing quality_check items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsQuotes operation
#
##############################################################################
print_deleteItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsQuotes - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing quotes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsRecruit operation
#
##############################################################################
print_deleteItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsRecruit - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing recruit items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsRegulations operation
#
##############################################################################
print_deleteItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsRegulations - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing regulations items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsRentals operation
#
##############################################################################
print_deleteItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsRentals - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing rentals items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsShipment operation
#
##############################################################################
print_deleteItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsShipment - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing shipment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSocialMedia operation
#
##############################################################################
print_deleteItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSocialMedia - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing social_media items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSocialResponsibility operation
#
##############################################################################
print_deleteItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSocialResponsibility - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing social_responsibility items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSuppliers operation
#
##############################################################################
print_deleteItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSuppliers - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing suppliers items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSurveys operation
#
##############################################################################
print_deleteItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSurveys - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing surveys items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSustainableSupplyChain operation
#
##############################################################################
print_deleteItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSustainableSupplyChain - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing sustainable_supply_chain items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsTaxes operation
#
##############################################################################
print_deleteItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsTaxes - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing taxes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsTraining operation
#
##############################################################################
print_deleteItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsTraining - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing training items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsTransactions operation
#
##############################################################################
print_deleteItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsTransactions - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing transactions items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsAccounts operation
#
##############################################################################
print_deleteSingleItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsAccounts - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing accounts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsAppointments operation
#
##############################################################################
print_deleteSingleItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsAppointments - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing appointments item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsBudgets operation
#
##############################################################################
print_deleteSingleItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsBudgets - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing budgets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCampaigns operation
#
##############################################################################
print_deleteSingleItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCampaigns - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCarbonFootprint operation
#
##############################################################################
print_deleteSingleItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCarbonFootprint - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing carbon_footprint item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCompanyAssets operation
#
##############################################################################
print_deleteSingleItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCompanyAssets - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing company_assets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsContent operation
#
##############################################################################
print_deleteSingleItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsContent - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing content item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsContracts operation
#
##############################################################################
print_deleteSingleItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsContracts - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing contracts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCrm operation
#
##############################################################################
print_deleteSingleItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCrm - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing crm item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsDepartment operation
#
##############################################################################
print_deleteSingleItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsDepartment - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing department item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsDistribution operation
#
##############################################################################
print_deleteSingleItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsDistribution - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing distribution item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEmailCampaigns operation
#
##############################################################################
print_deleteSingleItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEmailCampaigns - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing email_campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEmployeeDirectory operation
#
##############################################################################
print_deleteSingleItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEmployeeDirectory - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing employee_directory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEnergyEfficiency operation
#
##############################################################################
print_deleteSingleItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEnergyEfficiency - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing energy_efficiency item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEnvironmentalCompliance operation
#
##############################################################################
print_deleteSingleItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEnvironmentalCompliance - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing environmental_compliance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEvents operation
#
##############################################################################
print_deleteSingleItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEvents - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing events item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsExpenses operation
#
##############################################################################
print_deleteSingleItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsExpenses - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing expenses item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsFacilities operation
#
##############################################################################
print_deleteSingleItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsFacilities - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing facilities item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsFeedback operation
#
##############################################################################
print_deleteSingleItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsFeedback - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing feedback item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsForum operation
#
##############################################################################
print_deleteSingleItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsForum - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing forum item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsFulfillment operation
#
##############################################################################
print_deleteSingleItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsFulfillment - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing fulfillment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsGovernanceandEthics operation
#
##############################################################################
print_deleteSingleItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsGovernanceandEthics - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing governance_and_ethics item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsHelpdesk operation
#
##############################################################################
print_deleteSingleItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsHelpdesk - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing helpdesk item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsInventory operation
#
##############################################################################
print_deleteSingleItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsInventory - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing inventory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsInvoices operation
#
##############################################################################
print_deleteSingleItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsInvoices - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing invoices item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsInvoicing operation
#
##############################################################################
print_deleteSingleItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsInvoicing - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing invoicing item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsLifecycle operation
#
##############################################################################
print_deleteSingleItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsLifecycle - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing lifecycle item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsLiveChat operation
#
##############################################################################
print_deleteSingleItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsLiveChat - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing live_chat item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsLoyalty operation
#
##############################################################################
print_deleteSingleItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsLoyalty - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing loyalty item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsMaintenance operation
#
##############################################################################
print_deleteSingleItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsMaintenance - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing maintenance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPayroll operation
#
##############################################################################
print_deleteSingleItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPayroll - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing payroll item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPerformance operation
#
##############################################################################
print_deleteSingleItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPerformance - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing performance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPointofSale operation
#
##############################################################################
print_deleteSingleItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPointofSale - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing point_of_sale item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPolicy operation
#
##############################################################################
print_deleteSingleItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPolicy - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing policy item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsProcurement operation
#
##############################################################################
print_deleteSingleItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsProcurement - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing procurement item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsProductionBatch operation
#
##############################################################################
print_deleteSingleItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsProductionBatch - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing production_batch item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsProject operation
#
##############################################################################
print_deleteSingleItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsProject - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing project item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPurchaseOrders operation
#
##############################################################################
print_deleteSingleItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPurchaseOrders - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing purchase_orders item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsQualityCheck operation
#
##############################################################################
print_deleteSingleItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsQualityCheck - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing quality_check item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsQuotes operation
#
##############################################################################
print_deleteSingleItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsQuotes - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing quotes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsRecruit operation
#
##############################################################################
print_deleteSingleItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsRecruit - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing recruit item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsRegulations operation
#
##############################################################################
print_deleteSingleItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsRegulations - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing regulations item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsRentals operation
#
##############################################################################
print_deleteSingleItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsRentals - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing rentals item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsShipment operation
#
##############################################################################
print_deleteSingleItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsShipment - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing shipment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSocialMedia operation
#
##############################################################################
print_deleteSingleItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSocialMedia - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing social_media item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSocialResponsibility operation
#
##############################################################################
print_deleteSingleItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSocialResponsibility - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing social_responsibility item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSuppliers operation
#
##############################################################################
print_deleteSingleItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSuppliers - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing suppliers item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSurveys operation
#
##############################################################################
print_deleteSingleItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSurveys - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing surveys item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSustainableSupplyChain operation
#
##############################################################################
print_deleteSingleItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSustainableSupplyChain - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing sustainable_supply_chain item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsTaxes operation
#
##############################################################################
print_deleteSingleItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsTaxes - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing taxes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsTraining operation
#
##############################################################################
print_deleteSingleItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsTraining - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing training item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsTransactions operation
#
##############################################################################
print_deleteSingleItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsTransactions - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing transactions item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsAccounts operation
#
##############################################################################
print_readItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsAccounts - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the accounts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsAppointments operation
#
##############################################################################
print_readItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsAppointments - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the appointments items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsBudgets operation
#
##############################################################################
print_readItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsBudgets - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the budgets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCampaigns operation
#
##############################################################################
print_readItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCampaigns - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCarbonFootprint operation
#
##############################################################################
print_readItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCarbonFootprint - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the carbon_footprint items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCompanyAssets operation
#
##############################################################################
print_readItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCompanyAssets - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the company_assets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsContent operation
#
##############################################################################
print_readItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsContent - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the content items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsContracts operation
#
##############################################################################
print_readItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsContracts - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the contracts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCrm operation
#
##############################################################################
print_readItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCrm - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the crm items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsDepartment operation
#
##############################################################################
print_readItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsDepartment - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the department items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsDistribution operation
#
##############################################################################
print_readItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsDistribution - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the distribution items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEmailCampaigns operation
#
##############################################################################
print_readItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEmailCampaigns - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the email_campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEmployeeDirectory operation
#
##############################################################################
print_readItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEmployeeDirectory - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the employee_directory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEnergyEfficiency operation
#
##############################################################################
print_readItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEnergyEfficiency - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the energy_efficiency items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEnvironmentalCompliance operation
#
##############################################################################
print_readItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEnvironmentalCompliance - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the environmental_compliance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEvents operation
#
##############################################################################
print_readItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEvents - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the events items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsExpenses operation
#
##############################################################################
print_readItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsExpenses - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the expenses items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsFacilities operation
#
##############################################################################
print_readItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsFacilities - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the facilities items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsFeedback operation
#
##############################################################################
print_readItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsFeedback - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the feedback items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsForum operation
#
##############################################################################
print_readItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsForum - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the forum items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsFulfillment operation
#
##############################################################################
print_readItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsFulfillment - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the fulfillment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsGovernanceandEthics operation
#
##############################################################################
print_readItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsGovernanceandEthics - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the governance_and_ethics items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsHelpdesk operation
#
##############################################################################
print_readItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsHelpdesk - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the helpdesk items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsInventory operation
#
##############################################################################
print_readItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsInventory - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the inventory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsInvoices operation
#
##############################################################################
print_readItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsInvoices - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the invoices items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsInvoicing operation
#
##############################################################################
print_readItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsInvoicing - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the invoicing items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsLifecycle operation
#
##############################################################################
print_readItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsLifecycle - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the lifecycle items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsLiveChat operation
#
##############################################################################
print_readItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsLiveChat - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the live_chat items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsLoyalty operation
#
##############################################################################
print_readItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsLoyalty - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the loyalty items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsMaintenance operation
#
##############################################################################
print_readItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsMaintenance - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the maintenance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPayroll operation
#
##############################################################################
print_readItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPayroll - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the payroll items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPerformance operation
#
##############################################################################
print_readItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPerformance - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the performance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPointofSale operation
#
##############################################################################
print_readItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPointofSale - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the point_of_sale items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPolicy operation
#
##############################################################################
print_readItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPolicy - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the policy items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsProcurement operation
#
##############################################################################
print_readItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsProcurement - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the procurement items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsProductionBatch operation
#
##############################################################################
print_readItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsProductionBatch - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the production_batch items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsProject operation
#
##############################################################################
print_readItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsProject - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the project items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPurchaseOrders operation
#
##############################################################################
print_readItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPurchaseOrders - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the purchase_orders items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsQualityCheck operation
#
##############################################################################
print_readItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsQualityCheck - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the quality_check items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsQuotes operation
#
##############################################################################
print_readItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsQuotes - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the quotes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsRecruit operation
#
##############################################################################
print_readItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsRecruit - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the recruit items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsRegulations operation
#
##############################################################################
print_readItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsRegulations - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the regulations items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsRentals operation
#
##############################################################################
print_readItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsRentals - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the rentals items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsShipment operation
#
##############################################################################
print_readItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsShipment - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the shipment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSocialMedia operation
#
##############################################################################
print_readItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSocialMedia - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the social_media items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSocialResponsibility operation
#
##############################################################################
print_readItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSocialResponsibility - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the social_responsibility items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSuppliers operation
#
##############################################################################
print_readItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSuppliers - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the suppliers items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSurveys operation
#
##############################################################################
print_readItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSurveys - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the surveys items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSustainableSupplyChain operation
#
##############################################################################
print_readItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSustainableSupplyChain - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the sustainable_supply_chain items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsTaxes operation
#
##############################################################################
print_readItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsTaxes - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the taxes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsTraining operation
#
##############################################################################
print_readItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsTraining - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the training items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsTransactions operation
#
##############################################################################
print_readItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsTransactions - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the transactions items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsAccounts operation
#
##############################################################################
print_readSingleItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsAccounts - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single accounts item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsAppointments operation
#
##############################################################################
print_readSingleItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsAppointments - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single appointments item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsBudgets operation
#
##############################################################################
print_readSingleItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsBudgets - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single budgets item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCampaigns operation
#
##############################################################################
print_readSingleItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCampaigns - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single campaigns item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCarbonFootprint operation
#
##############################################################################
print_readSingleItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCarbonFootprint - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single carbon_footprint item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCompanyAssets operation
#
##############################################################################
print_readSingleItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCompanyAssets - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single company_assets item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsContent operation
#
##############################################################################
print_readSingleItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsContent - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single content item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsContracts operation
#
##############################################################################
print_readSingleItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsContracts - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single contracts item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCrm operation
#
##############################################################################
print_readSingleItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCrm - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single crm item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsDepartment operation
#
##############################################################################
print_readSingleItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsDepartment - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single department item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsDistribution operation
#
##############################################################################
print_readSingleItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsDistribution - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single distribution item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEmailCampaigns operation
#
##############################################################################
print_readSingleItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEmailCampaigns - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single email_campaigns item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEmployeeDirectory operation
#
##############################################################################
print_readSingleItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEmployeeDirectory - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single employee_directory item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEnergyEfficiency operation
#
##############################################################################
print_readSingleItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEnergyEfficiency - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single energy_efficiency item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEnvironmentalCompliance operation
#
##############################################################################
print_readSingleItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEnvironmentalCompliance - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single environmental_compliance item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEvents operation
#
##############################################################################
print_readSingleItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEvents - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single events item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsExpenses operation
#
##############################################################################
print_readSingleItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsExpenses - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single expenses item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsFacilities operation
#
##############################################################################
print_readSingleItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsFacilities - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single facilities item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsFeedback operation
#
##############################################################################
print_readSingleItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsFeedback - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single feedback item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsForum operation
#
##############################################################################
print_readSingleItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsForum - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single forum item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsFulfillment operation
#
##############################################################################
print_readSingleItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsFulfillment - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single fulfillment item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsGovernanceandEthics operation
#
##############################################################################
print_readSingleItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsGovernanceandEthics - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single governance_and_ethics item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsHelpdesk operation
#
##############################################################################
print_readSingleItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsHelpdesk - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single helpdesk item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsInventory operation
#
##############################################################################
print_readSingleItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsInventory - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single inventory item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsInvoices operation
#
##############################################################################
print_readSingleItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsInvoices - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single invoices item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsInvoicing operation
#
##############################################################################
print_readSingleItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsInvoicing - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single invoicing item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsLifecycle operation
#
##############################################################################
print_readSingleItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsLifecycle - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single lifecycle item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsLiveChat operation
#
##############################################################################
print_readSingleItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsLiveChat - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single live_chat item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsLoyalty operation
#
##############################################################################
print_readSingleItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsLoyalty - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single loyalty item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsMaintenance operation
#
##############################################################################
print_readSingleItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsMaintenance - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single maintenance item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPayroll operation
#
##############################################################################
print_readSingleItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPayroll - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single payroll item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPerformance operation
#
##############################################################################
print_readSingleItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPerformance - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single performance item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPointofSale operation
#
##############################################################################
print_readSingleItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPointofSale - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single point_of_sale item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPolicy operation
#
##############################################################################
print_readSingleItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPolicy - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single policy item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsProcurement operation
#
##############################################################################
print_readSingleItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsProcurement - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single procurement item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsProductionBatch operation
#
##############################################################################
print_readSingleItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsProductionBatch - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single production_batch item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsProject operation
#
##############################################################################
print_readSingleItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsProject - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single project item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPurchaseOrders operation
#
##############################################################################
print_readSingleItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPurchaseOrders - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single purchase_orders item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsQualityCheck operation
#
##############################################################################
print_readSingleItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsQualityCheck - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single quality_check item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsQuotes operation
#
##############################################################################
print_readSingleItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsQuotes - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single quotes item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsRecruit operation
#
##############################################################################
print_readSingleItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsRecruit - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single recruit item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsRegulations operation
#
##############################################################################
print_readSingleItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsRegulations - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single regulations item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsRentals operation
#
##############################################################################
print_readSingleItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsRentals - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single rentals item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsShipment operation
#
##############################################################################
print_readSingleItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsShipment - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single shipment item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSocialMedia operation
#
##############################################################################
print_readSingleItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSocialMedia - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single social_media item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSocialResponsibility operation
#
##############################################################################
print_readSingleItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSocialResponsibility - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single social_responsibility item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSuppliers operation
#
##############################################################################
print_readSingleItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSuppliers - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single suppliers item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSurveys operation
#
##############################################################################
print_readSingleItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSurveys - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single surveys item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSustainableSupplyChain operation
#
##############################################################################
print_readSingleItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSustainableSupplyChain - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single sustainable_supply_chain item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsTaxes operation
#
##############################################################################
print_readSingleItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsTaxes - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single taxes item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsTraining operation
#
##############################################################################
print_readSingleItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsTraining - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single training item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsTransactions operation
#
##############################################################################
print_readSingleItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsTransactions - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single transactions item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsAccounts operation
#
##############################################################################
print_updateItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsAccounts - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple accounts items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsAppointments operation
#
##############################################################################
print_updateItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsAppointments - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple appointments items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsBudgets operation
#
##############################################################################
print_updateItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsBudgets - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple budgets items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCampaigns operation
#
##############################################################################
print_updateItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCampaigns - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple campaigns items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCarbonFootprint operation
#
##############################################################################
print_updateItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCarbonFootprint - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple carbon_footprint items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCompanyAssets operation
#
##############################################################################
print_updateItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCompanyAssets - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple company_assets items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsContent operation
#
##############################################################################
print_updateItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsContent - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple content items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsContracts operation
#
##############################################################################
print_updateItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsContracts - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple contracts items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCrm operation
#
##############################################################################
print_updateItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCrm - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple crm items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsDepartment operation
#
##############################################################################
print_updateItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsDepartment - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple department items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsDistribution operation
#
##############################################################################
print_updateItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsDistribution - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple distribution items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEmailCampaigns operation
#
##############################################################################
print_updateItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEmailCampaigns - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple email_campaigns items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEmployeeDirectory operation
#
##############################################################################
print_updateItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEmployeeDirectory - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple employee_directory items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEnergyEfficiency operation
#
##############################################################################
print_updateItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEnergyEfficiency - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple energy_efficiency items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEnvironmentalCompliance operation
#
##############################################################################
print_updateItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEnvironmentalCompliance - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple environmental_compliance items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEvents operation
#
##############################################################################
print_updateItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEvents - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple events items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsExpenses operation
#
##############################################################################
print_updateItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsExpenses - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple expenses items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsFacilities operation
#
##############################################################################
print_updateItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsFacilities - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple facilities items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsFeedback operation
#
##############################################################################
print_updateItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsFeedback - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple feedback items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsForum operation
#
##############################################################################
print_updateItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsForum - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple forum items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsFulfillment operation
#
##############################################################################
print_updateItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsFulfillment - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple fulfillment items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsGovernanceandEthics operation
#
##############################################################################
print_updateItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsGovernanceandEthics - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple governance_and_ethics items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsHelpdesk operation
#
##############################################################################
print_updateItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsHelpdesk - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple helpdesk items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsInventory operation
#
##############################################################################
print_updateItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsInventory - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple inventory items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsInvoices operation
#
##############################################################################
print_updateItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsInvoices - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple invoices items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsInvoicing operation
#
##############################################################################
print_updateItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsInvoicing - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple invoicing items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsLifecycle operation
#
##############################################################################
print_updateItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsLifecycle - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple lifecycle items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsLiveChat operation
#
##############################################################################
print_updateItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsLiveChat - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple live_chat items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsLoyalty operation
#
##############################################################################
print_updateItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsLoyalty - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple loyalty items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsMaintenance operation
#
##############################################################################
print_updateItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsMaintenance - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple maintenance items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPayroll operation
#
##############################################################################
print_updateItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPayroll - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple payroll items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPerformance operation
#
##############################################################################
print_updateItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPerformance - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple performance items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPointofSale operation
#
##############################################################################
print_updateItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPointofSale - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple point_of_sale items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPolicy operation
#
##############################################################################
print_updateItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPolicy - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple policy items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsProcurement operation
#
##############################################################################
print_updateItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsProcurement - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple procurement items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsProductionBatch operation
#
##############################################################################
print_updateItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsProductionBatch - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple production_batch items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsProject operation
#
##############################################################################
print_updateItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsProject - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple project items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPurchaseOrders operation
#
##############################################################################
print_updateItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPurchaseOrders - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple purchase_orders items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsQualityCheck operation
#
##############################################################################
print_updateItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsQualityCheck - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple quality_check items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsQuotes operation
#
##############################################################################
print_updateItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsQuotes - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple quotes items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsRecruit operation
#
##############################################################################
print_updateItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsRecruit - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple recruit items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsRegulations operation
#
##############################################################################
print_updateItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsRegulations - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple regulations items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsRentals operation
#
##############################################################################
print_updateItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsRentals - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple rentals items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsShipment operation
#
##############################################################################
print_updateItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsShipment - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple shipment items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSocialMedia operation
#
##############################################################################
print_updateItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSocialMedia - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple social_media items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSocialResponsibility operation
#
##############################################################################
print_updateItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSocialResponsibility - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple social_responsibility items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSuppliers operation
#
##############################################################################
print_updateItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSuppliers - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple suppliers items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSurveys operation
#
##############################################################################
print_updateItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSurveys - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple surveys items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSustainableSupplyChain operation
#
##############################################################################
print_updateItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSustainableSupplyChain - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple sustainable_supply_chain items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsTaxes operation
#
##############################################################################
print_updateItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsTaxes - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple taxes items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsTraining operation
#
##############################################################################
print_updateItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsTraining - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple training items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsTransactions operation
#
##############################################################################
print_updateItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsTransactions - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple transactions items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsAccounts operation
#
##############################################################################
print_updateSingleItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsAccounts - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing accounts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsAppointments operation
#
##############################################################################
print_updateSingleItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsAppointments - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing appointments item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsBudgets operation
#
##############################################################################
print_updateSingleItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsBudgets - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing budgets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCampaigns operation
#
##############################################################################
print_updateSingleItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCampaigns - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCarbonFootprint operation
#
##############################################################################
print_updateSingleItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCarbonFootprint - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing carbon_footprint item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCompanyAssets operation
#
##############################################################################
print_updateSingleItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCompanyAssets - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing company_assets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsContent operation
#
##############################################################################
print_updateSingleItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsContent - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing content item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsContracts operation
#
##############################################################################
print_updateSingleItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsContracts - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing contracts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCrm operation
#
##############################################################################
print_updateSingleItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCrm - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing crm item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsDepartment operation
#
##############################################################################
print_updateSingleItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsDepartment - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing department item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsDistribution operation
#
##############################################################################
print_updateSingleItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsDistribution - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing distribution item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEmailCampaigns operation
#
##############################################################################
print_updateSingleItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEmailCampaigns - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing email_campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEmployeeDirectory operation
#
##############################################################################
print_updateSingleItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEmployeeDirectory - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing employee_directory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEnergyEfficiency operation
#
##############################################################################
print_updateSingleItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEnergyEfficiency - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing energy_efficiency item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEnvironmentalCompliance operation
#
##############################################################################
print_updateSingleItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEnvironmentalCompliance - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing environmental_compliance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEvents operation
#
##############################################################################
print_updateSingleItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEvents - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing events item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsExpenses operation
#
##############################################################################
print_updateSingleItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsExpenses - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing expenses item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsFacilities operation
#
##############################################################################
print_updateSingleItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsFacilities - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing facilities item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsFeedback operation
#
##############################################################################
print_updateSingleItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsFeedback - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing feedback item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsForum operation
#
##############################################################################
print_updateSingleItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsForum - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing forum item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsFulfillment operation
#
##############################################################################
print_updateSingleItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsFulfillment - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing fulfillment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsGovernanceandEthics operation
#
##############################################################################
print_updateSingleItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsGovernanceandEthics - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing governance_and_ethics item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsHelpdesk operation
#
##############################################################################
print_updateSingleItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsHelpdesk - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing helpdesk item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsInventory operation
#
##############################################################################
print_updateSingleItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsInventory - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing inventory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsInvoices operation
#
##############################################################################
print_updateSingleItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsInvoices - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing invoices item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsInvoicing operation
#
##############################################################################
print_updateSingleItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsInvoicing - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing invoicing item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsLifecycle operation
#
##############################################################################
print_updateSingleItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsLifecycle - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing lifecycle item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsLiveChat operation
#
##############################################################################
print_updateSingleItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsLiveChat - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing live_chat item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsLoyalty operation
#
##############################################################################
print_updateSingleItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsLoyalty - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing loyalty item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsMaintenance operation
#
##############################################################################
print_updateSingleItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsMaintenance - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing maintenance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPayroll operation
#
##############################################################################
print_updateSingleItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPayroll - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing payroll item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPerformance operation
#
##############################################################################
print_updateSingleItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPerformance - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing performance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPointofSale operation
#
##############################################################################
print_updateSingleItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPointofSale - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing point_of_sale item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPolicy operation
#
##############################################################################
print_updateSingleItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPolicy - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing policy item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsProcurement operation
#
##############################################################################
print_updateSingleItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsProcurement - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing procurement item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsProductionBatch operation
#
##############################################################################
print_updateSingleItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsProductionBatch - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing production_batch item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsProject operation
#
##############################################################################
print_updateSingleItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsProject - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing project item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPurchaseOrders operation
#
##############################################################################
print_updateSingleItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPurchaseOrders - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing purchase_orders item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsQualityCheck operation
#
##############################################################################
print_updateSingleItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsQualityCheck - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing quality_check item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsQuotes operation
#
##############################################################################
print_updateSingleItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsQuotes - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing quotes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsRecruit operation
#
##############################################################################
print_updateSingleItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsRecruit - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing recruit item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsRegulations operation
#
##############################################################################
print_updateSingleItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsRegulations - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing regulations item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsRentals operation
#
##############################################################################
print_updateSingleItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsRentals - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing rentals item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsShipment operation
#
##############################################################################
print_updateSingleItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsShipment - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing shipment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSocialMedia operation
#
##############################################################################
print_updateSingleItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSocialMedia - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing social_media item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSocialResponsibility operation
#
##############################################################################
print_updateSingleItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSocialResponsibility - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing social_responsibility item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSuppliers operation
#
##############################################################################
print_updateSingleItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSuppliers - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing suppliers item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSurveys operation
#
##############################################################################
print_updateSingleItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSurveys - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing surveys item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSustainableSupplyChain operation
#
##############################################################################
print_updateSingleItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSustainableSupplyChain - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing sustainable_supply_chain item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsTaxes operation
#
##############################################################################
print_updateSingleItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsTaxes - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing taxes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsTraining operation
#
##############################################################################
print_updateSingleItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsTraining - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing training item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsTransactions operation
#
##############################################################################
print_updateSingleItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsTransactions - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing transactions item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsAccounts operation
#
##############################################################################
print_createItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsAccounts - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new accounts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsAccounts operation
#
##############################################################################
print_deleteItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsAccounts - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing accounts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsAccounts operation
#
##############################################################################
print_deleteSingleItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsAccounts - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing accounts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsAccounts operation
#
##############################################################################
print_readItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsAccounts - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the accounts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsAccounts operation
#
##############################################################################
print_readSingleItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsAccounts - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single accounts item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsAccounts operation
#
##############################################################################
print_updateItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsAccounts - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple accounts items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsAccounts operation
#
##############################################################################
print_updateSingleItemsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsAccounts - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing accounts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsAppointments operation
#
##############################################################################
print_createItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsAppointments - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new appointments item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsAppointments operation
#
##############################################################################
print_deleteItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsAppointments - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing appointments items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsAppointments operation
#
##############################################################################
print_deleteSingleItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsAppointments - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing appointments item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsAppointments operation
#
##############################################################################
print_readItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsAppointments - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the appointments items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsAppointments operation
#
##############################################################################
print_readSingleItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsAppointments - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single appointments item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsAppointments operation
#
##############################################################################
print_updateItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsAppointments - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple appointments items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsAppointments operation
#
##############################################################################
print_updateSingleItemsAppointments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsAppointments - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing appointments item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsBudgets operation
#
##############################################################################
print_createItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsBudgets - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new budgets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsBudgets operation
#
##############################################################################
print_deleteItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsBudgets - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing budgets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsBudgets operation
#
##############################################################################
print_deleteSingleItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsBudgets - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing budgets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsBudgets operation
#
##############################################################################
print_readItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsBudgets - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the budgets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsBudgets operation
#
##############################################################################
print_readSingleItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsBudgets - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single budgets item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsBudgets operation
#
##############################################################################
print_updateItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsBudgets - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple budgets items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsBudgets operation
#
##############################################################################
print_updateSingleItemsBudgets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsBudgets - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing budgets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCampaigns operation
#
##############################################################################
print_createItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCampaigns - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCampaigns operation
#
##############################################################################
print_deleteItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCampaigns - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCampaigns operation
#
##############################################################################
print_deleteSingleItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCampaigns - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCampaigns operation
#
##############################################################################
print_readItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCampaigns - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCampaigns operation
#
##############################################################################
print_readSingleItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCampaigns - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single campaigns item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCampaigns operation
#
##############################################################################
print_updateItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCampaigns - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple campaigns items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCampaigns operation
#
##############################################################################
print_updateSingleItemsCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCampaigns - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCarbonFootprint operation
#
##############################################################################
print_createItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCarbonFootprint - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new carbon_footprint item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCarbonFootprint operation
#
##############################################################################
print_deleteItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCarbonFootprint - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing carbon_footprint items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCarbonFootprint operation
#
##############################################################################
print_deleteSingleItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCarbonFootprint - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing carbon_footprint item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCarbonFootprint operation
#
##############################################################################
print_readItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCarbonFootprint - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the carbon_footprint items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCarbonFootprint operation
#
##############################################################################
print_readSingleItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCarbonFootprint - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single carbon_footprint item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCarbonFootprint operation
#
##############################################################################
print_updateItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCarbonFootprint - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple carbon_footprint items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCarbonFootprint operation
#
##############################################################################
print_updateSingleItemsCarbonFootprint_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCarbonFootprint - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing carbon_footprint item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCompanyAssets operation
#
##############################################################################
print_createItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCompanyAssets - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new company_assets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCompanyAssets operation
#
##############################################################################
print_deleteItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCompanyAssets - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing company_assets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCompanyAssets operation
#
##############################################################################
print_deleteSingleItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCompanyAssets - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing company_assets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCompanyAssets operation
#
##############################################################################
print_readItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCompanyAssets - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the company_assets items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCompanyAssets operation
#
##############################################################################
print_readSingleItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCompanyAssets - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single company_assets item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCompanyAssets operation
#
##############################################################################
print_updateItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCompanyAssets - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple company_assets items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCompanyAssets operation
#
##############################################################################
print_updateSingleItemsCompanyAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCompanyAssets - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing company_assets item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsContent operation
#
##############################################################################
print_createItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsContent - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new content item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsContent operation
#
##############################################################################
print_deleteItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsContent - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing content items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsContent operation
#
##############################################################################
print_deleteSingleItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsContent - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing content item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsContent operation
#
##############################################################################
print_readItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsContent - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the content items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsContent operation
#
##############################################################################
print_readSingleItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsContent - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single content item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsContent operation
#
##############################################################################
print_updateItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsContent - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple content items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsContent operation
#
##############################################################################
print_updateSingleItemsContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsContent - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing content item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsContracts operation
#
##############################################################################
print_createItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsContracts - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new contracts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsContracts operation
#
##############################################################################
print_deleteItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsContracts - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing contracts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsContracts operation
#
##############################################################################
print_deleteSingleItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsContracts - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing contracts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsContracts operation
#
##############################################################################
print_readItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsContracts - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the contracts items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsContracts operation
#
##############################################################################
print_readSingleItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsContracts - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single contracts item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsContracts operation
#
##############################################################################
print_updateItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsContracts - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple contracts items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsContracts operation
#
##############################################################################
print_updateSingleItemsContracts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsContracts - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing contracts item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsCrm operation
#
##############################################################################
print_createItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsCrm - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new crm item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsCrm operation
#
##############################################################################
print_deleteItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsCrm - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing crm items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsCrm operation
#
##############################################################################
print_deleteSingleItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsCrm - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing crm item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsCrm operation
#
##############################################################################
print_readItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsCrm - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the crm items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsCrm operation
#
##############################################################################
print_readSingleItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsCrm - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single crm item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsCrm operation
#
##############################################################################
print_updateItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsCrm - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple crm items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsCrm operation
#
##############################################################################
print_updateSingleItemsCrm_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsCrm - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing crm item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsDepartment operation
#
##############################################################################
print_createItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsDepartment - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new department item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsDepartment operation
#
##############################################################################
print_deleteItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsDepartment - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing department items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsDepartment operation
#
##############################################################################
print_deleteSingleItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsDepartment - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing department item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsDepartment operation
#
##############################################################################
print_readItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsDepartment - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the department items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsDepartment operation
#
##############################################################################
print_readSingleItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsDepartment - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single department item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsDepartment operation
#
##############################################################################
print_updateItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsDepartment - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple department items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsDepartment operation
#
##############################################################################
print_updateSingleItemsDepartment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsDepartment - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing department item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsDistribution operation
#
##############################################################################
print_createItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsDistribution - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new distribution item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsDistribution operation
#
##############################################################################
print_deleteItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsDistribution - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing distribution items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsDistribution operation
#
##############################################################################
print_deleteSingleItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsDistribution - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing distribution item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsDistribution operation
#
##############################################################################
print_readItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsDistribution - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the distribution items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsDistribution operation
#
##############################################################################
print_readSingleItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsDistribution - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single distribution item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsDistribution operation
#
##############################################################################
print_updateItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsDistribution - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple distribution items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsDistribution operation
#
##############################################################################
print_updateSingleItemsDistribution_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsDistribution - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing distribution item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEmailCampaigns operation
#
##############################################################################
print_createItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEmailCampaigns - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new email_campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEmailCampaigns operation
#
##############################################################################
print_deleteItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEmailCampaigns - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing email_campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEmailCampaigns operation
#
##############################################################################
print_deleteSingleItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEmailCampaigns - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing email_campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEmailCampaigns operation
#
##############################################################################
print_readItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEmailCampaigns - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the email_campaigns items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEmailCampaigns operation
#
##############################################################################
print_readSingleItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEmailCampaigns - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single email_campaigns item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEmailCampaigns operation
#
##############################################################################
print_updateItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEmailCampaigns - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple email_campaigns items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEmailCampaigns operation
#
##############################################################################
print_updateSingleItemsEmailCampaigns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEmailCampaigns - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing email_campaigns item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEmployeeDirectory operation
#
##############################################################################
print_createItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEmployeeDirectory - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new employee_directory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEmployeeDirectory operation
#
##############################################################################
print_deleteItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEmployeeDirectory - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing employee_directory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEmployeeDirectory operation
#
##############################################################################
print_deleteSingleItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEmployeeDirectory - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing employee_directory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEmployeeDirectory operation
#
##############################################################################
print_readItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEmployeeDirectory - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the employee_directory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEmployeeDirectory operation
#
##############################################################################
print_readSingleItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEmployeeDirectory - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single employee_directory item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEmployeeDirectory operation
#
##############################################################################
print_updateItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEmployeeDirectory - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple employee_directory items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEmployeeDirectory operation
#
##############################################################################
print_updateSingleItemsEmployeeDirectory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEmployeeDirectory - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing employee_directory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEnergyEfficiency operation
#
##############################################################################
print_createItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEnergyEfficiency - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new energy_efficiency item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEnergyEfficiency operation
#
##############################################################################
print_deleteItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEnergyEfficiency - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing energy_efficiency items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEnergyEfficiency operation
#
##############################################################################
print_deleteSingleItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEnergyEfficiency - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing energy_efficiency item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEnergyEfficiency operation
#
##############################################################################
print_readItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEnergyEfficiency - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the energy_efficiency items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEnergyEfficiency operation
#
##############################################################################
print_readSingleItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEnergyEfficiency - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single energy_efficiency item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEnergyEfficiency operation
#
##############################################################################
print_updateItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEnergyEfficiency - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple energy_efficiency items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEnergyEfficiency operation
#
##############################################################################
print_updateSingleItemsEnergyEfficiency_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEnergyEfficiency - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing energy_efficiency item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEnvironmentalCompliance operation
#
##############################################################################
print_createItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEnvironmentalCompliance - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new environmental_compliance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEnvironmentalCompliance operation
#
##############################################################################
print_deleteItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEnvironmentalCompliance - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing environmental_compliance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEnvironmentalCompliance operation
#
##############################################################################
print_deleteSingleItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEnvironmentalCompliance - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing environmental_compliance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEnvironmentalCompliance operation
#
##############################################################################
print_readItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEnvironmentalCompliance - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the environmental_compliance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEnvironmentalCompliance operation
#
##############################################################################
print_readSingleItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEnvironmentalCompliance - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single environmental_compliance item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEnvironmentalCompliance operation
#
##############################################################################
print_updateItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEnvironmentalCompliance - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple environmental_compliance items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEnvironmentalCompliance operation
#
##############################################################################
print_updateSingleItemsEnvironmentalCompliance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEnvironmentalCompliance - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing environmental_compliance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsEvents operation
#
##############################################################################
print_createItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsEvents - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new events item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsEvents operation
#
##############################################################################
print_deleteItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsEvents - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing events items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsEvents operation
#
##############################################################################
print_deleteSingleItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsEvents - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing events item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsEvents operation
#
##############################################################################
print_readItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsEvents - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the events items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsEvents operation
#
##############################################################################
print_readSingleItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsEvents - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single events item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsEvents operation
#
##############################################################################
print_updateItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsEvents - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple events items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsEvents operation
#
##############################################################################
print_updateSingleItemsEvents_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsEvents - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing events item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsExpenses operation
#
##############################################################################
print_createItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsExpenses - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new expenses item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsExpenses operation
#
##############################################################################
print_deleteItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsExpenses - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing expenses items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsExpenses operation
#
##############################################################################
print_deleteSingleItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsExpenses - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing expenses item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsExpenses operation
#
##############################################################################
print_readItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsExpenses - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the expenses items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsExpenses operation
#
##############################################################################
print_readSingleItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsExpenses - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single expenses item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsExpenses operation
#
##############################################################################
print_updateItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsExpenses - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple expenses items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsExpenses operation
#
##############################################################################
print_updateSingleItemsExpenses_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsExpenses - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing expenses item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsFacilities operation
#
##############################################################################
print_createItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsFacilities - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new facilities item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsFacilities operation
#
##############################################################################
print_deleteItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsFacilities - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing facilities items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsFacilities operation
#
##############################################################################
print_deleteSingleItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsFacilities - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing facilities item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsFacilities operation
#
##############################################################################
print_readItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsFacilities - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the facilities items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsFacilities operation
#
##############################################################################
print_readSingleItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsFacilities - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single facilities item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsFacilities operation
#
##############################################################################
print_updateItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsFacilities - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple facilities items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsFacilities operation
#
##############################################################################
print_updateSingleItemsFacilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsFacilities - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing facilities item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsFeedback operation
#
##############################################################################
print_createItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsFeedback - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new feedback item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsFeedback operation
#
##############################################################################
print_deleteItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsFeedback - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing feedback items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsFeedback operation
#
##############################################################################
print_deleteSingleItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsFeedback - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing feedback item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsFeedback operation
#
##############################################################################
print_readItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsFeedback - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the feedback items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsFeedback operation
#
##############################################################################
print_readSingleItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsFeedback - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single feedback item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsFeedback operation
#
##############################################################################
print_updateItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsFeedback - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple feedback items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsFeedback operation
#
##############################################################################
print_updateSingleItemsFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsFeedback - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing feedback item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsForum operation
#
##############################################################################
print_createItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsForum - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new forum item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsForum operation
#
##############################################################################
print_deleteItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsForum - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing forum items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsForum operation
#
##############################################################################
print_deleteSingleItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsForum - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing forum item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsForum operation
#
##############################################################################
print_readItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsForum - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the forum items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsForum operation
#
##############################################################################
print_readSingleItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsForum - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single forum item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsForum operation
#
##############################################################################
print_updateItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsForum - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple forum items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsForum operation
#
##############################################################################
print_updateSingleItemsForum_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsForum - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing forum item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsFulfillment operation
#
##############################################################################
print_createItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsFulfillment - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new fulfillment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsFulfillment operation
#
##############################################################################
print_deleteItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsFulfillment - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing fulfillment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsFulfillment operation
#
##############################################################################
print_deleteSingleItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsFulfillment - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing fulfillment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsFulfillment operation
#
##############################################################################
print_readItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsFulfillment - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the fulfillment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsFulfillment operation
#
##############################################################################
print_readSingleItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsFulfillment - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single fulfillment item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsFulfillment operation
#
##############################################################################
print_updateItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsFulfillment - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple fulfillment items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsFulfillment operation
#
##############################################################################
print_updateSingleItemsFulfillment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsFulfillment - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing fulfillment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsGovernanceandEthics operation
#
##############################################################################
print_createItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsGovernanceandEthics - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new governance_and_ethics item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsGovernanceandEthics operation
#
##############################################################################
print_deleteItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsGovernanceandEthics - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing governance_and_ethics items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsGovernanceandEthics operation
#
##############################################################################
print_deleteSingleItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsGovernanceandEthics - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing governance_and_ethics item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsGovernanceandEthics operation
#
##############################################################################
print_readItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsGovernanceandEthics - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the governance_and_ethics items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsGovernanceandEthics operation
#
##############################################################################
print_readSingleItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsGovernanceandEthics - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single governance_and_ethics item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsGovernanceandEthics operation
#
##############################################################################
print_updateItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsGovernanceandEthics - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple governance_and_ethics items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsGovernanceandEthics operation
#
##############################################################################
print_updateSingleItemsGovernanceandEthics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsGovernanceandEthics - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing governance_and_ethics item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsHelpdesk operation
#
##############################################################################
print_createItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsHelpdesk - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new helpdesk item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsHelpdesk operation
#
##############################################################################
print_deleteItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsHelpdesk - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing helpdesk items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsHelpdesk operation
#
##############################################################################
print_deleteSingleItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsHelpdesk - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing helpdesk item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsHelpdesk operation
#
##############################################################################
print_readItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsHelpdesk - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the helpdesk items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsHelpdesk operation
#
##############################################################################
print_readSingleItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsHelpdesk - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single helpdesk item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsHelpdesk operation
#
##############################################################################
print_updateItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsHelpdesk - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple helpdesk items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsHelpdesk operation
#
##############################################################################
print_updateSingleItemsHelpdesk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsHelpdesk - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing helpdesk item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsInventory operation
#
##############################################################################
print_createItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsInventory - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new inventory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsInventory operation
#
##############################################################################
print_deleteItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsInventory - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing inventory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsInventory operation
#
##############################################################################
print_deleteSingleItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsInventory - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing inventory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsInventory operation
#
##############################################################################
print_readItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsInventory - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the inventory items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsInventory operation
#
##############################################################################
print_readSingleItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsInventory - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single inventory item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsInventory operation
#
##############################################################################
print_updateItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsInventory - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple inventory items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsInventory operation
#
##############################################################################
print_updateSingleItemsInventory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsInventory - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing inventory item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsInvoices operation
#
##############################################################################
print_createItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsInvoices - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new invoices item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsInvoices operation
#
##############################################################################
print_deleteItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsInvoices - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing invoices items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsInvoices operation
#
##############################################################################
print_deleteSingleItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsInvoices - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing invoices item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsInvoices operation
#
##############################################################################
print_readItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsInvoices - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the invoices items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsInvoices operation
#
##############################################################################
print_readSingleItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsInvoices - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single invoices item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsInvoices operation
#
##############################################################################
print_updateItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsInvoices - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple invoices items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsInvoices operation
#
##############################################################################
print_updateSingleItemsInvoices_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsInvoices - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing invoices item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsInvoicing operation
#
##############################################################################
print_createItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsInvoicing - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new invoicing item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsInvoicing operation
#
##############################################################################
print_deleteItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsInvoicing - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing invoicing items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsInvoicing operation
#
##############################################################################
print_deleteSingleItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsInvoicing - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing invoicing item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsInvoicing operation
#
##############################################################################
print_readItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsInvoicing - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the invoicing items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsInvoicing operation
#
##############################################################################
print_readSingleItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsInvoicing - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single invoicing item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsInvoicing operation
#
##############################################################################
print_updateItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsInvoicing - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple invoicing items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsInvoicing operation
#
##############################################################################
print_updateSingleItemsInvoicing_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsInvoicing - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing invoicing item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsLifecycle operation
#
##############################################################################
print_createItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsLifecycle - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new lifecycle item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsLifecycle operation
#
##############################################################################
print_deleteItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsLifecycle - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing lifecycle items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsLifecycle operation
#
##############################################################################
print_deleteSingleItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsLifecycle - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing lifecycle item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsLifecycle operation
#
##############################################################################
print_readItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsLifecycle - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the lifecycle items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsLifecycle operation
#
##############################################################################
print_readSingleItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsLifecycle - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single lifecycle item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsLifecycle operation
#
##############################################################################
print_updateItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsLifecycle - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple lifecycle items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsLifecycle operation
#
##############################################################################
print_updateSingleItemsLifecycle_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsLifecycle - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing lifecycle item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsLiveChat operation
#
##############################################################################
print_createItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsLiveChat - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new live_chat item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsLiveChat operation
#
##############################################################################
print_deleteItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsLiveChat - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing live_chat items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsLiveChat operation
#
##############################################################################
print_deleteSingleItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsLiveChat - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing live_chat item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsLiveChat operation
#
##############################################################################
print_readItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsLiveChat - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the live_chat items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsLiveChat operation
#
##############################################################################
print_readSingleItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsLiveChat - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single live_chat item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsLiveChat operation
#
##############################################################################
print_updateItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsLiveChat - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple live_chat items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsLiveChat operation
#
##############################################################################
print_updateSingleItemsLiveChat_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsLiveChat - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing live_chat item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsLoyalty operation
#
##############################################################################
print_createItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsLoyalty - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new loyalty item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsLoyalty operation
#
##############################################################################
print_deleteItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsLoyalty - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing loyalty items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsLoyalty operation
#
##############################################################################
print_deleteSingleItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsLoyalty - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing loyalty item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsLoyalty operation
#
##############################################################################
print_readItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsLoyalty - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the loyalty items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsLoyalty operation
#
##############################################################################
print_readSingleItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsLoyalty - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single loyalty item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsLoyalty operation
#
##############################################################################
print_updateItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsLoyalty - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple loyalty items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsLoyalty operation
#
##############################################################################
print_updateSingleItemsLoyalty_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsLoyalty - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing loyalty item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsMaintenance operation
#
##############################################################################
print_createItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsMaintenance - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new maintenance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsMaintenance operation
#
##############################################################################
print_deleteItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsMaintenance - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing maintenance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsMaintenance operation
#
##############################################################################
print_deleteSingleItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsMaintenance - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing maintenance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsMaintenance operation
#
##############################################################################
print_readItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsMaintenance - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the maintenance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsMaintenance operation
#
##############################################################################
print_readSingleItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsMaintenance - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single maintenance item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsMaintenance operation
#
##############################################################################
print_updateItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsMaintenance - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple maintenance items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsMaintenance operation
#
##############################################################################
print_updateSingleItemsMaintenance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsMaintenance - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing maintenance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPayroll operation
#
##############################################################################
print_createItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPayroll - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new payroll item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPayroll operation
#
##############################################################################
print_deleteItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPayroll - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing payroll items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPayroll operation
#
##############################################################################
print_deleteSingleItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPayroll - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing payroll item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPayroll operation
#
##############################################################################
print_readItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPayroll - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the payroll items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPayroll operation
#
##############################################################################
print_readSingleItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPayroll - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single payroll item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPayroll operation
#
##############################################################################
print_updateItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPayroll - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple payroll items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPayroll operation
#
##############################################################################
print_updateSingleItemsPayroll_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPayroll - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing payroll item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPerformance operation
#
##############################################################################
print_createItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPerformance - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new performance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPerformance operation
#
##############################################################################
print_deleteItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPerformance - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing performance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPerformance operation
#
##############################################################################
print_deleteSingleItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPerformance - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing performance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPerformance operation
#
##############################################################################
print_readItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPerformance - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the performance items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPerformance operation
#
##############################################################################
print_readSingleItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPerformance - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single performance item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPerformance operation
#
##############################################################################
print_updateItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPerformance - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple performance items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPerformance operation
#
##############################################################################
print_updateSingleItemsPerformance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPerformance - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing performance item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPointofSale operation
#
##############################################################################
print_createItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPointofSale - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new point_of_sale item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPointofSale operation
#
##############################################################################
print_deleteItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPointofSale - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing point_of_sale items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPointofSale operation
#
##############################################################################
print_deleteSingleItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPointofSale - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing point_of_sale item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPointofSale operation
#
##############################################################################
print_readItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPointofSale - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the point_of_sale items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPointofSale operation
#
##############################################################################
print_readSingleItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPointofSale - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single point_of_sale item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPointofSale operation
#
##############################################################################
print_updateItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPointofSale - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple point_of_sale items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPointofSale operation
#
##############################################################################
print_updateSingleItemsPointofSale_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPointofSale - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing point_of_sale item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPolicy operation
#
##############################################################################
print_createItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPolicy - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new policy item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPolicy operation
#
##############################################################################
print_deleteItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPolicy - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing policy items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPolicy operation
#
##############################################################################
print_deleteSingleItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPolicy - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing policy item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPolicy operation
#
##############################################################################
print_readItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPolicy - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the policy items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPolicy operation
#
##############################################################################
print_readSingleItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPolicy - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single policy item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPolicy operation
#
##############################################################################
print_updateItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPolicy - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple policy items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPolicy operation
#
##############################################################################
print_updateSingleItemsPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPolicy - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing policy item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsProcurement operation
#
##############################################################################
print_createItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsProcurement - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new procurement item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsProcurement operation
#
##############################################################################
print_deleteItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsProcurement - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing procurement items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsProcurement operation
#
##############################################################################
print_deleteSingleItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsProcurement - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing procurement item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsProcurement operation
#
##############################################################################
print_readItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsProcurement - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the procurement items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsProcurement operation
#
##############################################################################
print_readSingleItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsProcurement - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single procurement item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsProcurement operation
#
##############################################################################
print_updateItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsProcurement - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple procurement items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsProcurement operation
#
##############################################################################
print_updateSingleItemsProcurement_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsProcurement - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing procurement item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsProductionBatch operation
#
##############################################################################
print_createItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsProductionBatch - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new production_batch item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsProductionBatch operation
#
##############################################################################
print_deleteItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsProductionBatch - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing production_batch items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsProductionBatch operation
#
##############################################################################
print_deleteSingleItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsProductionBatch - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing production_batch item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsProductionBatch operation
#
##############################################################################
print_readItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsProductionBatch - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the production_batch items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsProductionBatch operation
#
##############################################################################
print_readSingleItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsProductionBatch - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single production_batch item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsProductionBatch operation
#
##############################################################################
print_updateItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsProductionBatch - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple production_batch items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsProductionBatch operation
#
##############################################################################
print_updateSingleItemsProductionBatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsProductionBatch - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing production_batch item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsProject operation
#
##############################################################################
print_createItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsProject - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new project item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsProject operation
#
##############################################################################
print_deleteItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsProject - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing project items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsProject operation
#
##############################################################################
print_deleteSingleItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsProject - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing project item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsProject operation
#
##############################################################################
print_readItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsProject - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the project items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsProject operation
#
##############################################################################
print_readSingleItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsProject - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single project item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsProject operation
#
##############################################################################
print_updateItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsProject - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple project items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsProject operation
#
##############################################################################
print_updateSingleItemsProject_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsProject - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing project item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsPurchaseOrders operation
#
##############################################################################
print_createItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsPurchaseOrders - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new purchase_orders item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsPurchaseOrders operation
#
##############################################################################
print_deleteItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsPurchaseOrders - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing purchase_orders items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsPurchaseOrders operation
#
##############################################################################
print_deleteSingleItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsPurchaseOrders - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing purchase_orders item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsPurchaseOrders operation
#
##############################################################################
print_readItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsPurchaseOrders - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the purchase_orders items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsPurchaseOrders operation
#
##############################################################################
print_readSingleItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsPurchaseOrders - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single purchase_orders item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsPurchaseOrders operation
#
##############################################################################
print_updateItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsPurchaseOrders - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple purchase_orders items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsPurchaseOrders operation
#
##############################################################################
print_updateSingleItemsPurchaseOrders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsPurchaseOrders - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing purchase_orders item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsQualityCheck operation
#
##############################################################################
print_createItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsQualityCheck - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new quality_check item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsQualityCheck operation
#
##############################################################################
print_deleteItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsQualityCheck - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing quality_check items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsQualityCheck operation
#
##############################################################################
print_deleteSingleItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsQualityCheck - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing quality_check item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsQualityCheck operation
#
##############################################################################
print_readItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsQualityCheck - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the quality_check items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsQualityCheck operation
#
##############################################################################
print_readSingleItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsQualityCheck - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single quality_check item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsQualityCheck operation
#
##############################################################################
print_updateItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsQualityCheck - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple quality_check items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsQualityCheck operation
#
##############################################################################
print_updateSingleItemsQualityCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsQualityCheck - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing quality_check item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsQuotes operation
#
##############################################################################
print_createItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsQuotes - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new quotes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsQuotes operation
#
##############################################################################
print_deleteItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsQuotes - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing quotes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsQuotes operation
#
##############################################################################
print_deleteSingleItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsQuotes - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing quotes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsQuotes operation
#
##############################################################################
print_readItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsQuotes - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the quotes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsQuotes operation
#
##############################################################################
print_readSingleItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsQuotes - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single quotes item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsQuotes operation
#
##############################################################################
print_updateItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsQuotes - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple quotes items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsQuotes operation
#
##############################################################################
print_updateSingleItemsQuotes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsQuotes - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing quotes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsRecruit operation
#
##############################################################################
print_createItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsRecruit - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new recruit item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsRecruit operation
#
##############################################################################
print_deleteItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsRecruit - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing recruit items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsRecruit operation
#
##############################################################################
print_deleteSingleItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsRecruit - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing recruit item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsRecruit operation
#
##############################################################################
print_readItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsRecruit - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the recruit items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsRecruit operation
#
##############################################################################
print_readSingleItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsRecruit - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single recruit item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsRecruit operation
#
##############################################################################
print_updateItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsRecruit - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple recruit items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsRecruit operation
#
##############################################################################
print_updateSingleItemsRecruit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsRecruit - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing recruit item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsRegulations operation
#
##############################################################################
print_createItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsRegulations - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new regulations item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsRegulations operation
#
##############################################################################
print_deleteItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsRegulations - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing regulations items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsRegulations operation
#
##############################################################################
print_deleteSingleItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsRegulations - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing regulations item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsRegulations operation
#
##############################################################################
print_readItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsRegulations - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the regulations items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsRegulations operation
#
##############################################################################
print_readSingleItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsRegulations - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single regulations item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsRegulations operation
#
##############################################################################
print_updateItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsRegulations - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple regulations items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsRegulations operation
#
##############################################################################
print_updateSingleItemsRegulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsRegulations - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing regulations item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsRentals operation
#
##############################################################################
print_createItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsRentals - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new rentals item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsRentals operation
#
##############################################################################
print_deleteItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsRentals - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing rentals items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsRentals operation
#
##############################################################################
print_deleteSingleItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsRentals - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing rentals item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsRentals operation
#
##############################################################################
print_readItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsRentals - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the rentals items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsRentals operation
#
##############################################################################
print_readSingleItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsRentals - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single rentals item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsRentals operation
#
##############################################################################
print_updateItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsRentals - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple rentals items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsRentals operation
#
##############################################################################
print_updateSingleItemsRentals_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsRentals - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing rentals item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsShipment operation
#
##############################################################################
print_createItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsShipment - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new shipment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsShipment operation
#
##############################################################################
print_deleteItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsShipment - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing shipment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsShipment operation
#
##############################################################################
print_deleteSingleItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsShipment - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing shipment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsShipment operation
#
##############################################################################
print_readItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsShipment - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the shipment items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsShipment operation
#
##############################################################################
print_readSingleItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsShipment - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single shipment item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsShipment operation
#
##############################################################################
print_updateItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsShipment - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple shipment items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsShipment operation
#
##############################################################################
print_updateSingleItemsShipment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsShipment - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing shipment item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSocialMedia operation
#
##############################################################################
print_createItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSocialMedia - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new social_media item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSocialMedia operation
#
##############################################################################
print_deleteItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSocialMedia - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing social_media items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSocialMedia operation
#
##############################################################################
print_deleteSingleItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSocialMedia - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing social_media item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSocialMedia operation
#
##############################################################################
print_readItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSocialMedia - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the social_media items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSocialMedia operation
#
##############################################################################
print_readSingleItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSocialMedia - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single social_media item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSocialMedia operation
#
##############################################################################
print_updateItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSocialMedia - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple social_media items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSocialMedia operation
#
##############################################################################
print_updateSingleItemsSocialMedia_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSocialMedia - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing social_media item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSocialResponsibility operation
#
##############################################################################
print_createItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSocialResponsibility - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new social_responsibility item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSocialResponsibility operation
#
##############################################################################
print_deleteItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSocialResponsibility - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing social_responsibility items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSocialResponsibility operation
#
##############################################################################
print_deleteSingleItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSocialResponsibility - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing social_responsibility item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSocialResponsibility operation
#
##############################################################################
print_readItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSocialResponsibility - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the social_responsibility items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSocialResponsibility operation
#
##############################################################################
print_readSingleItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSocialResponsibility - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single social_responsibility item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSocialResponsibility operation
#
##############################################################################
print_updateItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSocialResponsibility - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple social_responsibility items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSocialResponsibility operation
#
##############################################################################
print_updateSingleItemsSocialResponsibility_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSocialResponsibility - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing social_responsibility item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSuppliers operation
#
##############################################################################
print_createItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSuppliers - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new suppliers item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSuppliers operation
#
##############################################################################
print_deleteItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSuppliers - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing suppliers items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSuppliers operation
#
##############################################################################
print_deleteSingleItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSuppliers - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing suppliers item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSuppliers operation
#
##############################################################################
print_readItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSuppliers - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the suppliers items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSuppliers operation
#
##############################################################################
print_readSingleItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSuppliers - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single suppliers item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSuppliers operation
#
##############################################################################
print_updateItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSuppliers - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple suppliers items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSuppliers operation
#
##############################################################################
print_updateSingleItemsSuppliers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSuppliers - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing suppliers item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSurveys operation
#
##############################################################################
print_createItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSurveys - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new surveys item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSurveys operation
#
##############################################################################
print_deleteItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSurveys - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing surveys items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSurveys operation
#
##############################################################################
print_deleteSingleItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSurveys - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing surveys item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSurveys operation
#
##############################################################################
print_readItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSurveys - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the surveys items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSurveys operation
#
##############################################################################
print_readSingleItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSurveys - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single surveys item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSurveys operation
#
##############################################################################
print_updateItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSurveys - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple surveys items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSurveys operation
#
##############################################################################
print_updateSingleItemsSurveys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSurveys - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing surveys item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsSustainableSupplyChain operation
#
##############################################################################
print_createItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsSustainableSupplyChain - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new sustainable_supply_chain item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsSustainableSupplyChain operation
#
##############################################################################
print_deleteItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsSustainableSupplyChain - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing sustainable_supply_chain items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsSustainableSupplyChain operation
#
##############################################################################
print_deleteSingleItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsSustainableSupplyChain - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing sustainable_supply_chain item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsSustainableSupplyChain operation
#
##############################################################################
print_readItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsSustainableSupplyChain - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the sustainable_supply_chain items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsSustainableSupplyChain operation
#
##############################################################################
print_readSingleItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsSustainableSupplyChain - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single sustainable_supply_chain item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsSustainableSupplyChain operation
#
##############################################################################
print_updateItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsSustainableSupplyChain - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple sustainable_supply_chain items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsSustainableSupplyChain operation
#
##############################################################################
print_updateSingleItemsSustainableSupplyChain_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsSustainableSupplyChain - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing sustainable_supply_chain item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsTaxes operation
#
##############################################################################
print_createItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsTaxes - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new taxes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsTaxes operation
#
##############################################################################
print_deleteItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsTaxes - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing taxes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsTaxes operation
#
##############################################################################
print_deleteSingleItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsTaxes - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing taxes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsTaxes operation
#
##############################################################################
print_readItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsTaxes - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the taxes items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsTaxes operation
#
##############################################################################
print_readSingleItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsTaxes - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single taxes item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsTaxes operation
#
##############################################################################
print_updateItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsTaxes - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple taxes items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsTaxes operation
#
##############################################################################
print_updateSingleItemsTaxes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsTaxes - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing taxes item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsTraining operation
#
##############################################################################
print_createItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsTraining - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new training item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsTraining operation
#
##############################################################################
print_deleteItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsTraining - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing training items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsTraining operation
#
##############################################################################
print_deleteSingleItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsTraining - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing training item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsTraining operation
#
##############################################################################
print_readItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsTraining - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the training items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsTraining operation
#
##############################################################################
print_readSingleItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsTraining - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single training item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsTraining operation
#
##############################################################################
print_updateItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsTraining - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple training items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsTraining operation
#
##############################################################################
print_updateSingleItemsTraining_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsTraining - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing training item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createItemsTransactions operation
#
##############################################################################
print_createItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createItemsTransactions - Create an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new transactions item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteItemsTransactions operation
#
##############################################################################
print_deleteItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteItemsTransactions - Delete Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing transactions items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteSingleItemsTransactions operation
#
##############################################################################
print_deleteSingleItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteSingleItemsTransactions - Delete an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing transactions item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readItemsTransactions operation
#
##############################################################################
print_readItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readItemsTransactions - List Items${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the transactions items." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readSingleItemsTransactions operation
#
##############################################################################
print_readSingleItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readSingleItemsTransactions - Retrieve an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single transactions item by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}version${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.${YELLOW} Specify as: version=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateItemsTransactions operation
#
##############################################################################
print_updateItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateItemsTransactions - Update Multiple Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple transactions items at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateSingleItemsTransactions operation
#
##############################################################################
print_updateSingleItemsTransactions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateSingleItemsTransactions - Update an Item${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing transactions item." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[ReadSingleItemsAccountsIdParameter]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index of the item. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getMyPermissions operation
#
##############################################################################
print_getMyPermissions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getMyPermissions - List My Permissions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the permissions that apply to the current user." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPermission operation
#
##############################################################################
print_getPermission_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPermission - Retrieve a Permission${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single permissions object by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPermissions operation
#
##############################################################################
print_getPermissions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPermissions - List Permissions${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all permissions." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Cursor for use in pagination. Often used in combination with limit.${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPreset operation
#
##############################################################################
print_createPreset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPreset - Create a Preset${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Create a new preset." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deletePreset operation
#
##############################################################################
print_deletePreset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deletePreset - Delete a Preset${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete an existing preset." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deletePresets operation
#
##############################################################################
print_deletePresets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deletePresets - Delete Multiple Presets${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete multiple existing presets." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPreset operation
#
##############################################################################
print_getPreset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPreset - Retrieve a Preset${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single preset by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPresets operation
#
##############################################################################
print_getPresets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPresets - List Presets${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the presets." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Cursor for use in pagination. Often used in combination with limit.${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updatePreset operation
#
##############################################################################
print_updatePreset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updatePreset - Update a Preset${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing preset." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updatePresets operation
#
##############################################################################
print_updatePresets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updatePresets - Update Multiple Presets${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple presets at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRelation operation
#
##############################################################################
print_getRelation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRelation - Retrieve a Relation${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single relation by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Index ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRelations operation
#
##############################################################################
print_getRelations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRelations - List Relations${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the relations." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Cursor for use in pagination. Often used in combination with limit.${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRole operation
#
##############################################################################
print_getRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRole - Retrieve a Role${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single role by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getRoles operation
#
##############################################################################
print_getRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRoles - List Roles${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the roles." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Cursor for use in pagination. Often used in combination with limit.${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schemaApply operation
#
##############################################################################
print_schemaApply_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schemaApply - Apply Schema Difference${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update the instance's schema by passing the diff previously retrieved via '/schema/diff' endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,multipart/form-data]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schemaDiff operation
#
##############################################################################
print_schemaDiff_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schemaDiff - Retrieve Schema Difference${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}force${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Bypass version and database vendor restrictions.${YELLOW} Specify as: force=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json,multipart/form-data]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;No schema difference.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schemaSnapshot operation
#
##############################################################################
print_schemaSnapshot_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schemaSnapshot - Retrieve Schema Snapshot${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve the current schema. This endpoint is only available to admin users." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}export${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Saves the API response to a file. Accepts one of \"csv\", \"json\", \"xml\", \"yaml\".${YELLOW} Specify as: export=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ping operation
#
##############################################################################
print_ping_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ping - Ping${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Ping, pong. Ping.. pong." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for serverInfo operation
#
##############################################################################
print_serverInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}serverInfo - System Info${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Perform a system status check and return the options." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}super_admin_token${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in '/config/__api.json' on your server.${YELLOW} Specify as: super_admin_token=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSettings operation
#
##############################################################################
print_getSettings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSettings - Retrieve Settings${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the settings." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Cursor for use in pagination. Often used in combination with limit.${YELLOW} Specify as: page=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getMe operation
#
##############################################################################
print_getMe_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getMe - Retrieve Current User${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve the currently authenticated user." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUser operation
#
##############################################################################
print_getUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUser - Retrieve a User${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a single user by unique identifier." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getUsers operation
#
##############################################################################
print_getUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getUsers - List Users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List the users." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateLastUsedPageMe operation
#
##############################################################################
print_updateLastUsedPageMe_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateLastUsedPageMe - Update Last Page${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Empress admin app from the last page you used." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateMe operation
#
##############################################################################
print_updateMe_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateMe - Update Current User${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update the currently authenticated user." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUser operation
#
##############################################################################
print_updateUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUser - Update a User${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update an existing user" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the object. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Error: Not found.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUsers operation
#
##############################################################################
print_updateUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUsers - Update Multiple Users${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Update multiple users at the same time." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}fields${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Control what fields are being returned in the object.${YELLOW} Specify as: fields="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - A limit on the number of objects that are returned.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}meta${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - What metadata to return in the response.${YELLOW} Specify as: meta=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - How many items to skip when fetching data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - How to sort the returned items. 'sort' is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (' - ') can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ' ? ' to sort randomly.${YELLOW} Specify as: sort="value1,value2,..."${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Select items in collection by given conditions.${YELLOW} Specify as: filter=value1 filter=value2 filter=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by items that contain the given search query in one of their fields.${YELLOW} Specify as: search=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Error: Unauthorized request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for clearCache operation
#
##############################################################################
print_clearCache_help() {
    echo ""
    echo -e "${BOLD}${WHITE}clearCache - Clear Cache${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Resets both the data and schema cache of Empress." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for export operation
#
##############################################################################
print_export_help() {
    echo ""
    echo -e "${BOLD}${WHITE}export - Export Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Export a larger data set to a file in the File Library" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}collection${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Collection identifier ${YELLOW}Specify as: collection=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for hashGenerate operation
#
##############################################################################
print_hashGenerate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}hashGenerate - Hash a string${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate a hash for a given string." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for hashVerify operation
#
##############################################################################
print_hashVerify_help() {
    echo ""
    echo -e "${BOLD}${WHITE}hashVerify - Hash a string${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate a hash for a given string." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for import operation
#
##############################################################################
print_import_help() {
    echo ""
    echo -e "${BOLD}${WHITE}import - Import Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Import multiple records from a JSON or CSV file into a collection." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}collection${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Collection identifier ${YELLOW}Specify as: collection=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for random operation
#
##############################################################################
print_random_help() {
    echo ""
    echo -e "${BOLD}${WHITE}random - Get a Random String${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Returns a random string of given length." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}length${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Length of the random string.${YELLOW} Specify as: length=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for sort operation
#
##############################################################################
print_sort_help() {
    echo ""
    echo -e "${BOLD}${WHITE}sort - Sort Items${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Re-sort items in collection based on start and to value of item" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}collection${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Collection identifier ${YELLOW}Specify as: collection=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}


##############################################################################
#
# Call createComment operation
#
##############################################################################
call_createComment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/activity/comment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getActivities operation
#
##############################################################################
call_getActivities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/activity" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getActivity operation
#
##############################################################################
call_getActivity() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/activity/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAsset operation
#
##############################################################################
call_getAsset() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(key transforms download)
    local path

    if ! path=$(build_request_path "/assets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call login operation
#
##############################################################################
call_login() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/auth/login" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call logout operation
#
##############################################################################
call_logout() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/auth/logout" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call oauth operation
#
##############################################################################
call_oauth() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/auth/oauth" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call oauthProvider operation
#
##############################################################################
call_oauthProvider() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(provider)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(redirect)
    local path

    if ! path=$(build_request_path "/auth/oauth/{provider}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call passwordRequest operation
#
##############################################################################
call_passwordRequest() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/auth/password/request" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call passwordReset operation
#
##############################################################################
call_passwordReset() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/auth/password/reset" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call refresh operation
#
##############################################################################
call_refresh() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/auth/refresh" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getCollection operation
#
##############################################################################
call_getCollection() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/collections/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCollections operation
#
##############################################################################
call_getCollections() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(offset meta)
    local path

    if ! path=$(build_request_path "/collections" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDisplays operation
#
##############################################################################
call_getDisplays() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/extensions/displays" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getInterfaces operation
#
##############################################################################
call_getInterfaces() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/extensions/interfaces" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getLayouts operation
#
##############################################################################
call_getLayouts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/extensions/layouts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getModules operation
#
##############################################################################
call_getModules() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/extensions/modules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCollectionField operation
#
##############################################################################
call_getCollectionField() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(collection id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/fields/{collection}/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCollectionFields operation
#
##############################################################################
call_getCollectionFields() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(collection)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(sort)
    local path

    if ! path=$(build_request_path "/fields/{collection}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFields operation
#
##############################################################################
call_getFields() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(limit sort)
    local path

    if ! path=$(build_request_path "/fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createFile operation
#
##############################################################################
call_createFile() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/files" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteFile operation
#
##############################################################################
call_deleteFile() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/files/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteFiles operation
#
##############################################################################
call_deleteFiles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/files" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFile operation
#
##############################################################################
call_getFile() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/files/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFiles operation
#
##############################################################################
call_getFiles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit offset sort filter search meta)
    local path

    if ! path=$(build_request_path "/files" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateFile operation
#
##############################################################################
call_updateFile() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/files/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    body_form_urlencoded=$(body_parameters_to_form_urlencoded)
    if [[ "$print_curl" = true ]]; then
        echo "curl ${body_form_urlencoded} ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${body_form_urlencoded} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateFiles operation
#
##############################################################################
call_updateFiles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/files" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getFlow operation
#
##############################################################################
call_getFlow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/flows/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFlows operation
#
##############################################################################
call_getFlows() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/flows" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createFolder operation
#
##############################################################################
call_createFolder() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/folders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteFolder operation
#
##############################################################################
call_deleteFolder() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/folders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteFolders operation
#
##############################################################################
call_deleteFolders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/folders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFolder operation
#
##############################################################################
call_getFolder() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/folders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getFolders operation
#
##############################################################################
call_getFolders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit offset sort filter search meta)
    local path

    if ! path=$(build_request_path "/folders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateFolder operation
#
##############################################################################
call_updateFolder() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/folders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateFolders operation
#
##############################################################################
call_updateFolders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/folders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsAccounts operation
#
##############################################################################
call_createItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsAppointments operation
#
##############################################################################
call_createItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsBudgets operation
#
##############################################################################
call_createItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCampaigns operation
#
##############################################################################
call_createItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCarbonFootprint operation
#
##############################################################################
call_createItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCompanyAssets operation
#
##############################################################################
call_createItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsContent operation
#
##############################################################################
call_createItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsContracts operation
#
##############################################################################
call_createItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCrm operation
#
##############################################################################
call_createItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsDepartment operation
#
##############################################################################
call_createItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsDistribution operation
#
##############################################################################
call_createItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEmailCampaigns operation
#
##############################################################################
call_createItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEmployeeDirectory operation
#
##############################################################################
call_createItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEnergyEfficiency operation
#
##############################################################################
call_createItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEnvironmentalCompliance operation
#
##############################################################################
call_createItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEvents operation
#
##############################################################################
call_createItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsExpenses operation
#
##############################################################################
call_createItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsFacilities operation
#
##############################################################################
call_createItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsFeedback operation
#
##############################################################################
call_createItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsForum operation
#
##############################################################################
call_createItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsFulfillment operation
#
##############################################################################
call_createItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsGovernanceandEthics operation
#
##############################################################################
call_createItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsHelpdesk operation
#
##############################################################################
call_createItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsInventory operation
#
##############################################################################
call_createItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsInvoices operation
#
##############################################################################
call_createItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsInvoicing operation
#
##############################################################################
call_createItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsLifecycle operation
#
##############################################################################
call_createItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsLiveChat operation
#
##############################################################################
call_createItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsLoyalty operation
#
##############################################################################
call_createItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsMaintenance operation
#
##############################################################################
call_createItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPayroll operation
#
##############################################################################
call_createItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPerformance operation
#
##############################################################################
call_createItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPointofSale operation
#
##############################################################################
call_createItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPolicy operation
#
##############################################################################
call_createItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsProcurement operation
#
##############################################################################
call_createItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsProductionBatch operation
#
##############################################################################
call_createItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsProject operation
#
##############################################################################
call_createItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPurchaseOrders operation
#
##############################################################################
call_createItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsQualityCheck operation
#
##############################################################################
call_createItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsQuotes operation
#
##############################################################################
call_createItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsRecruit operation
#
##############################################################################
call_createItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsRegulations operation
#
##############################################################################
call_createItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsRentals operation
#
##############################################################################
call_createItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsShipment operation
#
##############################################################################
call_createItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSocialMedia operation
#
##############################################################################
call_createItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSocialResponsibility operation
#
##############################################################################
call_createItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSuppliers operation
#
##############################################################################
call_createItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSurveys operation
#
##############################################################################
call_createItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSustainableSupplyChain operation
#
##############################################################################
call_createItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsTaxes operation
#
##############################################################################
call_createItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsTraining operation
#
##############################################################################
call_createItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsTransactions operation
#
##############################################################################
call_createItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsAccounts operation
#
##############################################################################
call_deleteItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsAppointments operation
#
##############################################################################
call_deleteItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsBudgets operation
#
##############################################################################
call_deleteItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsCampaigns operation
#
##############################################################################
call_deleteItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsCarbonFootprint operation
#
##############################################################################
call_deleteItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsCompanyAssets operation
#
##############################################################################
call_deleteItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsContent operation
#
##############################################################################
call_deleteItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsContracts operation
#
##############################################################################
call_deleteItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsCrm operation
#
##############################################################################
call_deleteItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsDepartment operation
#
##############################################################################
call_deleteItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsDistribution operation
#
##############################################################################
call_deleteItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsEmailCampaigns operation
#
##############################################################################
call_deleteItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsEmployeeDirectory operation
#
##############################################################################
call_deleteItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsEnergyEfficiency operation
#
##############################################################################
call_deleteItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsEnvironmentalCompliance operation
#
##############################################################################
call_deleteItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsEvents operation
#
##############################################################################
call_deleteItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsExpenses operation
#
##############################################################################
call_deleteItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsFacilities operation
#
##############################################################################
call_deleteItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsFeedback operation
#
##############################################################################
call_deleteItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsForum operation
#
##############################################################################
call_deleteItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsFulfillment operation
#
##############################################################################
call_deleteItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsGovernanceandEthics operation
#
##############################################################################
call_deleteItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsHelpdesk operation
#
##############################################################################
call_deleteItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsInventory operation
#
##############################################################################
call_deleteItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsInvoices operation
#
##############################################################################
call_deleteItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsInvoicing operation
#
##############################################################################
call_deleteItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsLifecycle operation
#
##############################################################################
call_deleteItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsLiveChat operation
#
##############################################################################
call_deleteItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsLoyalty operation
#
##############################################################################
call_deleteItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsMaintenance operation
#
##############################################################################
call_deleteItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsPayroll operation
#
##############################################################################
call_deleteItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsPerformance operation
#
##############################################################################
call_deleteItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsPointofSale operation
#
##############################################################################
call_deleteItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsPolicy operation
#
##############################################################################
call_deleteItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsProcurement operation
#
##############################################################################
call_deleteItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsProductionBatch operation
#
##############################################################################
call_deleteItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsProject operation
#
##############################################################################
call_deleteItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsPurchaseOrders operation
#
##############################################################################
call_deleteItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsQualityCheck operation
#
##############################################################################
call_deleteItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsQuotes operation
#
##############################################################################
call_deleteItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsRecruit operation
#
##############################################################################
call_deleteItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsRegulations operation
#
##############################################################################
call_deleteItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsRentals operation
#
##############################################################################
call_deleteItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsShipment operation
#
##############################################################################
call_deleteItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsSocialMedia operation
#
##############################################################################
call_deleteItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsSocialResponsibility operation
#
##############################################################################
call_deleteItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsSuppliers operation
#
##############################################################################
call_deleteItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsSurveys operation
#
##############################################################################
call_deleteItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsSustainableSupplyChain operation
#
##############################################################################
call_deleteItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsTaxes operation
#
##############################################################################
call_deleteItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsTraining operation
#
##############################################################################
call_deleteItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteItemsTransactions operation
#
##############################################################################
call_deleteItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsAccounts operation
#
##############################################################################
call_deleteSingleItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/accounts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsAppointments operation
#
##############################################################################
call_deleteSingleItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/appointments/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsBudgets operation
#
##############################################################################
call_deleteSingleItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/budgets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCampaigns operation
#
##############################################################################
call_deleteSingleItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCarbonFootprint operation
#
##############################################################################
call_deleteSingleItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/carbon_footprint/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCompanyAssets operation
#
##############################################################################
call_deleteSingleItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/company_assets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsContent operation
#
##############################################################################
call_deleteSingleItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/content/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsContracts operation
#
##############################################################################
call_deleteSingleItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/contracts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCrm operation
#
##############################################################################
call_deleteSingleItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/crm/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsDepartment operation
#
##############################################################################
call_deleteSingleItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/department/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsDistribution operation
#
##############################################################################
call_deleteSingleItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/distribution/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEmailCampaigns operation
#
##############################################################################
call_deleteSingleItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/email_campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEmployeeDirectory operation
#
##############################################################################
call_deleteSingleItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/employee_directory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEnergyEfficiency operation
#
##############################################################################
call_deleteSingleItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/energy_efficiency/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEnvironmentalCompliance operation
#
##############################################################################
call_deleteSingleItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/environmental_compliance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEvents operation
#
##############################################################################
call_deleteSingleItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/events/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsExpenses operation
#
##############################################################################
call_deleteSingleItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/expenses/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsFacilities operation
#
##############################################################################
call_deleteSingleItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/facilities/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsFeedback operation
#
##############################################################################
call_deleteSingleItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/feedback/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsForum operation
#
##############################################################################
call_deleteSingleItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/forum/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsFulfillment operation
#
##############################################################################
call_deleteSingleItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/fulfillment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsGovernanceandEthics operation
#
##############################################################################
call_deleteSingleItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsHelpdesk operation
#
##############################################################################
call_deleteSingleItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/helpdesk/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsInventory operation
#
##############################################################################
call_deleteSingleItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/inventory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsInvoices operation
#
##############################################################################
call_deleteSingleItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoices/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsInvoicing operation
#
##############################################################################
call_deleteSingleItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoicing/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsLifecycle operation
#
##############################################################################
call_deleteSingleItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/lifecycle/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsLiveChat operation
#
##############################################################################
call_deleteSingleItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/live_chat/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsLoyalty operation
#
##############################################################################
call_deleteSingleItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/loyalty/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsMaintenance operation
#
##############################################################################
call_deleteSingleItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/maintenance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPayroll operation
#
##############################################################################
call_deleteSingleItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/payroll/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPerformance operation
#
##############################################################################
call_deleteSingleItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/performance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPointofSale operation
#
##############################################################################
call_deleteSingleItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/point_of_sale/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPolicy operation
#
##############################################################################
call_deleteSingleItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/policy/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsProcurement operation
#
##############################################################################
call_deleteSingleItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/procurement/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsProductionBatch operation
#
##############################################################################
call_deleteSingleItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/production_batch/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsProject operation
#
##############################################################################
call_deleteSingleItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/project/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPurchaseOrders operation
#
##############################################################################
call_deleteSingleItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/purchase_orders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsQualityCheck operation
#
##############################################################################
call_deleteSingleItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quality_check/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsQuotes operation
#
##############################################################################
call_deleteSingleItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quotes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsRecruit operation
#
##############################################################################
call_deleteSingleItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/recruit/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsRegulations operation
#
##############################################################################
call_deleteSingleItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/regulations/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsRentals operation
#
##############################################################################
call_deleteSingleItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/rentals/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsShipment operation
#
##############################################################################
call_deleteSingleItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/shipment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSocialMedia operation
#
##############################################################################
call_deleteSingleItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_media/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSocialResponsibility operation
#
##############################################################################
call_deleteSingleItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_responsibility/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSuppliers operation
#
##############################################################################
call_deleteSingleItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/suppliers/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSurveys operation
#
##############################################################################
call_deleteSingleItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/surveys/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSustainableSupplyChain operation
#
##############################################################################
call_deleteSingleItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsTaxes operation
#
##############################################################################
call_deleteSingleItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/taxes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsTraining operation
#
##############################################################################
call_deleteSingleItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/training/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsTransactions operation
#
##############################################################################
call_deleteSingleItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/transactions/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsAccounts operation
#
##############################################################################
call_readItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsAppointments operation
#
##############################################################################
call_readItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsBudgets operation
#
##############################################################################
call_readItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCampaigns operation
#
##############################################################################
call_readItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCarbonFootprint operation
#
##############################################################################
call_readItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCompanyAssets operation
#
##############################################################################
call_readItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsContent operation
#
##############################################################################
call_readItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsContracts operation
#
##############################################################################
call_readItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCrm operation
#
##############################################################################
call_readItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsDepartment operation
#
##############################################################################
call_readItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsDistribution operation
#
##############################################################################
call_readItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEmailCampaigns operation
#
##############################################################################
call_readItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEmployeeDirectory operation
#
##############################################################################
call_readItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEnergyEfficiency operation
#
##############################################################################
call_readItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEnvironmentalCompliance operation
#
##############################################################################
call_readItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEvents operation
#
##############################################################################
call_readItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsExpenses operation
#
##############################################################################
call_readItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsFacilities operation
#
##############################################################################
call_readItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsFeedback operation
#
##############################################################################
call_readItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsForum operation
#
##############################################################################
call_readItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsFulfillment operation
#
##############################################################################
call_readItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsGovernanceandEthics operation
#
##############################################################################
call_readItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsHelpdesk operation
#
##############################################################################
call_readItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsInventory operation
#
##############################################################################
call_readItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsInvoices operation
#
##############################################################################
call_readItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsInvoicing operation
#
##############################################################################
call_readItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsLifecycle operation
#
##############################################################################
call_readItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsLiveChat operation
#
##############################################################################
call_readItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsLoyalty operation
#
##############################################################################
call_readItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsMaintenance operation
#
##############################################################################
call_readItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPayroll operation
#
##############################################################################
call_readItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPerformance operation
#
##############################################################################
call_readItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPointofSale operation
#
##############################################################################
call_readItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPolicy operation
#
##############################################################################
call_readItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsProcurement operation
#
##############################################################################
call_readItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsProductionBatch operation
#
##############################################################################
call_readItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsProject operation
#
##############################################################################
call_readItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPurchaseOrders operation
#
##############################################################################
call_readItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsQualityCheck operation
#
##############################################################################
call_readItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsQuotes operation
#
##############################################################################
call_readItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsRecruit operation
#
##############################################################################
call_readItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsRegulations operation
#
##############################################################################
call_readItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsRentals operation
#
##############################################################################
call_readItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsShipment operation
#
##############################################################################
call_readItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSocialMedia operation
#
##############################################################################
call_readItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSocialResponsibility operation
#
##############################################################################
call_readItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSuppliers operation
#
##############################################################################
call_readItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSurveys operation
#
##############################################################################
call_readItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSustainableSupplyChain operation
#
##############################################################################
call_readItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsTaxes operation
#
##############################################################################
call_readItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsTraining operation
#
##############################################################################
call_readItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsTransactions operation
#
##############################################################################
call_readItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsAccounts operation
#
##############################################################################
call_readSingleItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/accounts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsAppointments operation
#
##############################################################################
call_readSingleItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/appointments/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsBudgets operation
#
##############################################################################
call_readSingleItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/budgets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCampaigns operation
#
##############################################################################
call_readSingleItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCarbonFootprint operation
#
##############################################################################
call_readSingleItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCompanyAssets operation
#
##############################################################################
call_readSingleItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/company_assets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsContent operation
#
##############################################################################
call_readSingleItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/content/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsContracts operation
#
##############################################################################
call_readSingleItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/contracts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCrm operation
#
##############################################################################
call_readSingleItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/crm/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsDepartment operation
#
##############################################################################
call_readSingleItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/department/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsDistribution operation
#
##############################################################################
call_readSingleItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/distribution/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEmailCampaigns operation
#
##############################################################################
call_readSingleItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/email_campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEmployeeDirectory operation
#
##############################################################################
call_readSingleItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/employee_directory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEnergyEfficiency operation
#
##############################################################################
call_readSingleItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEnvironmentalCompliance operation
#
##############################################################################
call_readSingleItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEvents operation
#
##############################################################################
call_readSingleItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/events/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsExpenses operation
#
##############################################################################
call_readSingleItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/expenses/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsFacilities operation
#
##############################################################################
call_readSingleItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/facilities/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsFeedback operation
#
##############################################################################
call_readSingleItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/feedback/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsForum operation
#
##############################################################################
call_readSingleItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/forum/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsFulfillment operation
#
##############################################################################
call_readSingleItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/fulfillment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsGovernanceandEthics operation
#
##############################################################################
call_readSingleItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsHelpdesk operation
#
##############################################################################
call_readSingleItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/helpdesk/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsInventory operation
#
##############################################################################
call_readSingleItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/inventory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsInvoices operation
#
##############################################################################
call_readSingleItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/invoices/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsInvoicing operation
#
##############################################################################
call_readSingleItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/invoicing/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsLifecycle operation
#
##############################################################################
call_readSingleItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/lifecycle/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsLiveChat operation
#
##############################################################################
call_readSingleItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/live_chat/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsLoyalty operation
#
##############################################################################
call_readSingleItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/loyalty/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsMaintenance operation
#
##############################################################################
call_readSingleItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/maintenance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPayroll operation
#
##############################################################################
call_readSingleItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/payroll/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPerformance operation
#
##############################################################################
call_readSingleItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/performance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPointofSale operation
#
##############################################################################
call_readSingleItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/point_of_sale/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPolicy operation
#
##############################################################################
call_readSingleItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/policy/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsProcurement operation
#
##############################################################################
call_readSingleItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/procurement/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsProductionBatch operation
#
##############################################################################
call_readSingleItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/production_batch/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsProject operation
#
##############################################################################
call_readSingleItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/project/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPurchaseOrders operation
#
##############################################################################
call_readSingleItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/purchase_orders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsQualityCheck operation
#
##############################################################################
call_readSingleItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/quality_check/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsQuotes operation
#
##############################################################################
call_readSingleItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/quotes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsRecruit operation
#
##############################################################################
call_readSingleItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/recruit/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsRegulations operation
#
##############################################################################
call_readSingleItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/regulations/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsRentals operation
#
##############################################################################
call_readSingleItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/rentals/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsShipment operation
#
##############################################################################
call_readSingleItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/shipment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSocialMedia operation
#
##############################################################################
call_readSingleItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/social_media/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSocialResponsibility operation
#
##############################################################################
call_readSingleItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/social_responsibility/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSuppliers operation
#
##############################################################################
call_readSingleItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/suppliers/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSurveys operation
#
##############################################################################
call_readSingleItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/surveys/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSustainableSupplyChain operation
#
##############################################################################
call_readSingleItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsTaxes operation
#
##############################################################################
call_readSingleItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/taxes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsTraining operation
#
##############################################################################
call_readSingleItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/training/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsTransactions operation
#
##############################################################################
call_readSingleItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/transactions/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsAccounts operation
#
##############################################################################
call_updateItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsAppointments operation
#
##############################################################################
call_updateItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsBudgets operation
#
##############################################################################
call_updateItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsCampaigns operation
#
##############################################################################
call_updateItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsCarbonFootprint operation
#
##############################################################################
call_updateItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsCompanyAssets operation
#
##############################################################################
call_updateItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsContent operation
#
##############################################################################
call_updateItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsContracts operation
#
##############################################################################
call_updateItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsCrm operation
#
##############################################################################
call_updateItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsDepartment operation
#
##############################################################################
call_updateItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsDistribution operation
#
##############################################################################
call_updateItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsEmailCampaigns operation
#
##############################################################################
call_updateItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsEmployeeDirectory operation
#
##############################################################################
call_updateItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsEnergyEfficiency operation
#
##############################################################################
call_updateItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsEnvironmentalCompliance operation
#
##############################################################################
call_updateItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsEvents operation
#
##############################################################################
call_updateItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsExpenses operation
#
##############################################################################
call_updateItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsFacilities operation
#
##############################################################################
call_updateItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsFeedback operation
#
##############################################################################
call_updateItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsForum operation
#
##############################################################################
call_updateItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsFulfillment operation
#
##############################################################################
call_updateItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsGovernanceandEthics operation
#
##############################################################################
call_updateItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsHelpdesk operation
#
##############################################################################
call_updateItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsInventory operation
#
##############################################################################
call_updateItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsInvoices operation
#
##############################################################################
call_updateItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsInvoicing operation
#
##############################################################################
call_updateItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsLifecycle operation
#
##############################################################################
call_updateItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsLiveChat operation
#
##############################################################################
call_updateItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsLoyalty operation
#
##############################################################################
call_updateItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsMaintenance operation
#
##############################################################################
call_updateItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsPayroll operation
#
##############################################################################
call_updateItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsPerformance operation
#
##############################################################################
call_updateItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsPointofSale operation
#
##############################################################################
call_updateItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsPolicy operation
#
##############################################################################
call_updateItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsProcurement operation
#
##############################################################################
call_updateItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsProductionBatch operation
#
##############################################################################
call_updateItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsProject operation
#
##############################################################################
call_updateItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsPurchaseOrders operation
#
##############################################################################
call_updateItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsQualityCheck operation
#
##############################################################################
call_updateItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsQuotes operation
#
##############################################################################
call_updateItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsRecruit operation
#
##############################################################################
call_updateItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsRegulations operation
#
##############################################################################
call_updateItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsRentals operation
#
##############################################################################
call_updateItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsShipment operation
#
##############################################################################
call_updateItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsSocialMedia operation
#
##############################################################################
call_updateItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsSocialResponsibility operation
#
##############################################################################
call_updateItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsSuppliers operation
#
##############################################################################
call_updateItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsSurveys operation
#
##############################################################################
call_updateItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsSustainableSupplyChain operation
#
##############################################################################
call_updateItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsTaxes operation
#
##############################################################################
call_updateItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsTraining operation
#
##############################################################################
call_updateItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateItemsTransactions operation
#
##############################################################################
call_updateItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsAccounts operation
#
##############################################################################
call_updateSingleItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/accounts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsAppointments operation
#
##############################################################################
call_updateSingleItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/appointments/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsBudgets operation
#
##############################################################################
call_updateSingleItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/budgets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCampaigns operation
#
##############################################################################
call_updateSingleItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCarbonFootprint operation
#
##############################################################################
call_updateSingleItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCompanyAssets operation
#
##############################################################################
call_updateSingleItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/company_assets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsContent operation
#
##############################################################################
call_updateSingleItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/content/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsContracts operation
#
##############################################################################
call_updateSingleItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/contracts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCrm operation
#
##############################################################################
call_updateSingleItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/crm/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsDepartment operation
#
##############################################################################
call_updateSingleItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/department/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsDistribution operation
#
##############################################################################
call_updateSingleItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/distribution/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEmailCampaigns operation
#
##############################################################################
call_updateSingleItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/email_campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEmployeeDirectory operation
#
##############################################################################
call_updateSingleItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/employee_directory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEnergyEfficiency operation
#
##############################################################################
call_updateSingleItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEnvironmentalCompliance operation
#
##############################################################################
call_updateSingleItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEvents operation
#
##############################################################################
call_updateSingleItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/events/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsExpenses operation
#
##############################################################################
call_updateSingleItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/expenses/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsFacilities operation
#
##############################################################################
call_updateSingleItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/facilities/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsFeedback operation
#
##############################################################################
call_updateSingleItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/feedback/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsForum operation
#
##############################################################################
call_updateSingleItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/forum/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsFulfillment operation
#
##############################################################################
call_updateSingleItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/fulfillment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsGovernanceandEthics operation
#
##############################################################################
call_updateSingleItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsHelpdesk operation
#
##############################################################################
call_updateSingleItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/helpdesk/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsInventory operation
#
##############################################################################
call_updateSingleItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/inventory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsInvoices operation
#
##############################################################################
call_updateSingleItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/invoices/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsInvoicing operation
#
##############################################################################
call_updateSingleItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/invoicing/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsLifecycle operation
#
##############################################################################
call_updateSingleItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/lifecycle/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsLiveChat operation
#
##############################################################################
call_updateSingleItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/live_chat/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsLoyalty operation
#
##############################################################################
call_updateSingleItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/loyalty/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsMaintenance operation
#
##############################################################################
call_updateSingleItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/maintenance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPayroll operation
#
##############################################################################
call_updateSingleItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/payroll/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPerformance operation
#
##############################################################################
call_updateSingleItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/performance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPointofSale operation
#
##############################################################################
call_updateSingleItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/point_of_sale/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPolicy operation
#
##############################################################################
call_updateSingleItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/policy/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsProcurement operation
#
##############################################################################
call_updateSingleItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/procurement/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsProductionBatch operation
#
##############################################################################
call_updateSingleItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/production_batch/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsProject operation
#
##############################################################################
call_updateSingleItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/project/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPurchaseOrders operation
#
##############################################################################
call_updateSingleItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/purchase_orders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsQualityCheck operation
#
##############################################################################
call_updateSingleItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/quality_check/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsQuotes operation
#
##############################################################################
call_updateSingleItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/quotes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsRecruit operation
#
##############################################################################
call_updateSingleItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/recruit/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsRegulations operation
#
##############################################################################
call_updateSingleItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/regulations/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsRentals operation
#
##############################################################################
call_updateSingleItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/rentals/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsShipment operation
#
##############################################################################
call_updateSingleItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/shipment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSocialMedia operation
#
##############################################################################
call_updateSingleItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/social_media/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSocialResponsibility operation
#
##############################################################################
call_updateSingleItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/social_responsibility/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSuppliers operation
#
##############################################################################
call_updateSingleItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/suppliers/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSurveys operation
#
##############################################################################
call_updateSingleItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/surveys/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSustainableSupplyChain operation
#
##############################################################################
call_updateSingleItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsTaxes operation
#
##############################################################################
call_updateSingleItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/taxes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsTraining operation
#
##############################################################################
call_updateSingleItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/training/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsTransactions operation
#
##############################################################################
call_updateSingleItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/transactions/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsAccounts operation
#
##############################################################################
call_createItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsAccounts operation
#
##############################################################################
call_deleteItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsAccounts operation
#
##############################################################################
call_deleteSingleItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/accounts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsAccounts operation
#
##############################################################################
call_readItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsAccounts operation
#
##############################################################################
call_readSingleItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/accounts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsAccounts operation
#
##############################################################################
call_updateItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsAccounts operation
#
##############################################################################
call_updateSingleItemsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/accounts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsAppointments operation
#
##############################################################################
call_createItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsAppointments operation
#
##############################################################################
call_deleteItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsAppointments operation
#
##############################################################################
call_deleteSingleItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/appointments/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsAppointments operation
#
##############################################################################
call_readItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsAppointments operation
#
##############################################################################
call_readSingleItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/appointments/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsAppointments operation
#
##############################################################################
call_updateItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/appointments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsAppointments operation
#
##############################################################################
call_updateSingleItemsAppointments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/appointments/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsBudgets operation
#
##############################################################################
call_createItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsBudgets operation
#
##############################################################################
call_deleteItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsBudgets operation
#
##############################################################################
call_deleteSingleItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/budgets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsBudgets operation
#
##############################################################################
call_readItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsBudgets operation
#
##############################################################################
call_readSingleItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/budgets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsBudgets operation
#
##############################################################################
call_updateItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/budgets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsBudgets operation
#
##############################################################################
call_updateSingleItemsBudgets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/budgets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCampaigns operation
#
##############################################################################
call_createItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsCampaigns operation
#
##############################################################################
call_deleteItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCampaigns operation
#
##############################################################################
call_deleteSingleItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCampaigns operation
#
##############################################################################
call_readItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCampaigns operation
#
##############################################################################
call_readSingleItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsCampaigns operation
#
##############################################################################
call_updateItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCampaigns operation
#
##############################################################################
call_updateSingleItemsCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCarbonFootprint operation
#
##############################################################################
call_createItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsCarbonFootprint operation
#
##############################################################################
call_deleteItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCarbonFootprint operation
#
##############################################################################
call_deleteSingleItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/carbon_footprint/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCarbonFootprint operation
#
##############################################################################
call_readItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCarbonFootprint operation
#
##############################################################################
call_readSingleItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsCarbonFootprint operation
#
##############################################################################
call_updateItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCarbonFootprint operation
#
##############################################################################
call_updateSingleItemsCarbonFootprint() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/carbon_footprint/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCompanyAssets operation
#
##############################################################################
call_createItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsCompanyAssets operation
#
##############################################################################
call_deleteItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCompanyAssets operation
#
##############################################################################
call_deleteSingleItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/company_assets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCompanyAssets operation
#
##############################################################################
call_readItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCompanyAssets operation
#
##############################################################################
call_readSingleItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/company_assets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsCompanyAssets operation
#
##############################################################################
call_updateItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/company_assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCompanyAssets operation
#
##############################################################################
call_updateSingleItemsCompanyAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/company_assets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsContent operation
#
##############################################################################
call_createItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsContent operation
#
##############################################################################
call_deleteItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsContent operation
#
##############################################################################
call_deleteSingleItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/content/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsContent operation
#
##############################################################################
call_readItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsContent operation
#
##############################################################################
call_readSingleItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/content/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsContent operation
#
##############################################################################
call_updateItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsContent operation
#
##############################################################################
call_updateSingleItemsContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/content/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsContracts operation
#
##############################################################################
call_createItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsContracts operation
#
##############################################################################
call_deleteItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsContracts operation
#
##############################################################################
call_deleteSingleItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/contracts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsContracts operation
#
##############################################################################
call_readItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsContracts operation
#
##############################################################################
call_readSingleItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/contracts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsContracts operation
#
##############################################################################
call_updateItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/contracts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsContracts operation
#
##############################################################################
call_updateSingleItemsContracts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/contracts/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsCrm operation
#
##############################################################################
call_createItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsCrm operation
#
##############################################################################
call_deleteItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsCrm operation
#
##############################################################################
call_deleteSingleItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/crm/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsCrm operation
#
##############################################################################
call_readItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsCrm operation
#
##############################################################################
call_readSingleItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/crm/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsCrm operation
#
##############################################################################
call_updateItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/crm" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsCrm operation
#
##############################################################################
call_updateSingleItemsCrm() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/crm/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsDepartment operation
#
##############################################################################
call_createItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsDepartment operation
#
##############################################################################
call_deleteItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsDepartment operation
#
##############################################################################
call_deleteSingleItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/department/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsDepartment operation
#
##############################################################################
call_readItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsDepartment operation
#
##############################################################################
call_readSingleItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/department/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsDepartment operation
#
##############################################################################
call_updateItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/department" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsDepartment operation
#
##############################################################################
call_updateSingleItemsDepartment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/department/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsDistribution operation
#
##############################################################################
call_createItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsDistribution operation
#
##############################################################################
call_deleteItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsDistribution operation
#
##############################################################################
call_deleteSingleItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/distribution/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsDistribution operation
#
##############################################################################
call_readItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsDistribution operation
#
##############################################################################
call_readSingleItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/distribution/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsDistribution operation
#
##############################################################################
call_updateItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/distribution" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsDistribution operation
#
##############################################################################
call_updateSingleItemsDistribution() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/distribution/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEmailCampaigns operation
#
##############################################################################
call_createItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsEmailCampaigns operation
#
##############################################################################
call_deleteItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEmailCampaigns operation
#
##############################################################################
call_deleteSingleItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/email_campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEmailCampaigns operation
#
##############################################################################
call_readItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEmailCampaigns operation
#
##############################################################################
call_readSingleItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/email_campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsEmailCampaigns operation
#
##############################################################################
call_updateItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/email_campaigns" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEmailCampaigns operation
#
##############################################################################
call_updateSingleItemsEmailCampaigns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/email_campaigns/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEmployeeDirectory operation
#
##############################################################################
call_createItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsEmployeeDirectory operation
#
##############################################################################
call_deleteItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEmployeeDirectory operation
#
##############################################################################
call_deleteSingleItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/employee_directory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEmployeeDirectory operation
#
##############################################################################
call_readItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEmployeeDirectory operation
#
##############################################################################
call_readSingleItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/employee_directory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsEmployeeDirectory operation
#
##############################################################################
call_updateItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/employee_directory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEmployeeDirectory operation
#
##############################################################################
call_updateSingleItemsEmployeeDirectory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/employee_directory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEnergyEfficiency operation
#
##############################################################################
call_createItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsEnergyEfficiency operation
#
##############################################################################
call_deleteItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEnergyEfficiency operation
#
##############################################################################
call_deleteSingleItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/energy_efficiency/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEnergyEfficiency operation
#
##############################################################################
call_readItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEnergyEfficiency operation
#
##############################################################################
call_readSingleItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsEnergyEfficiency operation
#
##############################################################################
call_updateItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEnergyEfficiency operation
#
##############################################################################
call_updateSingleItemsEnergyEfficiency() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/energy_efficiency/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEnvironmentalCompliance operation
#
##############################################################################
call_createItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsEnvironmentalCompliance operation
#
##############################################################################
call_deleteItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEnvironmentalCompliance operation
#
##############################################################################
call_deleteSingleItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/environmental_compliance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEnvironmentalCompliance operation
#
##############################################################################
call_readItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEnvironmentalCompliance operation
#
##############################################################################
call_readSingleItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsEnvironmentalCompliance operation
#
##############################################################################
call_updateItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEnvironmentalCompliance operation
#
##############################################################################
call_updateSingleItemsEnvironmentalCompliance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/environmental_compliance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsEvents operation
#
##############################################################################
call_createItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsEvents operation
#
##############################################################################
call_deleteItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsEvents operation
#
##############################################################################
call_deleteSingleItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/events/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsEvents operation
#
##############################################################################
call_readItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsEvents operation
#
##############################################################################
call_readSingleItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/events/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsEvents operation
#
##############################################################################
call_updateItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsEvents operation
#
##############################################################################
call_updateSingleItemsEvents() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/events/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsExpenses operation
#
##############################################################################
call_createItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsExpenses operation
#
##############################################################################
call_deleteItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsExpenses operation
#
##############################################################################
call_deleteSingleItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/expenses/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsExpenses operation
#
##############################################################################
call_readItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsExpenses operation
#
##############################################################################
call_readSingleItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/expenses/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsExpenses operation
#
##############################################################################
call_updateItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/expenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsExpenses operation
#
##############################################################################
call_updateSingleItemsExpenses() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/expenses/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsFacilities operation
#
##############################################################################
call_createItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsFacilities operation
#
##############################################################################
call_deleteItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsFacilities operation
#
##############################################################################
call_deleteSingleItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/facilities/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsFacilities operation
#
##############################################################################
call_readItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsFacilities operation
#
##############################################################################
call_readSingleItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/facilities/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsFacilities operation
#
##############################################################################
call_updateItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/facilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsFacilities operation
#
##############################################################################
call_updateSingleItemsFacilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/facilities/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsFeedback operation
#
##############################################################################
call_createItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsFeedback operation
#
##############################################################################
call_deleteItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsFeedback operation
#
##############################################################################
call_deleteSingleItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/feedback/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsFeedback operation
#
##############################################################################
call_readItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsFeedback operation
#
##############################################################################
call_readSingleItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/feedback/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsFeedback operation
#
##############################################################################
call_updateItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsFeedback operation
#
##############################################################################
call_updateSingleItemsFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/feedback/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsForum operation
#
##############################################################################
call_createItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsForum operation
#
##############################################################################
call_deleteItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsForum operation
#
##############################################################################
call_deleteSingleItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/forum/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsForum operation
#
##############################################################################
call_readItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsForum operation
#
##############################################################################
call_readSingleItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/forum/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsForum operation
#
##############################################################################
call_updateItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/forum" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsForum operation
#
##############################################################################
call_updateSingleItemsForum() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/forum/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsFulfillment operation
#
##############################################################################
call_createItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsFulfillment operation
#
##############################################################################
call_deleteItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsFulfillment operation
#
##############################################################################
call_deleteSingleItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/fulfillment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsFulfillment operation
#
##############################################################################
call_readItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsFulfillment operation
#
##############################################################################
call_readSingleItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/fulfillment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsFulfillment operation
#
##############################################################################
call_updateItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/fulfillment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsFulfillment operation
#
##############################################################################
call_updateSingleItemsFulfillment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/fulfillment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsGovernanceandEthics operation
#
##############################################################################
call_createItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsGovernanceandEthics operation
#
##############################################################################
call_deleteItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsGovernanceandEthics operation
#
##############################################################################
call_deleteSingleItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsGovernanceandEthics operation
#
##############################################################################
call_readItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsGovernanceandEthics operation
#
##############################################################################
call_readSingleItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsGovernanceandEthics operation
#
##############################################################################
call_updateItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsGovernanceandEthics operation
#
##############################################################################
call_updateSingleItemsGovernanceandEthics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/governance_and_ethics/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsHelpdesk operation
#
##############################################################################
call_createItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsHelpdesk operation
#
##############################################################################
call_deleteItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsHelpdesk operation
#
##############################################################################
call_deleteSingleItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/helpdesk/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsHelpdesk operation
#
##############################################################################
call_readItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsHelpdesk operation
#
##############################################################################
call_readSingleItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/helpdesk/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsHelpdesk operation
#
##############################################################################
call_updateItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/helpdesk" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsHelpdesk operation
#
##############################################################################
call_updateSingleItemsHelpdesk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/helpdesk/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsInventory operation
#
##############################################################################
call_createItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsInventory operation
#
##############################################################################
call_deleteItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsInventory operation
#
##############################################################################
call_deleteSingleItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/inventory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsInventory operation
#
##############################################################################
call_readItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsInventory operation
#
##############################################################################
call_readSingleItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/inventory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsInventory operation
#
##############################################################################
call_updateItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/inventory" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsInventory operation
#
##############################################################################
call_updateSingleItemsInventory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/inventory/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsInvoices operation
#
##############################################################################
call_createItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsInvoices operation
#
##############################################################################
call_deleteItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsInvoices operation
#
##############################################################################
call_deleteSingleItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoices/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsInvoices operation
#
##############################################################################
call_readItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsInvoices operation
#
##############################################################################
call_readSingleItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/invoices/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsInvoices operation
#
##############################################################################
call_updateItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/invoices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsInvoices operation
#
##############################################################################
call_updateSingleItemsInvoices() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/invoices/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsInvoicing operation
#
##############################################################################
call_createItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsInvoicing operation
#
##############################################################################
call_deleteItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsInvoicing operation
#
##############################################################################
call_deleteSingleItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/invoicing/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsInvoicing operation
#
##############################################################################
call_readItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsInvoicing operation
#
##############################################################################
call_readSingleItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/invoicing/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsInvoicing operation
#
##############################################################################
call_updateItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/invoicing" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsInvoicing operation
#
##############################################################################
call_updateSingleItemsInvoicing() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/invoicing/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsLifecycle operation
#
##############################################################################
call_createItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsLifecycle operation
#
##############################################################################
call_deleteItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsLifecycle operation
#
##############################################################################
call_deleteSingleItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/lifecycle/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsLifecycle operation
#
##############################################################################
call_readItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsLifecycle operation
#
##############################################################################
call_readSingleItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/lifecycle/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsLifecycle operation
#
##############################################################################
call_updateItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/lifecycle" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsLifecycle operation
#
##############################################################################
call_updateSingleItemsLifecycle() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/lifecycle/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsLiveChat operation
#
##############################################################################
call_createItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsLiveChat operation
#
##############################################################################
call_deleteItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsLiveChat operation
#
##############################################################################
call_deleteSingleItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/live_chat/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsLiveChat operation
#
##############################################################################
call_readItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsLiveChat operation
#
##############################################################################
call_readSingleItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/live_chat/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsLiveChat operation
#
##############################################################################
call_updateItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/live_chat" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsLiveChat operation
#
##############################################################################
call_updateSingleItemsLiveChat() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/live_chat/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsLoyalty operation
#
##############################################################################
call_createItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsLoyalty operation
#
##############################################################################
call_deleteItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsLoyalty operation
#
##############################################################################
call_deleteSingleItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/loyalty/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsLoyalty operation
#
##############################################################################
call_readItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsLoyalty operation
#
##############################################################################
call_readSingleItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/loyalty/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsLoyalty operation
#
##############################################################################
call_updateItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/loyalty" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsLoyalty operation
#
##############################################################################
call_updateSingleItemsLoyalty() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/loyalty/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsMaintenance operation
#
##############################################################################
call_createItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsMaintenance operation
#
##############################################################################
call_deleteItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsMaintenance operation
#
##############################################################################
call_deleteSingleItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/maintenance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsMaintenance operation
#
##############################################################################
call_readItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsMaintenance operation
#
##############################################################################
call_readSingleItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/maintenance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsMaintenance operation
#
##############################################################################
call_updateItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/maintenance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsMaintenance operation
#
##############################################################################
call_updateSingleItemsMaintenance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/maintenance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPayroll operation
#
##############################################################################
call_createItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsPayroll operation
#
##############################################################################
call_deleteItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPayroll operation
#
##############################################################################
call_deleteSingleItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/payroll/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPayroll operation
#
##############################################################################
call_readItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPayroll operation
#
##############################################################################
call_readSingleItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/payroll/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsPayroll operation
#
##############################################################################
call_updateItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/payroll" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPayroll operation
#
##############################################################################
call_updateSingleItemsPayroll() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/payroll/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPerformance operation
#
##############################################################################
call_createItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsPerformance operation
#
##############################################################################
call_deleteItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPerformance operation
#
##############################################################################
call_deleteSingleItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/performance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPerformance operation
#
##############################################################################
call_readItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPerformance operation
#
##############################################################################
call_readSingleItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/performance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsPerformance operation
#
##############################################################################
call_updateItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/performance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPerformance operation
#
##############################################################################
call_updateSingleItemsPerformance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/performance/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPointofSale operation
#
##############################################################################
call_createItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsPointofSale operation
#
##############################################################################
call_deleteItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPointofSale operation
#
##############################################################################
call_deleteSingleItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/point_of_sale/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPointofSale operation
#
##############################################################################
call_readItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPointofSale operation
#
##############################################################################
call_readSingleItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/point_of_sale/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsPointofSale operation
#
##############################################################################
call_updateItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/point_of_sale" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPointofSale operation
#
##############################################################################
call_updateSingleItemsPointofSale() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/point_of_sale/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPolicy operation
#
##############################################################################
call_createItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsPolicy operation
#
##############################################################################
call_deleteItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPolicy operation
#
##############################################################################
call_deleteSingleItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/policy/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPolicy operation
#
##############################################################################
call_readItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPolicy operation
#
##############################################################################
call_readSingleItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/policy/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsPolicy operation
#
##############################################################################
call_updateItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPolicy operation
#
##############################################################################
call_updateSingleItemsPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/policy/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsProcurement operation
#
##############################################################################
call_createItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsProcurement operation
#
##############################################################################
call_deleteItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsProcurement operation
#
##############################################################################
call_deleteSingleItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/procurement/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsProcurement operation
#
##############################################################################
call_readItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsProcurement operation
#
##############################################################################
call_readSingleItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/procurement/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsProcurement operation
#
##############################################################################
call_updateItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/procurement" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsProcurement operation
#
##############################################################################
call_updateSingleItemsProcurement() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/procurement/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsProductionBatch operation
#
##############################################################################
call_createItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsProductionBatch operation
#
##############################################################################
call_deleteItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsProductionBatch operation
#
##############################################################################
call_deleteSingleItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/production_batch/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsProductionBatch operation
#
##############################################################################
call_readItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsProductionBatch operation
#
##############################################################################
call_readSingleItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/production_batch/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsProductionBatch operation
#
##############################################################################
call_updateItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/production_batch" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsProductionBatch operation
#
##############################################################################
call_updateSingleItemsProductionBatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/production_batch/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsProject operation
#
##############################################################################
call_createItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsProject operation
#
##############################################################################
call_deleteItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsProject operation
#
##############################################################################
call_deleteSingleItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/project/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsProject operation
#
##############################################################################
call_readItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsProject operation
#
##############################################################################
call_readSingleItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/project/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsProject operation
#
##############################################################################
call_updateItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/project" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsProject operation
#
##############################################################################
call_updateSingleItemsProject() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/project/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsPurchaseOrders operation
#
##############################################################################
call_createItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsPurchaseOrders operation
#
##############################################################################
call_deleteItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsPurchaseOrders operation
#
##############################################################################
call_deleteSingleItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/purchase_orders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsPurchaseOrders operation
#
##############################################################################
call_readItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsPurchaseOrders operation
#
##############################################################################
call_readSingleItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/purchase_orders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsPurchaseOrders operation
#
##############################################################################
call_updateItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/purchase_orders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsPurchaseOrders operation
#
##############################################################################
call_updateSingleItemsPurchaseOrders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/purchase_orders/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsQualityCheck operation
#
##############################################################################
call_createItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsQualityCheck operation
#
##############################################################################
call_deleteItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsQualityCheck operation
#
##############################################################################
call_deleteSingleItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quality_check/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsQualityCheck operation
#
##############################################################################
call_readItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsQualityCheck operation
#
##############################################################################
call_readSingleItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/quality_check/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsQualityCheck operation
#
##############################################################################
call_updateItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/quality_check" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsQualityCheck operation
#
##############################################################################
call_updateSingleItemsQualityCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/quality_check/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsQuotes operation
#
##############################################################################
call_createItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsQuotes operation
#
##############################################################################
call_deleteItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsQuotes operation
#
##############################################################################
call_deleteSingleItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/quotes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsQuotes operation
#
##############################################################################
call_readItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsQuotes operation
#
##############################################################################
call_readSingleItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/quotes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsQuotes operation
#
##############################################################################
call_updateItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/quotes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsQuotes operation
#
##############################################################################
call_updateSingleItemsQuotes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/quotes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsRecruit operation
#
##############################################################################
call_createItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsRecruit operation
#
##############################################################################
call_deleteItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsRecruit operation
#
##############################################################################
call_deleteSingleItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/recruit/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsRecruit operation
#
##############################################################################
call_readItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsRecruit operation
#
##############################################################################
call_readSingleItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/recruit/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsRecruit operation
#
##############################################################################
call_updateItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/recruit" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsRecruit operation
#
##############################################################################
call_updateSingleItemsRecruit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/recruit/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsRegulations operation
#
##############################################################################
call_createItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsRegulations operation
#
##############################################################################
call_deleteItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsRegulations operation
#
##############################################################################
call_deleteSingleItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/regulations/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsRegulations operation
#
##############################################################################
call_readItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsRegulations operation
#
##############################################################################
call_readSingleItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/regulations/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsRegulations operation
#
##############################################################################
call_updateItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/regulations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsRegulations operation
#
##############################################################################
call_updateSingleItemsRegulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/regulations/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsRentals operation
#
##############################################################################
call_createItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsRentals operation
#
##############################################################################
call_deleteItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsRentals operation
#
##############################################################################
call_deleteSingleItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/rentals/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsRentals operation
#
##############################################################################
call_readItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsRentals operation
#
##############################################################################
call_readSingleItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/rentals/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsRentals operation
#
##############################################################################
call_updateItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/rentals" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsRentals operation
#
##############################################################################
call_updateSingleItemsRentals() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/rentals/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsShipment operation
#
##############################################################################
call_createItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsShipment operation
#
##############################################################################
call_deleteItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsShipment operation
#
##############################################################################
call_deleteSingleItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/shipment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsShipment operation
#
##############################################################################
call_readItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsShipment operation
#
##############################################################################
call_readSingleItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/shipment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsShipment operation
#
##############################################################################
call_updateItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/shipment" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsShipment operation
#
##############################################################################
call_updateSingleItemsShipment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/shipment/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSocialMedia operation
#
##############################################################################
call_createItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsSocialMedia operation
#
##############################################################################
call_deleteItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSocialMedia operation
#
##############################################################################
call_deleteSingleItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_media/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSocialMedia operation
#
##############################################################################
call_readItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSocialMedia operation
#
##############################################################################
call_readSingleItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/social_media/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsSocialMedia operation
#
##############################################################################
call_updateItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/social_media" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSocialMedia operation
#
##############################################################################
call_updateSingleItemsSocialMedia() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/social_media/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSocialResponsibility operation
#
##############################################################################
call_createItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsSocialResponsibility operation
#
##############################################################################
call_deleteItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSocialResponsibility operation
#
##############################################################################
call_deleteSingleItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/social_responsibility/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSocialResponsibility operation
#
##############################################################################
call_readItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSocialResponsibility operation
#
##############################################################################
call_readSingleItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/social_responsibility/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsSocialResponsibility operation
#
##############################################################################
call_updateItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/social_responsibility" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSocialResponsibility operation
#
##############################################################################
call_updateSingleItemsSocialResponsibility() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/social_responsibility/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSuppliers operation
#
##############################################################################
call_createItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsSuppliers operation
#
##############################################################################
call_deleteItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSuppliers operation
#
##############################################################################
call_deleteSingleItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/suppliers/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSuppliers operation
#
##############################################################################
call_readItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSuppliers operation
#
##############################################################################
call_readSingleItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/suppliers/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsSuppliers operation
#
##############################################################################
call_updateItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/suppliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSuppliers operation
#
##############################################################################
call_updateSingleItemsSuppliers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/suppliers/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSurveys operation
#
##############################################################################
call_createItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsSurveys operation
#
##############################################################################
call_deleteItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSurveys operation
#
##############################################################################
call_deleteSingleItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/surveys/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSurveys operation
#
##############################################################################
call_readItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSurveys operation
#
##############################################################################
call_readSingleItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/surveys/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsSurveys operation
#
##############################################################################
call_updateItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/surveys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSurveys operation
#
##############################################################################
call_updateSingleItemsSurveys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/surveys/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsSustainableSupplyChain operation
#
##############################################################################
call_createItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsSustainableSupplyChain operation
#
##############################################################################
call_deleteItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsSustainableSupplyChain operation
#
##############################################################################
call_deleteSingleItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsSustainableSupplyChain operation
#
##############################################################################
call_readItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsSustainableSupplyChain operation
#
##############################################################################
call_readSingleItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsSustainableSupplyChain operation
#
##############################################################################
call_updateItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsSustainableSupplyChain operation
#
##############################################################################
call_updateSingleItemsSustainableSupplyChain() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/sustainable_supply_chain/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsTaxes operation
#
##############################################################################
call_createItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsTaxes operation
#
##############################################################################
call_deleteItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsTaxes operation
#
##############################################################################
call_deleteSingleItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/taxes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsTaxes operation
#
##############################################################################
call_readItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsTaxes operation
#
##############################################################################
call_readSingleItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/taxes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsTaxes operation
#
##############################################################################
call_updateItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/taxes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsTaxes operation
#
##############################################################################
call_updateSingleItemsTaxes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/taxes/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsTraining operation
#
##############################################################################
call_createItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsTraining operation
#
##############################################################################
call_deleteItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsTraining operation
#
##############################################################################
call_deleteSingleItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/training/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsTraining operation
#
##############################################################################
call_readItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsTraining operation
#
##############################################################################
call_readSingleItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/training/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsTraining operation
#
##############################################################################
call_updateItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/training" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsTraining operation
#
##############################################################################
call_updateSingleItemsTraining() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/training/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createItemsTransactions operation
#
##############################################################################
call_createItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(meta)
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteItemsTransactions operation
#
##############################################################################
call_deleteItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteSingleItemsTransactions operation
#
##############################################################################
call_deleteSingleItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/items/transactions/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readItemsTransactions operation
#
##############################################################################
call_readItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search  )
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readSingleItemsTransactions operation
#
##############################################################################
call_readSingleItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta version)
    local path

    if ! path=$(build_request_path "/items/transactions/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateItemsTransactions operation
#
##############################################################################
call_updateItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/items/transactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateSingleItemsTransactions operation
#
##############################################################################
call_updateSingleItemsTransactions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/items/transactions/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getMyPermissions operation
#
##############################################################################
call_getMyPermissions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/permissions/me" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPermission operation
#
##############################################################################
call_getPermission() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/permissions/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPermissions operation
#
##############################################################################
call_getPermissions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit offset meta sort filter search page)
    local path

    if ! path=$(build_request_path "/permissions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createPreset operation
#
##############################################################################
call_createPreset() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/presets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deletePreset operation
#
##############################################################################
call_deletePreset() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/presets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deletePresets operation
#
##############################################################################
call_deletePresets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/presets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPreset operation
#
##############################################################################
call_getPreset() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta  )
    local path

    if ! path=$(build_request_path "/presets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPresets operation
#
##############################################################################
call_getPresets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit offset page sort filter search meta  )
    local path

    if ! path=$(build_request_path "/presets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updatePreset operation
#
##############################################################################
call_updatePreset() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/presets/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updatePresets operation
#
##############################################################################
call_updatePresets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/presets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getRelation operation
#
##############################################################################
call_getRelation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/relations/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRelations operation
#
##############################################################################
call_getRelations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit offset meta sort filter search page)
    local path

    if ! path=$(build_request_path "/relations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRole operation
#
##############################################################################
call_getRole() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/roles/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRoles operation
#
##############################################################################
call_getRoles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit offset meta sort filter search page)
    local path

    if ! path=$(build_request_path "/roles" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schemaApply operation
#
##############################################################################
call_schemaApply() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/schema/apply" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- multipart/form-data"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call schemaDiff operation
#
##############################################################################
call_schemaDiff() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(force)
    local path

    if ! path=$(build_request_path "/schema/diff" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo -e "\\t- multipart/form-data"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call schemaSnapshot operation
#
##############################################################################
call_schemaSnapshot() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(export)
    local path

    if ! path=$(build_request_path "/schema/snapshot" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call ping operation
#
##############################################################################
call_ping() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/server/ping" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call serverInfo operation
#
##############################################################################
call_serverInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(super_admin_token)
    local path

    if ! path=$(build_request_path "/server/info" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSettings operation
#
##############################################################################
call_getSettings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(limit offset meta page)
    local path

    if ! path=$(build_request_path "/settings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getMe operation
#
##############################################################################
call_getMe() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/users/me" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUser operation
#
##############################################################################
call_getUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/users/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getUsers operation
#
##############################################################################
call_getUsers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit offset meta sort filter search)
    local path

    if ! path=$(build_request_path "/users" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateLastUsedPageMe operation
#
##############################################################################
call_updateLastUsedPageMe() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/users/me/track/page" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateMe operation
#
##############################################################################
call_updateMe() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/users/me" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateUser operation
#
##############################################################################
call_updateUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields meta)
    local path

    if ! path=$(build_request_path "/users/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateUsers operation
#
##############################################################################
call_updateUsers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(fields limit meta offset sort filter search)
    local path

    if ! path=$(build_request_path "/users" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call clearCache operation
#
##############################################################################
call_clearCache() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/utils/cache/clear" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call export operation
#
##############################################################################
call_export() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(collection)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/utils/export/{collection}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call hashGenerate operation
#
##############################################################################
call_hashGenerate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/utils/hash/generate" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call hashVerify operation
#
##############################################################################
call_hashVerify() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/utils/hash/verify" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call import operation
#
##############################################################################
call_import() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(collection)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/utils/import/{collection}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    body_form_urlencoded=$(body_parameters_to_form_urlencoded)
    if [[ "$print_curl" = true ]]; then
        echo "curl ${body_form_urlencoded} ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${body_form_urlencoded} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call random operation
#
##############################################################################
call_random() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(length)
    local path

    if ! path=$(build_request_path "/utils/random/string" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call sort operation
#
##############################################################################
call_sort() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(collection)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=()
    local path

    if ! path=$(build_request_path "/utils/sort/{collection}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}



##############################################################################
#
# Main
#
##############################################################################


# Check dependencies
type curl >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'cURL' installed."; exit 1; }
type sed >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'sed' installed."; exit 1; }
type column >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'bsdmainutils' installed."; exit 1; }

#
# Process command line
#
# Pass all arguments before 'operation' to cURL except the ones we override
#
take_user=false
take_host=false
take_accept_header=false
take_contenttype_header=false

for key in "$@"; do
# Take the value of -u|--user argument
if [[ "$take_user" = true ]]; then
    basic_auth_credential="$key"
    take_user=false
    continue
fi
# Take the value of --host argument
if [[ "$take_host" = true ]]; then
    host="$key"
    take_host=false
    continue
fi
# Take the value of --accept argument
if [[ "$take_accept_header" = true ]]; then
    header_accept=$(lookup_mime_type "$key")
    take_accept_header=false
    continue
fi
# Take the value of --content-type argument
if [[ "$take_contenttype_header" = true ]]; then
    header_content_type=$(lookup_mime_type "$key")
    take_contenttype_header=false
    continue
fi
case $key in
    -h|--help)
    if [[ "x$operation" == "x" ]]; then
        print_help
        exit 0
    else
        eval "print_${operation}_help"
        exit 0
    fi
    ;;
    -V|--version)
    print_version
    exit 0
    ;;
    --about)
    print_about
    exit 0
    ;;
    -u|--user)
    take_user=true
    ;;
    --host)
    take_host=true
    ;;
    --force)
    force=true
    ;;
    -ac|--accept)
    take_accept_header=true
    ;;
    -ct|--content-type)
    take_contenttype_header=true
    ;;
    --dry-run)
    print_curl=true
    ;;
    -nc|--no-colors)
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        MAGENTA=""
        CYAN=""
        WHITE=""
        BOLD=""
        OFF=""
        result_color_table=( "" "" "" "" "" "" "" )
    ;;
    createComment)
    operation="createComment"
    ;;
    getActivities)
    operation="getActivities"
    ;;
    getActivity)
    operation="getActivity"
    ;;
    getAsset)
    operation="getAsset"
    ;;
    login)
    operation="login"
    ;;
    logout)
    operation="logout"
    ;;
    oauth)
    operation="oauth"
    ;;
    oauthProvider)
    operation="oauthProvider"
    ;;
    passwordRequest)
    operation="passwordRequest"
    ;;
    passwordReset)
    operation="passwordReset"
    ;;
    refresh)
    operation="refresh"
    ;;
    getCollection)
    operation="getCollection"
    ;;
    getCollections)
    operation="getCollections"
    ;;
    getDisplays)
    operation="getDisplays"
    ;;
    getInterfaces)
    operation="getInterfaces"
    ;;
    getLayouts)
    operation="getLayouts"
    ;;
    getModules)
    operation="getModules"
    ;;
    getCollectionField)
    operation="getCollectionField"
    ;;
    getCollectionFields)
    operation="getCollectionFields"
    ;;
    getFields)
    operation="getFields"
    ;;
    createFile)
    operation="createFile"
    ;;
    deleteFile)
    operation="deleteFile"
    ;;
    deleteFiles)
    operation="deleteFiles"
    ;;
    getFile)
    operation="getFile"
    ;;
    getFiles)
    operation="getFiles"
    ;;
    updateFile)
    operation="updateFile"
    ;;
    updateFiles)
    operation="updateFiles"
    ;;
    getFlow)
    operation="getFlow"
    ;;
    getFlows)
    operation="getFlows"
    ;;
    createFolder)
    operation="createFolder"
    ;;
    deleteFolder)
    operation="deleteFolder"
    ;;
    deleteFolders)
    operation="deleteFolders"
    ;;
    getFolder)
    operation="getFolder"
    ;;
    getFolders)
    operation="getFolders"
    ;;
    updateFolder)
    operation="updateFolder"
    ;;
    updateFolders)
    operation="updateFolders"
    ;;
    createItemsAccounts)
    operation="createItemsAccounts"
    ;;
    createItemsAppointments)
    operation="createItemsAppointments"
    ;;
    createItemsBudgets)
    operation="createItemsBudgets"
    ;;
    createItemsCampaigns)
    operation="createItemsCampaigns"
    ;;
    createItemsCarbonFootprint)
    operation="createItemsCarbonFootprint"
    ;;
    createItemsCompanyAssets)
    operation="createItemsCompanyAssets"
    ;;
    createItemsContent)
    operation="createItemsContent"
    ;;
    createItemsContracts)
    operation="createItemsContracts"
    ;;
    createItemsCrm)
    operation="createItemsCrm"
    ;;
    createItemsDepartment)
    operation="createItemsDepartment"
    ;;
    createItemsDistribution)
    operation="createItemsDistribution"
    ;;
    createItemsEmailCampaigns)
    operation="createItemsEmailCampaigns"
    ;;
    createItemsEmployeeDirectory)
    operation="createItemsEmployeeDirectory"
    ;;
    createItemsEnergyEfficiency)
    operation="createItemsEnergyEfficiency"
    ;;
    createItemsEnvironmentalCompliance)
    operation="createItemsEnvironmentalCompliance"
    ;;
    createItemsEvents)
    operation="createItemsEvents"
    ;;
    createItemsExpenses)
    operation="createItemsExpenses"
    ;;
    createItemsFacilities)
    operation="createItemsFacilities"
    ;;
    createItemsFeedback)
    operation="createItemsFeedback"
    ;;
    createItemsForum)
    operation="createItemsForum"
    ;;
    createItemsFulfillment)
    operation="createItemsFulfillment"
    ;;
    createItemsGovernanceandEthics)
    operation="createItemsGovernanceandEthics"
    ;;
    createItemsHelpdesk)
    operation="createItemsHelpdesk"
    ;;
    createItemsInventory)
    operation="createItemsInventory"
    ;;
    createItemsInvoices)
    operation="createItemsInvoices"
    ;;
    createItemsInvoicing)
    operation="createItemsInvoicing"
    ;;
    createItemsLifecycle)
    operation="createItemsLifecycle"
    ;;
    createItemsLiveChat)
    operation="createItemsLiveChat"
    ;;
    createItemsLoyalty)
    operation="createItemsLoyalty"
    ;;
    createItemsMaintenance)
    operation="createItemsMaintenance"
    ;;
    createItemsPayroll)
    operation="createItemsPayroll"
    ;;
    createItemsPerformance)
    operation="createItemsPerformance"
    ;;
    createItemsPointofSale)
    operation="createItemsPointofSale"
    ;;
    createItemsPolicy)
    operation="createItemsPolicy"
    ;;
    createItemsProcurement)
    operation="createItemsProcurement"
    ;;
    createItemsProductionBatch)
    operation="createItemsProductionBatch"
    ;;
    createItemsProject)
    operation="createItemsProject"
    ;;
    createItemsPurchaseOrders)
    operation="createItemsPurchaseOrders"
    ;;
    createItemsQualityCheck)
    operation="createItemsQualityCheck"
    ;;
    createItemsQuotes)
    operation="createItemsQuotes"
    ;;
    createItemsRecruit)
    operation="createItemsRecruit"
    ;;
    createItemsRegulations)
    operation="createItemsRegulations"
    ;;
    createItemsRentals)
    operation="createItemsRentals"
    ;;
    createItemsShipment)
    operation="createItemsShipment"
    ;;
    createItemsSocialMedia)
    operation="createItemsSocialMedia"
    ;;
    createItemsSocialResponsibility)
    operation="createItemsSocialResponsibility"
    ;;
    createItemsSuppliers)
    operation="createItemsSuppliers"
    ;;
    createItemsSurveys)
    operation="createItemsSurveys"
    ;;
    createItemsSustainableSupplyChain)
    operation="createItemsSustainableSupplyChain"
    ;;
    createItemsTaxes)
    operation="createItemsTaxes"
    ;;
    createItemsTraining)
    operation="createItemsTraining"
    ;;
    createItemsTransactions)
    operation="createItemsTransactions"
    ;;
    deleteItemsAccounts)
    operation="deleteItemsAccounts"
    ;;
    deleteItemsAppointments)
    operation="deleteItemsAppointments"
    ;;
    deleteItemsBudgets)
    operation="deleteItemsBudgets"
    ;;
    deleteItemsCampaigns)
    operation="deleteItemsCampaigns"
    ;;
    deleteItemsCarbonFootprint)
    operation="deleteItemsCarbonFootprint"
    ;;
    deleteItemsCompanyAssets)
    operation="deleteItemsCompanyAssets"
    ;;
    deleteItemsContent)
    operation="deleteItemsContent"
    ;;
    deleteItemsContracts)
    operation="deleteItemsContracts"
    ;;
    deleteItemsCrm)
    operation="deleteItemsCrm"
    ;;
    deleteItemsDepartment)
    operation="deleteItemsDepartment"
    ;;
    deleteItemsDistribution)
    operation="deleteItemsDistribution"
    ;;
    deleteItemsEmailCampaigns)
    operation="deleteItemsEmailCampaigns"
    ;;
    deleteItemsEmployeeDirectory)
    operation="deleteItemsEmployeeDirectory"
    ;;
    deleteItemsEnergyEfficiency)
    operation="deleteItemsEnergyEfficiency"
    ;;
    deleteItemsEnvironmentalCompliance)
    operation="deleteItemsEnvironmentalCompliance"
    ;;
    deleteItemsEvents)
    operation="deleteItemsEvents"
    ;;
    deleteItemsExpenses)
    operation="deleteItemsExpenses"
    ;;
    deleteItemsFacilities)
    operation="deleteItemsFacilities"
    ;;
    deleteItemsFeedback)
    operation="deleteItemsFeedback"
    ;;
    deleteItemsForum)
    operation="deleteItemsForum"
    ;;
    deleteItemsFulfillment)
    operation="deleteItemsFulfillment"
    ;;
    deleteItemsGovernanceandEthics)
    operation="deleteItemsGovernanceandEthics"
    ;;
    deleteItemsHelpdesk)
    operation="deleteItemsHelpdesk"
    ;;
    deleteItemsInventory)
    operation="deleteItemsInventory"
    ;;
    deleteItemsInvoices)
    operation="deleteItemsInvoices"
    ;;
    deleteItemsInvoicing)
    operation="deleteItemsInvoicing"
    ;;
    deleteItemsLifecycle)
    operation="deleteItemsLifecycle"
    ;;
    deleteItemsLiveChat)
    operation="deleteItemsLiveChat"
    ;;
    deleteItemsLoyalty)
    operation="deleteItemsLoyalty"
    ;;
    deleteItemsMaintenance)
    operation="deleteItemsMaintenance"
    ;;
    deleteItemsPayroll)
    operation="deleteItemsPayroll"
    ;;
    deleteItemsPerformance)
    operation="deleteItemsPerformance"
    ;;
    deleteItemsPointofSale)
    operation="deleteItemsPointofSale"
    ;;
    deleteItemsPolicy)
    operation="deleteItemsPolicy"
    ;;
    deleteItemsProcurement)
    operation="deleteItemsProcurement"
    ;;
    deleteItemsProductionBatch)
    operation="deleteItemsProductionBatch"
    ;;
    deleteItemsProject)
    operation="deleteItemsProject"
    ;;
    deleteItemsPurchaseOrders)
    operation="deleteItemsPurchaseOrders"
    ;;
    deleteItemsQualityCheck)
    operation="deleteItemsQualityCheck"
    ;;
    deleteItemsQuotes)
    operation="deleteItemsQuotes"
    ;;
    deleteItemsRecruit)
    operation="deleteItemsRecruit"
    ;;
    deleteItemsRegulations)
    operation="deleteItemsRegulations"
    ;;
    deleteItemsRentals)
    operation="deleteItemsRentals"
    ;;
    deleteItemsShipment)
    operation="deleteItemsShipment"
    ;;
    deleteItemsSocialMedia)
    operation="deleteItemsSocialMedia"
    ;;
    deleteItemsSocialResponsibility)
    operation="deleteItemsSocialResponsibility"
    ;;
    deleteItemsSuppliers)
    operation="deleteItemsSuppliers"
    ;;
    deleteItemsSurveys)
    operation="deleteItemsSurveys"
    ;;
    deleteItemsSustainableSupplyChain)
    operation="deleteItemsSustainableSupplyChain"
    ;;
    deleteItemsTaxes)
    operation="deleteItemsTaxes"
    ;;
    deleteItemsTraining)
    operation="deleteItemsTraining"
    ;;
    deleteItemsTransactions)
    operation="deleteItemsTransactions"
    ;;
    deleteSingleItemsAccounts)
    operation="deleteSingleItemsAccounts"
    ;;
    deleteSingleItemsAppointments)
    operation="deleteSingleItemsAppointments"
    ;;
    deleteSingleItemsBudgets)
    operation="deleteSingleItemsBudgets"
    ;;
    deleteSingleItemsCampaigns)
    operation="deleteSingleItemsCampaigns"
    ;;
    deleteSingleItemsCarbonFootprint)
    operation="deleteSingleItemsCarbonFootprint"
    ;;
    deleteSingleItemsCompanyAssets)
    operation="deleteSingleItemsCompanyAssets"
    ;;
    deleteSingleItemsContent)
    operation="deleteSingleItemsContent"
    ;;
    deleteSingleItemsContracts)
    operation="deleteSingleItemsContracts"
    ;;
    deleteSingleItemsCrm)
    operation="deleteSingleItemsCrm"
    ;;
    deleteSingleItemsDepartment)
    operation="deleteSingleItemsDepartment"
    ;;
    deleteSingleItemsDistribution)
    operation="deleteSingleItemsDistribution"
    ;;
    deleteSingleItemsEmailCampaigns)
    operation="deleteSingleItemsEmailCampaigns"
    ;;
    deleteSingleItemsEmployeeDirectory)
    operation="deleteSingleItemsEmployeeDirectory"
    ;;
    deleteSingleItemsEnergyEfficiency)
    operation="deleteSingleItemsEnergyEfficiency"
    ;;
    deleteSingleItemsEnvironmentalCompliance)
    operation="deleteSingleItemsEnvironmentalCompliance"
    ;;
    deleteSingleItemsEvents)
    operation="deleteSingleItemsEvents"
    ;;
    deleteSingleItemsExpenses)
    operation="deleteSingleItemsExpenses"
    ;;
    deleteSingleItemsFacilities)
    operation="deleteSingleItemsFacilities"
    ;;
    deleteSingleItemsFeedback)
    operation="deleteSingleItemsFeedback"
    ;;
    deleteSingleItemsForum)
    operation="deleteSingleItemsForum"
    ;;
    deleteSingleItemsFulfillment)
    operation="deleteSingleItemsFulfillment"
    ;;
    deleteSingleItemsGovernanceandEthics)
    operation="deleteSingleItemsGovernanceandEthics"
    ;;
    deleteSingleItemsHelpdesk)
    operation="deleteSingleItemsHelpdesk"
    ;;
    deleteSingleItemsInventory)
    operation="deleteSingleItemsInventory"
    ;;
    deleteSingleItemsInvoices)
    operation="deleteSingleItemsInvoices"
    ;;
    deleteSingleItemsInvoicing)
    operation="deleteSingleItemsInvoicing"
    ;;
    deleteSingleItemsLifecycle)
    operation="deleteSingleItemsLifecycle"
    ;;
    deleteSingleItemsLiveChat)
    operation="deleteSingleItemsLiveChat"
    ;;
    deleteSingleItemsLoyalty)
    operation="deleteSingleItemsLoyalty"
    ;;
    deleteSingleItemsMaintenance)
    operation="deleteSingleItemsMaintenance"
    ;;
    deleteSingleItemsPayroll)
    operation="deleteSingleItemsPayroll"
    ;;
    deleteSingleItemsPerformance)
    operation="deleteSingleItemsPerformance"
    ;;
    deleteSingleItemsPointofSale)
    operation="deleteSingleItemsPointofSale"
    ;;
    deleteSingleItemsPolicy)
    operation="deleteSingleItemsPolicy"
    ;;
    deleteSingleItemsProcurement)
    operation="deleteSingleItemsProcurement"
    ;;
    deleteSingleItemsProductionBatch)
    operation="deleteSingleItemsProductionBatch"
    ;;
    deleteSingleItemsProject)
    operation="deleteSingleItemsProject"
    ;;
    deleteSingleItemsPurchaseOrders)
    operation="deleteSingleItemsPurchaseOrders"
    ;;
    deleteSingleItemsQualityCheck)
    operation="deleteSingleItemsQualityCheck"
    ;;
    deleteSingleItemsQuotes)
    operation="deleteSingleItemsQuotes"
    ;;
    deleteSingleItemsRecruit)
    operation="deleteSingleItemsRecruit"
    ;;
    deleteSingleItemsRegulations)
    operation="deleteSingleItemsRegulations"
    ;;
    deleteSingleItemsRentals)
    operation="deleteSingleItemsRentals"
    ;;
    deleteSingleItemsShipment)
    operation="deleteSingleItemsShipment"
    ;;
    deleteSingleItemsSocialMedia)
    operation="deleteSingleItemsSocialMedia"
    ;;
    deleteSingleItemsSocialResponsibility)
    operation="deleteSingleItemsSocialResponsibility"
    ;;
    deleteSingleItemsSuppliers)
    operation="deleteSingleItemsSuppliers"
    ;;
    deleteSingleItemsSurveys)
    operation="deleteSingleItemsSurveys"
    ;;
    deleteSingleItemsSustainableSupplyChain)
    operation="deleteSingleItemsSustainableSupplyChain"
    ;;
    deleteSingleItemsTaxes)
    operation="deleteSingleItemsTaxes"
    ;;
    deleteSingleItemsTraining)
    operation="deleteSingleItemsTraining"
    ;;
    deleteSingleItemsTransactions)
    operation="deleteSingleItemsTransactions"
    ;;
    readItemsAccounts)
    operation="readItemsAccounts"
    ;;
    readItemsAppointments)
    operation="readItemsAppointments"
    ;;
    readItemsBudgets)
    operation="readItemsBudgets"
    ;;
    readItemsCampaigns)
    operation="readItemsCampaigns"
    ;;
    readItemsCarbonFootprint)
    operation="readItemsCarbonFootprint"
    ;;
    readItemsCompanyAssets)
    operation="readItemsCompanyAssets"
    ;;
    readItemsContent)
    operation="readItemsContent"
    ;;
    readItemsContracts)
    operation="readItemsContracts"
    ;;
    readItemsCrm)
    operation="readItemsCrm"
    ;;
    readItemsDepartment)
    operation="readItemsDepartment"
    ;;
    readItemsDistribution)
    operation="readItemsDistribution"
    ;;
    readItemsEmailCampaigns)
    operation="readItemsEmailCampaigns"
    ;;
    readItemsEmployeeDirectory)
    operation="readItemsEmployeeDirectory"
    ;;
    readItemsEnergyEfficiency)
    operation="readItemsEnergyEfficiency"
    ;;
    readItemsEnvironmentalCompliance)
    operation="readItemsEnvironmentalCompliance"
    ;;
    readItemsEvents)
    operation="readItemsEvents"
    ;;
    readItemsExpenses)
    operation="readItemsExpenses"
    ;;
    readItemsFacilities)
    operation="readItemsFacilities"
    ;;
    readItemsFeedback)
    operation="readItemsFeedback"
    ;;
    readItemsForum)
    operation="readItemsForum"
    ;;
    readItemsFulfillment)
    operation="readItemsFulfillment"
    ;;
    readItemsGovernanceandEthics)
    operation="readItemsGovernanceandEthics"
    ;;
    readItemsHelpdesk)
    operation="readItemsHelpdesk"
    ;;
    readItemsInventory)
    operation="readItemsInventory"
    ;;
    readItemsInvoices)
    operation="readItemsInvoices"
    ;;
    readItemsInvoicing)
    operation="readItemsInvoicing"
    ;;
    readItemsLifecycle)
    operation="readItemsLifecycle"
    ;;
    readItemsLiveChat)
    operation="readItemsLiveChat"
    ;;
    readItemsLoyalty)
    operation="readItemsLoyalty"
    ;;
    readItemsMaintenance)
    operation="readItemsMaintenance"
    ;;
    readItemsPayroll)
    operation="readItemsPayroll"
    ;;
    readItemsPerformance)
    operation="readItemsPerformance"
    ;;
    readItemsPointofSale)
    operation="readItemsPointofSale"
    ;;
    readItemsPolicy)
    operation="readItemsPolicy"
    ;;
    readItemsProcurement)
    operation="readItemsProcurement"
    ;;
    readItemsProductionBatch)
    operation="readItemsProductionBatch"
    ;;
    readItemsProject)
    operation="readItemsProject"
    ;;
    readItemsPurchaseOrders)
    operation="readItemsPurchaseOrders"
    ;;
    readItemsQualityCheck)
    operation="readItemsQualityCheck"
    ;;
    readItemsQuotes)
    operation="readItemsQuotes"
    ;;
    readItemsRecruit)
    operation="readItemsRecruit"
    ;;
    readItemsRegulations)
    operation="readItemsRegulations"
    ;;
    readItemsRentals)
    operation="readItemsRentals"
    ;;
    readItemsShipment)
    operation="readItemsShipment"
    ;;
    readItemsSocialMedia)
    operation="readItemsSocialMedia"
    ;;
    readItemsSocialResponsibility)
    operation="readItemsSocialResponsibility"
    ;;
    readItemsSuppliers)
    operation="readItemsSuppliers"
    ;;
    readItemsSurveys)
    operation="readItemsSurveys"
    ;;
    readItemsSustainableSupplyChain)
    operation="readItemsSustainableSupplyChain"
    ;;
    readItemsTaxes)
    operation="readItemsTaxes"
    ;;
    readItemsTraining)
    operation="readItemsTraining"
    ;;
    readItemsTransactions)
    operation="readItemsTransactions"
    ;;
    readSingleItemsAccounts)
    operation="readSingleItemsAccounts"
    ;;
    readSingleItemsAppointments)
    operation="readSingleItemsAppointments"
    ;;
    readSingleItemsBudgets)
    operation="readSingleItemsBudgets"
    ;;
    readSingleItemsCampaigns)
    operation="readSingleItemsCampaigns"
    ;;
    readSingleItemsCarbonFootprint)
    operation="readSingleItemsCarbonFootprint"
    ;;
    readSingleItemsCompanyAssets)
    operation="readSingleItemsCompanyAssets"
    ;;
    readSingleItemsContent)
    operation="readSingleItemsContent"
    ;;
    readSingleItemsContracts)
    operation="readSingleItemsContracts"
    ;;
    readSingleItemsCrm)
    operation="readSingleItemsCrm"
    ;;
    readSingleItemsDepartment)
    operation="readSingleItemsDepartment"
    ;;
    readSingleItemsDistribution)
    operation="readSingleItemsDistribution"
    ;;
    readSingleItemsEmailCampaigns)
    operation="readSingleItemsEmailCampaigns"
    ;;
    readSingleItemsEmployeeDirectory)
    operation="readSingleItemsEmployeeDirectory"
    ;;
    readSingleItemsEnergyEfficiency)
    operation="readSingleItemsEnergyEfficiency"
    ;;
    readSingleItemsEnvironmentalCompliance)
    operation="readSingleItemsEnvironmentalCompliance"
    ;;
    readSingleItemsEvents)
    operation="readSingleItemsEvents"
    ;;
    readSingleItemsExpenses)
    operation="readSingleItemsExpenses"
    ;;
    readSingleItemsFacilities)
    operation="readSingleItemsFacilities"
    ;;
    readSingleItemsFeedback)
    operation="readSingleItemsFeedback"
    ;;
    readSingleItemsForum)
    operation="readSingleItemsForum"
    ;;
    readSingleItemsFulfillment)
    operation="readSingleItemsFulfillment"
    ;;
    readSingleItemsGovernanceandEthics)
    operation="readSingleItemsGovernanceandEthics"
    ;;
    readSingleItemsHelpdesk)
    operation="readSingleItemsHelpdesk"
    ;;
    readSingleItemsInventory)
    operation="readSingleItemsInventory"
    ;;
    readSingleItemsInvoices)
    operation="readSingleItemsInvoices"
    ;;
    readSingleItemsInvoicing)
    operation="readSingleItemsInvoicing"
    ;;
    readSingleItemsLifecycle)
    operation="readSingleItemsLifecycle"
    ;;
    readSingleItemsLiveChat)
    operation="readSingleItemsLiveChat"
    ;;
    readSingleItemsLoyalty)
    operation="readSingleItemsLoyalty"
    ;;
    readSingleItemsMaintenance)
    operation="readSingleItemsMaintenance"
    ;;
    readSingleItemsPayroll)
    operation="readSingleItemsPayroll"
    ;;
    readSingleItemsPerformance)
    operation="readSingleItemsPerformance"
    ;;
    readSingleItemsPointofSale)
    operation="readSingleItemsPointofSale"
    ;;
    readSingleItemsPolicy)
    operation="readSingleItemsPolicy"
    ;;
    readSingleItemsProcurement)
    operation="readSingleItemsProcurement"
    ;;
    readSingleItemsProductionBatch)
    operation="readSingleItemsProductionBatch"
    ;;
    readSingleItemsProject)
    operation="readSingleItemsProject"
    ;;
    readSingleItemsPurchaseOrders)
    operation="readSingleItemsPurchaseOrders"
    ;;
    readSingleItemsQualityCheck)
    operation="readSingleItemsQualityCheck"
    ;;
    readSingleItemsQuotes)
    operation="readSingleItemsQuotes"
    ;;
    readSingleItemsRecruit)
    operation="readSingleItemsRecruit"
    ;;
    readSingleItemsRegulations)
    operation="readSingleItemsRegulations"
    ;;
    readSingleItemsRentals)
    operation="readSingleItemsRentals"
    ;;
    readSingleItemsShipment)
    operation="readSingleItemsShipment"
    ;;
    readSingleItemsSocialMedia)
    operation="readSingleItemsSocialMedia"
    ;;
    readSingleItemsSocialResponsibility)
    operation="readSingleItemsSocialResponsibility"
    ;;
    readSingleItemsSuppliers)
    operation="readSingleItemsSuppliers"
    ;;
    readSingleItemsSurveys)
    operation="readSingleItemsSurveys"
    ;;
    readSingleItemsSustainableSupplyChain)
    operation="readSingleItemsSustainableSupplyChain"
    ;;
    readSingleItemsTaxes)
    operation="readSingleItemsTaxes"
    ;;
    readSingleItemsTraining)
    operation="readSingleItemsTraining"
    ;;
    readSingleItemsTransactions)
    operation="readSingleItemsTransactions"
    ;;
    updateItemsAccounts)
    operation="updateItemsAccounts"
    ;;
    updateItemsAppointments)
    operation="updateItemsAppointments"
    ;;
    updateItemsBudgets)
    operation="updateItemsBudgets"
    ;;
    updateItemsCampaigns)
    operation="updateItemsCampaigns"
    ;;
    updateItemsCarbonFootprint)
    operation="updateItemsCarbonFootprint"
    ;;
    updateItemsCompanyAssets)
    operation="updateItemsCompanyAssets"
    ;;
    updateItemsContent)
    operation="updateItemsContent"
    ;;
    updateItemsContracts)
    operation="updateItemsContracts"
    ;;
    updateItemsCrm)
    operation="updateItemsCrm"
    ;;
    updateItemsDepartment)
    operation="updateItemsDepartment"
    ;;
    updateItemsDistribution)
    operation="updateItemsDistribution"
    ;;
    updateItemsEmailCampaigns)
    operation="updateItemsEmailCampaigns"
    ;;
    updateItemsEmployeeDirectory)
    operation="updateItemsEmployeeDirectory"
    ;;
    updateItemsEnergyEfficiency)
    operation="updateItemsEnergyEfficiency"
    ;;
    updateItemsEnvironmentalCompliance)
    operation="updateItemsEnvironmentalCompliance"
    ;;
    updateItemsEvents)
    operation="updateItemsEvents"
    ;;
    updateItemsExpenses)
    operation="updateItemsExpenses"
    ;;
    updateItemsFacilities)
    operation="updateItemsFacilities"
    ;;
    updateItemsFeedback)
    operation="updateItemsFeedback"
    ;;
    updateItemsForum)
    operation="updateItemsForum"
    ;;
    updateItemsFulfillment)
    operation="updateItemsFulfillment"
    ;;
    updateItemsGovernanceandEthics)
    operation="updateItemsGovernanceandEthics"
    ;;
    updateItemsHelpdesk)
    operation="updateItemsHelpdesk"
    ;;
    updateItemsInventory)
    operation="updateItemsInventory"
    ;;
    updateItemsInvoices)
    operation="updateItemsInvoices"
    ;;
    updateItemsInvoicing)
    operation="updateItemsInvoicing"
    ;;
    updateItemsLifecycle)
    operation="updateItemsLifecycle"
    ;;
    updateItemsLiveChat)
    operation="updateItemsLiveChat"
    ;;
    updateItemsLoyalty)
    operation="updateItemsLoyalty"
    ;;
    updateItemsMaintenance)
    operation="updateItemsMaintenance"
    ;;
    updateItemsPayroll)
    operation="updateItemsPayroll"
    ;;
    updateItemsPerformance)
    operation="updateItemsPerformance"
    ;;
    updateItemsPointofSale)
    operation="updateItemsPointofSale"
    ;;
    updateItemsPolicy)
    operation="updateItemsPolicy"
    ;;
    updateItemsProcurement)
    operation="updateItemsProcurement"
    ;;
    updateItemsProductionBatch)
    operation="updateItemsProductionBatch"
    ;;
    updateItemsProject)
    operation="updateItemsProject"
    ;;
    updateItemsPurchaseOrders)
    operation="updateItemsPurchaseOrders"
    ;;
    updateItemsQualityCheck)
    operation="updateItemsQualityCheck"
    ;;
    updateItemsQuotes)
    operation="updateItemsQuotes"
    ;;
    updateItemsRecruit)
    operation="updateItemsRecruit"
    ;;
    updateItemsRegulations)
    operation="updateItemsRegulations"
    ;;
    updateItemsRentals)
    operation="updateItemsRentals"
    ;;
    updateItemsShipment)
    operation="updateItemsShipment"
    ;;
    updateItemsSocialMedia)
    operation="updateItemsSocialMedia"
    ;;
    updateItemsSocialResponsibility)
    operation="updateItemsSocialResponsibility"
    ;;
    updateItemsSuppliers)
    operation="updateItemsSuppliers"
    ;;
    updateItemsSurveys)
    operation="updateItemsSurveys"
    ;;
    updateItemsSustainableSupplyChain)
    operation="updateItemsSustainableSupplyChain"
    ;;
    updateItemsTaxes)
    operation="updateItemsTaxes"
    ;;
    updateItemsTraining)
    operation="updateItemsTraining"
    ;;
    updateItemsTransactions)
    operation="updateItemsTransactions"
    ;;
    updateSingleItemsAccounts)
    operation="updateSingleItemsAccounts"
    ;;
    updateSingleItemsAppointments)
    operation="updateSingleItemsAppointments"
    ;;
    updateSingleItemsBudgets)
    operation="updateSingleItemsBudgets"
    ;;
    updateSingleItemsCampaigns)
    operation="updateSingleItemsCampaigns"
    ;;
    updateSingleItemsCarbonFootprint)
    operation="updateSingleItemsCarbonFootprint"
    ;;
    updateSingleItemsCompanyAssets)
    operation="updateSingleItemsCompanyAssets"
    ;;
    updateSingleItemsContent)
    operation="updateSingleItemsContent"
    ;;
    updateSingleItemsContracts)
    operation="updateSingleItemsContracts"
    ;;
    updateSingleItemsCrm)
    operation="updateSingleItemsCrm"
    ;;
    updateSingleItemsDepartment)
    operation="updateSingleItemsDepartment"
    ;;
    updateSingleItemsDistribution)
    operation="updateSingleItemsDistribution"
    ;;
    updateSingleItemsEmailCampaigns)
    operation="updateSingleItemsEmailCampaigns"
    ;;
    updateSingleItemsEmployeeDirectory)
    operation="updateSingleItemsEmployeeDirectory"
    ;;
    updateSingleItemsEnergyEfficiency)
    operation="updateSingleItemsEnergyEfficiency"
    ;;
    updateSingleItemsEnvironmentalCompliance)
    operation="updateSingleItemsEnvironmentalCompliance"
    ;;
    updateSingleItemsEvents)
    operation="updateSingleItemsEvents"
    ;;
    updateSingleItemsExpenses)
    operation="updateSingleItemsExpenses"
    ;;
    updateSingleItemsFacilities)
    operation="updateSingleItemsFacilities"
    ;;
    updateSingleItemsFeedback)
    operation="updateSingleItemsFeedback"
    ;;
    updateSingleItemsForum)
    operation="updateSingleItemsForum"
    ;;
    updateSingleItemsFulfillment)
    operation="updateSingleItemsFulfillment"
    ;;
    updateSingleItemsGovernanceandEthics)
    operation="updateSingleItemsGovernanceandEthics"
    ;;
    updateSingleItemsHelpdesk)
    operation="updateSingleItemsHelpdesk"
    ;;
    updateSingleItemsInventory)
    operation="updateSingleItemsInventory"
    ;;
    updateSingleItemsInvoices)
    operation="updateSingleItemsInvoices"
    ;;
    updateSingleItemsInvoicing)
    operation="updateSingleItemsInvoicing"
    ;;
    updateSingleItemsLifecycle)
    operation="updateSingleItemsLifecycle"
    ;;
    updateSingleItemsLiveChat)
    operation="updateSingleItemsLiveChat"
    ;;
    updateSingleItemsLoyalty)
    operation="updateSingleItemsLoyalty"
    ;;
    updateSingleItemsMaintenance)
    operation="updateSingleItemsMaintenance"
    ;;
    updateSingleItemsPayroll)
    operation="updateSingleItemsPayroll"
    ;;
    updateSingleItemsPerformance)
    operation="updateSingleItemsPerformance"
    ;;
    updateSingleItemsPointofSale)
    operation="updateSingleItemsPointofSale"
    ;;
    updateSingleItemsPolicy)
    operation="updateSingleItemsPolicy"
    ;;
    updateSingleItemsProcurement)
    operation="updateSingleItemsProcurement"
    ;;
    updateSingleItemsProductionBatch)
    operation="updateSingleItemsProductionBatch"
    ;;
    updateSingleItemsProject)
    operation="updateSingleItemsProject"
    ;;
    updateSingleItemsPurchaseOrders)
    operation="updateSingleItemsPurchaseOrders"
    ;;
    updateSingleItemsQualityCheck)
    operation="updateSingleItemsQualityCheck"
    ;;
    updateSingleItemsQuotes)
    operation="updateSingleItemsQuotes"
    ;;
    updateSingleItemsRecruit)
    operation="updateSingleItemsRecruit"
    ;;
    updateSingleItemsRegulations)
    operation="updateSingleItemsRegulations"
    ;;
    updateSingleItemsRentals)
    operation="updateSingleItemsRentals"
    ;;
    updateSingleItemsShipment)
    operation="updateSingleItemsShipment"
    ;;
    updateSingleItemsSocialMedia)
    operation="updateSingleItemsSocialMedia"
    ;;
    updateSingleItemsSocialResponsibility)
    operation="updateSingleItemsSocialResponsibility"
    ;;
    updateSingleItemsSuppliers)
    operation="updateSingleItemsSuppliers"
    ;;
    updateSingleItemsSurveys)
    operation="updateSingleItemsSurveys"
    ;;
    updateSingleItemsSustainableSupplyChain)
    operation="updateSingleItemsSustainableSupplyChain"
    ;;
    updateSingleItemsTaxes)
    operation="updateSingleItemsTaxes"
    ;;
    updateSingleItemsTraining)
    operation="updateSingleItemsTraining"
    ;;
    updateSingleItemsTransactions)
    operation="updateSingleItemsTransactions"
    ;;
    createItemsAccounts)
    operation="createItemsAccounts"
    ;;
    deleteItemsAccounts)
    operation="deleteItemsAccounts"
    ;;
    deleteSingleItemsAccounts)
    operation="deleteSingleItemsAccounts"
    ;;
    readItemsAccounts)
    operation="readItemsAccounts"
    ;;
    readSingleItemsAccounts)
    operation="readSingleItemsAccounts"
    ;;
    updateItemsAccounts)
    operation="updateItemsAccounts"
    ;;
    updateSingleItemsAccounts)
    operation="updateSingleItemsAccounts"
    ;;
    createItemsAppointments)
    operation="createItemsAppointments"
    ;;
    deleteItemsAppointments)
    operation="deleteItemsAppointments"
    ;;
    deleteSingleItemsAppointments)
    operation="deleteSingleItemsAppointments"
    ;;
    readItemsAppointments)
    operation="readItemsAppointments"
    ;;
    readSingleItemsAppointments)
    operation="readSingleItemsAppointments"
    ;;
    updateItemsAppointments)
    operation="updateItemsAppointments"
    ;;
    updateSingleItemsAppointments)
    operation="updateSingleItemsAppointments"
    ;;
    createItemsBudgets)
    operation="createItemsBudgets"
    ;;
    deleteItemsBudgets)
    operation="deleteItemsBudgets"
    ;;
    deleteSingleItemsBudgets)
    operation="deleteSingleItemsBudgets"
    ;;
    readItemsBudgets)
    operation="readItemsBudgets"
    ;;
    readSingleItemsBudgets)
    operation="readSingleItemsBudgets"
    ;;
    updateItemsBudgets)
    operation="updateItemsBudgets"
    ;;
    updateSingleItemsBudgets)
    operation="updateSingleItemsBudgets"
    ;;
    createItemsCampaigns)
    operation="createItemsCampaigns"
    ;;
    deleteItemsCampaigns)
    operation="deleteItemsCampaigns"
    ;;
    deleteSingleItemsCampaigns)
    operation="deleteSingleItemsCampaigns"
    ;;
    readItemsCampaigns)
    operation="readItemsCampaigns"
    ;;
    readSingleItemsCampaigns)
    operation="readSingleItemsCampaigns"
    ;;
    updateItemsCampaigns)
    operation="updateItemsCampaigns"
    ;;
    updateSingleItemsCampaigns)
    operation="updateSingleItemsCampaigns"
    ;;
    createItemsCarbonFootprint)
    operation="createItemsCarbonFootprint"
    ;;
    deleteItemsCarbonFootprint)
    operation="deleteItemsCarbonFootprint"
    ;;
    deleteSingleItemsCarbonFootprint)
    operation="deleteSingleItemsCarbonFootprint"
    ;;
    readItemsCarbonFootprint)
    operation="readItemsCarbonFootprint"
    ;;
    readSingleItemsCarbonFootprint)
    operation="readSingleItemsCarbonFootprint"
    ;;
    updateItemsCarbonFootprint)
    operation="updateItemsCarbonFootprint"
    ;;
    updateSingleItemsCarbonFootprint)
    operation="updateSingleItemsCarbonFootprint"
    ;;
    createItemsCompanyAssets)
    operation="createItemsCompanyAssets"
    ;;
    deleteItemsCompanyAssets)
    operation="deleteItemsCompanyAssets"
    ;;
    deleteSingleItemsCompanyAssets)
    operation="deleteSingleItemsCompanyAssets"
    ;;
    readItemsCompanyAssets)
    operation="readItemsCompanyAssets"
    ;;
    readSingleItemsCompanyAssets)
    operation="readSingleItemsCompanyAssets"
    ;;
    updateItemsCompanyAssets)
    operation="updateItemsCompanyAssets"
    ;;
    updateSingleItemsCompanyAssets)
    operation="updateSingleItemsCompanyAssets"
    ;;
    createItemsContent)
    operation="createItemsContent"
    ;;
    deleteItemsContent)
    operation="deleteItemsContent"
    ;;
    deleteSingleItemsContent)
    operation="deleteSingleItemsContent"
    ;;
    readItemsContent)
    operation="readItemsContent"
    ;;
    readSingleItemsContent)
    operation="readSingleItemsContent"
    ;;
    updateItemsContent)
    operation="updateItemsContent"
    ;;
    updateSingleItemsContent)
    operation="updateSingleItemsContent"
    ;;
    createItemsContracts)
    operation="createItemsContracts"
    ;;
    deleteItemsContracts)
    operation="deleteItemsContracts"
    ;;
    deleteSingleItemsContracts)
    operation="deleteSingleItemsContracts"
    ;;
    readItemsContracts)
    operation="readItemsContracts"
    ;;
    readSingleItemsContracts)
    operation="readSingleItemsContracts"
    ;;
    updateItemsContracts)
    operation="updateItemsContracts"
    ;;
    updateSingleItemsContracts)
    operation="updateSingleItemsContracts"
    ;;
    createItemsCrm)
    operation="createItemsCrm"
    ;;
    deleteItemsCrm)
    operation="deleteItemsCrm"
    ;;
    deleteSingleItemsCrm)
    operation="deleteSingleItemsCrm"
    ;;
    readItemsCrm)
    operation="readItemsCrm"
    ;;
    readSingleItemsCrm)
    operation="readSingleItemsCrm"
    ;;
    updateItemsCrm)
    operation="updateItemsCrm"
    ;;
    updateSingleItemsCrm)
    operation="updateSingleItemsCrm"
    ;;
    createItemsDepartment)
    operation="createItemsDepartment"
    ;;
    deleteItemsDepartment)
    operation="deleteItemsDepartment"
    ;;
    deleteSingleItemsDepartment)
    operation="deleteSingleItemsDepartment"
    ;;
    readItemsDepartment)
    operation="readItemsDepartment"
    ;;
    readSingleItemsDepartment)
    operation="readSingleItemsDepartment"
    ;;
    updateItemsDepartment)
    operation="updateItemsDepartment"
    ;;
    updateSingleItemsDepartment)
    operation="updateSingleItemsDepartment"
    ;;
    createItemsDistribution)
    operation="createItemsDistribution"
    ;;
    deleteItemsDistribution)
    operation="deleteItemsDistribution"
    ;;
    deleteSingleItemsDistribution)
    operation="deleteSingleItemsDistribution"
    ;;
    readItemsDistribution)
    operation="readItemsDistribution"
    ;;
    readSingleItemsDistribution)
    operation="readSingleItemsDistribution"
    ;;
    updateItemsDistribution)
    operation="updateItemsDistribution"
    ;;
    updateSingleItemsDistribution)
    operation="updateSingleItemsDistribution"
    ;;
    createItemsEmailCampaigns)
    operation="createItemsEmailCampaigns"
    ;;
    deleteItemsEmailCampaigns)
    operation="deleteItemsEmailCampaigns"
    ;;
    deleteSingleItemsEmailCampaigns)
    operation="deleteSingleItemsEmailCampaigns"
    ;;
    readItemsEmailCampaigns)
    operation="readItemsEmailCampaigns"
    ;;
    readSingleItemsEmailCampaigns)
    operation="readSingleItemsEmailCampaigns"
    ;;
    updateItemsEmailCampaigns)
    operation="updateItemsEmailCampaigns"
    ;;
    updateSingleItemsEmailCampaigns)
    operation="updateSingleItemsEmailCampaigns"
    ;;
    createItemsEmployeeDirectory)
    operation="createItemsEmployeeDirectory"
    ;;
    deleteItemsEmployeeDirectory)
    operation="deleteItemsEmployeeDirectory"
    ;;
    deleteSingleItemsEmployeeDirectory)
    operation="deleteSingleItemsEmployeeDirectory"
    ;;
    readItemsEmployeeDirectory)
    operation="readItemsEmployeeDirectory"
    ;;
    readSingleItemsEmployeeDirectory)
    operation="readSingleItemsEmployeeDirectory"
    ;;
    updateItemsEmployeeDirectory)
    operation="updateItemsEmployeeDirectory"
    ;;
    updateSingleItemsEmployeeDirectory)
    operation="updateSingleItemsEmployeeDirectory"
    ;;
    createItemsEnergyEfficiency)
    operation="createItemsEnergyEfficiency"
    ;;
    deleteItemsEnergyEfficiency)
    operation="deleteItemsEnergyEfficiency"
    ;;
    deleteSingleItemsEnergyEfficiency)
    operation="deleteSingleItemsEnergyEfficiency"
    ;;
    readItemsEnergyEfficiency)
    operation="readItemsEnergyEfficiency"
    ;;
    readSingleItemsEnergyEfficiency)
    operation="readSingleItemsEnergyEfficiency"
    ;;
    updateItemsEnergyEfficiency)
    operation="updateItemsEnergyEfficiency"
    ;;
    updateSingleItemsEnergyEfficiency)
    operation="updateSingleItemsEnergyEfficiency"
    ;;
    createItemsEnvironmentalCompliance)
    operation="createItemsEnvironmentalCompliance"
    ;;
    deleteItemsEnvironmentalCompliance)
    operation="deleteItemsEnvironmentalCompliance"
    ;;
    deleteSingleItemsEnvironmentalCompliance)
    operation="deleteSingleItemsEnvironmentalCompliance"
    ;;
    readItemsEnvironmentalCompliance)
    operation="readItemsEnvironmentalCompliance"
    ;;
    readSingleItemsEnvironmentalCompliance)
    operation="readSingleItemsEnvironmentalCompliance"
    ;;
    updateItemsEnvironmentalCompliance)
    operation="updateItemsEnvironmentalCompliance"
    ;;
    updateSingleItemsEnvironmentalCompliance)
    operation="updateSingleItemsEnvironmentalCompliance"
    ;;
    createItemsEvents)
    operation="createItemsEvents"
    ;;
    deleteItemsEvents)
    operation="deleteItemsEvents"
    ;;
    deleteSingleItemsEvents)
    operation="deleteSingleItemsEvents"
    ;;
    readItemsEvents)
    operation="readItemsEvents"
    ;;
    readSingleItemsEvents)
    operation="readSingleItemsEvents"
    ;;
    updateItemsEvents)
    operation="updateItemsEvents"
    ;;
    updateSingleItemsEvents)
    operation="updateSingleItemsEvents"
    ;;
    createItemsExpenses)
    operation="createItemsExpenses"
    ;;
    deleteItemsExpenses)
    operation="deleteItemsExpenses"
    ;;
    deleteSingleItemsExpenses)
    operation="deleteSingleItemsExpenses"
    ;;
    readItemsExpenses)
    operation="readItemsExpenses"
    ;;
    readSingleItemsExpenses)
    operation="readSingleItemsExpenses"
    ;;
    updateItemsExpenses)
    operation="updateItemsExpenses"
    ;;
    updateSingleItemsExpenses)
    operation="updateSingleItemsExpenses"
    ;;
    createItemsFacilities)
    operation="createItemsFacilities"
    ;;
    deleteItemsFacilities)
    operation="deleteItemsFacilities"
    ;;
    deleteSingleItemsFacilities)
    operation="deleteSingleItemsFacilities"
    ;;
    readItemsFacilities)
    operation="readItemsFacilities"
    ;;
    readSingleItemsFacilities)
    operation="readSingleItemsFacilities"
    ;;
    updateItemsFacilities)
    operation="updateItemsFacilities"
    ;;
    updateSingleItemsFacilities)
    operation="updateSingleItemsFacilities"
    ;;
    createItemsFeedback)
    operation="createItemsFeedback"
    ;;
    deleteItemsFeedback)
    operation="deleteItemsFeedback"
    ;;
    deleteSingleItemsFeedback)
    operation="deleteSingleItemsFeedback"
    ;;
    readItemsFeedback)
    operation="readItemsFeedback"
    ;;
    readSingleItemsFeedback)
    operation="readSingleItemsFeedback"
    ;;
    updateItemsFeedback)
    operation="updateItemsFeedback"
    ;;
    updateSingleItemsFeedback)
    operation="updateSingleItemsFeedback"
    ;;
    createItemsForum)
    operation="createItemsForum"
    ;;
    deleteItemsForum)
    operation="deleteItemsForum"
    ;;
    deleteSingleItemsForum)
    operation="deleteSingleItemsForum"
    ;;
    readItemsForum)
    operation="readItemsForum"
    ;;
    readSingleItemsForum)
    operation="readSingleItemsForum"
    ;;
    updateItemsForum)
    operation="updateItemsForum"
    ;;
    updateSingleItemsForum)
    operation="updateSingleItemsForum"
    ;;
    createItemsFulfillment)
    operation="createItemsFulfillment"
    ;;
    deleteItemsFulfillment)
    operation="deleteItemsFulfillment"
    ;;
    deleteSingleItemsFulfillment)
    operation="deleteSingleItemsFulfillment"
    ;;
    readItemsFulfillment)
    operation="readItemsFulfillment"
    ;;
    readSingleItemsFulfillment)
    operation="readSingleItemsFulfillment"
    ;;
    updateItemsFulfillment)
    operation="updateItemsFulfillment"
    ;;
    updateSingleItemsFulfillment)
    operation="updateSingleItemsFulfillment"
    ;;
    createItemsGovernanceandEthics)
    operation="createItemsGovernanceandEthics"
    ;;
    deleteItemsGovernanceandEthics)
    operation="deleteItemsGovernanceandEthics"
    ;;
    deleteSingleItemsGovernanceandEthics)
    operation="deleteSingleItemsGovernanceandEthics"
    ;;
    readItemsGovernanceandEthics)
    operation="readItemsGovernanceandEthics"
    ;;
    readSingleItemsGovernanceandEthics)
    operation="readSingleItemsGovernanceandEthics"
    ;;
    updateItemsGovernanceandEthics)
    operation="updateItemsGovernanceandEthics"
    ;;
    updateSingleItemsGovernanceandEthics)
    operation="updateSingleItemsGovernanceandEthics"
    ;;
    createItemsHelpdesk)
    operation="createItemsHelpdesk"
    ;;
    deleteItemsHelpdesk)
    operation="deleteItemsHelpdesk"
    ;;
    deleteSingleItemsHelpdesk)
    operation="deleteSingleItemsHelpdesk"
    ;;
    readItemsHelpdesk)
    operation="readItemsHelpdesk"
    ;;
    readSingleItemsHelpdesk)
    operation="readSingleItemsHelpdesk"
    ;;
    updateItemsHelpdesk)
    operation="updateItemsHelpdesk"
    ;;
    updateSingleItemsHelpdesk)
    operation="updateSingleItemsHelpdesk"
    ;;
    createItemsInventory)
    operation="createItemsInventory"
    ;;
    deleteItemsInventory)
    operation="deleteItemsInventory"
    ;;
    deleteSingleItemsInventory)
    operation="deleteSingleItemsInventory"
    ;;
    readItemsInventory)
    operation="readItemsInventory"
    ;;
    readSingleItemsInventory)
    operation="readSingleItemsInventory"
    ;;
    updateItemsInventory)
    operation="updateItemsInventory"
    ;;
    updateSingleItemsInventory)
    operation="updateSingleItemsInventory"
    ;;
    createItemsInvoices)
    operation="createItemsInvoices"
    ;;
    deleteItemsInvoices)
    operation="deleteItemsInvoices"
    ;;
    deleteSingleItemsInvoices)
    operation="deleteSingleItemsInvoices"
    ;;
    readItemsInvoices)
    operation="readItemsInvoices"
    ;;
    readSingleItemsInvoices)
    operation="readSingleItemsInvoices"
    ;;
    updateItemsInvoices)
    operation="updateItemsInvoices"
    ;;
    updateSingleItemsInvoices)
    operation="updateSingleItemsInvoices"
    ;;
    createItemsInvoicing)
    operation="createItemsInvoicing"
    ;;
    deleteItemsInvoicing)
    operation="deleteItemsInvoicing"
    ;;
    deleteSingleItemsInvoicing)
    operation="deleteSingleItemsInvoicing"
    ;;
    readItemsInvoicing)
    operation="readItemsInvoicing"
    ;;
    readSingleItemsInvoicing)
    operation="readSingleItemsInvoicing"
    ;;
    updateItemsInvoicing)
    operation="updateItemsInvoicing"
    ;;
    updateSingleItemsInvoicing)
    operation="updateSingleItemsInvoicing"
    ;;
    createItemsLifecycle)
    operation="createItemsLifecycle"
    ;;
    deleteItemsLifecycle)
    operation="deleteItemsLifecycle"
    ;;
    deleteSingleItemsLifecycle)
    operation="deleteSingleItemsLifecycle"
    ;;
    readItemsLifecycle)
    operation="readItemsLifecycle"
    ;;
    readSingleItemsLifecycle)
    operation="readSingleItemsLifecycle"
    ;;
    updateItemsLifecycle)
    operation="updateItemsLifecycle"
    ;;
    updateSingleItemsLifecycle)
    operation="updateSingleItemsLifecycle"
    ;;
    createItemsLiveChat)
    operation="createItemsLiveChat"
    ;;
    deleteItemsLiveChat)
    operation="deleteItemsLiveChat"
    ;;
    deleteSingleItemsLiveChat)
    operation="deleteSingleItemsLiveChat"
    ;;
    readItemsLiveChat)
    operation="readItemsLiveChat"
    ;;
    readSingleItemsLiveChat)
    operation="readSingleItemsLiveChat"
    ;;
    updateItemsLiveChat)
    operation="updateItemsLiveChat"
    ;;
    updateSingleItemsLiveChat)
    operation="updateSingleItemsLiveChat"
    ;;
    createItemsLoyalty)
    operation="createItemsLoyalty"
    ;;
    deleteItemsLoyalty)
    operation="deleteItemsLoyalty"
    ;;
    deleteSingleItemsLoyalty)
    operation="deleteSingleItemsLoyalty"
    ;;
    readItemsLoyalty)
    operation="readItemsLoyalty"
    ;;
    readSingleItemsLoyalty)
    operation="readSingleItemsLoyalty"
    ;;
    updateItemsLoyalty)
    operation="updateItemsLoyalty"
    ;;
    updateSingleItemsLoyalty)
    operation="updateSingleItemsLoyalty"
    ;;
    createItemsMaintenance)
    operation="createItemsMaintenance"
    ;;
    deleteItemsMaintenance)
    operation="deleteItemsMaintenance"
    ;;
    deleteSingleItemsMaintenance)
    operation="deleteSingleItemsMaintenance"
    ;;
    readItemsMaintenance)
    operation="readItemsMaintenance"
    ;;
    readSingleItemsMaintenance)
    operation="readSingleItemsMaintenance"
    ;;
    updateItemsMaintenance)
    operation="updateItemsMaintenance"
    ;;
    updateSingleItemsMaintenance)
    operation="updateSingleItemsMaintenance"
    ;;
    createItemsPayroll)
    operation="createItemsPayroll"
    ;;
    deleteItemsPayroll)
    operation="deleteItemsPayroll"
    ;;
    deleteSingleItemsPayroll)
    operation="deleteSingleItemsPayroll"
    ;;
    readItemsPayroll)
    operation="readItemsPayroll"
    ;;
    readSingleItemsPayroll)
    operation="readSingleItemsPayroll"
    ;;
    updateItemsPayroll)
    operation="updateItemsPayroll"
    ;;
    updateSingleItemsPayroll)
    operation="updateSingleItemsPayroll"
    ;;
    createItemsPerformance)
    operation="createItemsPerformance"
    ;;
    deleteItemsPerformance)
    operation="deleteItemsPerformance"
    ;;
    deleteSingleItemsPerformance)
    operation="deleteSingleItemsPerformance"
    ;;
    readItemsPerformance)
    operation="readItemsPerformance"
    ;;
    readSingleItemsPerformance)
    operation="readSingleItemsPerformance"
    ;;
    updateItemsPerformance)
    operation="updateItemsPerformance"
    ;;
    updateSingleItemsPerformance)
    operation="updateSingleItemsPerformance"
    ;;
    createItemsPointofSale)
    operation="createItemsPointofSale"
    ;;
    deleteItemsPointofSale)
    operation="deleteItemsPointofSale"
    ;;
    deleteSingleItemsPointofSale)
    operation="deleteSingleItemsPointofSale"
    ;;
    readItemsPointofSale)
    operation="readItemsPointofSale"
    ;;
    readSingleItemsPointofSale)
    operation="readSingleItemsPointofSale"
    ;;
    updateItemsPointofSale)
    operation="updateItemsPointofSale"
    ;;
    updateSingleItemsPointofSale)
    operation="updateSingleItemsPointofSale"
    ;;
    createItemsPolicy)
    operation="createItemsPolicy"
    ;;
    deleteItemsPolicy)
    operation="deleteItemsPolicy"
    ;;
    deleteSingleItemsPolicy)
    operation="deleteSingleItemsPolicy"
    ;;
    readItemsPolicy)
    operation="readItemsPolicy"
    ;;
    readSingleItemsPolicy)
    operation="readSingleItemsPolicy"
    ;;
    updateItemsPolicy)
    operation="updateItemsPolicy"
    ;;
    updateSingleItemsPolicy)
    operation="updateSingleItemsPolicy"
    ;;
    createItemsProcurement)
    operation="createItemsProcurement"
    ;;
    deleteItemsProcurement)
    operation="deleteItemsProcurement"
    ;;
    deleteSingleItemsProcurement)
    operation="deleteSingleItemsProcurement"
    ;;
    readItemsProcurement)
    operation="readItemsProcurement"
    ;;
    readSingleItemsProcurement)
    operation="readSingleItemsProcurement"
    ;;
    updateItemsProcurement)
    operation="updateItemsProcurement"
    ;;
    updateSingleItemsProcurement)
    operation="updateSingleItemsProcurement"
    ;;
    createItemsProductionBatch)
    operation="createItemsProductionBatch"
    ;;
    deleteItemsProductionBatch)
    operation="deleteItemsProductionBatch"
    ;;
    deleteSingleItemsProductionBatch)
    operation="deleteSingleItemsProductionBatch"
    ;;
    readItemsProductionBatch)
    operation="readItemsProductionBatch"
    ;;
    readSingleItemsProductionBatch)
    operation="readSingleItemsProductionBatch"
    ;;
    updateItemsProductionBatch)
    operation="updateItemsProductionBatch"
    ;;
    updateSingleItemsProductionBatch)
    operation="updateSingleItemsProductionBatch"
    ;;
    createItemsProject)
    operation="createItemsProject"
    ;;
    deleteItemsProject)
    operation="deleteItemsProject"
    ;;
    deleteSingleItemsProject)
    operation="deleteSingleItemsProject"
    ;;
    readItemsProject)
    operation="readItemsProject"
    ;;
    readSingleItemsProject)
    operation="readSingleItemsProject"
    ;;
    updateItemsProject)
    operation="updateItemsProject"
    ;;
    updateSingleItemsProject)
    operation="updateSingleItemsProject"
    ;;
    createItemsPurchaseOrders)
    operation="createItemsPurchaseOrders"
    ;;
    deleteItemsPurchaseOrders)
    operation="deleteItemsPurchaseOrders"
    ;;
    deleteSingleItemsPurchaseOrders)
    operation="deleteSingleItemsPurchaseOrders"
    ;;
    readItemsPurchaseOrders)
    operation="readItemsPurchaseOrders"
    ;;
    readSingleItemsPurchaseOrders)
    operation="readSingleItemsPurchaseOrders"
    ;;
    updateItemsPurchaseOrders)
    operation="updateItemsPurchaseOrders"
    ;;
    updateSingleItemsPurchaseOrders)
    operation="updateSingleItemsPurchaseOrders"
    ;;
    createItemsQualityCheck)
    operation="createItemsQualityCheck"
    ;;
    deleteItemsQualityCheck)
    operation="deleteItemsQualityCheck"
    ;;
    deleteSingleItemsQualityCheck)
    operation="deleteSingleItemsQualityCheck"
    ;;
    readItemsQualityCheck)
    operation="readItemsQualityCheck"
    ;;
    readSingleItemsQualityCheck)
    operation="readSingleItemsQualityCheck"
    ;;
    updateItemsQualityCheck)
    operation="updateItemsQualityCheck"
    ;;
    updateSingleItemsQualityCheck)
    operation="updateSingleItemsQualityCheck"
    ;;
    createItemsQuotes)
    operation="createItemsQuotes"
    ;;
    deleteItemsQuotes)
    operation="deleteItemsQuotes"
    ;;
    deleteSingleItemsQuotes)
    operation="deleteSingleItemsQuotes"
    ;;
    readItemsQuotes)
    operation="readItemsQuotes"
    ;;
    readSingleItemsQuotes)
    operation="readSingleItemsQuotes"
    ;;
    updateItemsQuotes)
    operation="updateItemsQuotes"
    ;;
    updateSingleItemsQuotes)
    operation="updateSingleItemsQuotes"
    ;;
    createItemsRecruit)
    operation="createItemsRecruit"
    ;;
    deleteItemsRecruit)
    operation="deleteItemsRecruit"
    ;;
    deleteSingleItemsRecruit)
    operation="deleteSingleItemsRecruit"
    ;;
    readItemsRecruit)
    operation="readItemsRecruit"
    ;;
    readSingleItemsRecruit)
    operation="readSingleItemsRecruit"
    ;;
    updateItemsRecruit)
    operation="updateItemsRecruit"
    ;;
    updateSingleItemsRecruit)
    operation="updateSingleItemsRecruit"
    ;;
    createItemsRegulations)
    operation="createItemsRegulations"
    ;;
    deleteItemsRegulations)
    operation="deleteItemsRegulations"
    ;;
    deleteSingleItemsRegulations)
    operation="deleteSingleItemsRegulations"
    ;;
    readItemsRegulations)
    operation="readItemsRegulations"
    ;;
    readSingleItemsRegulations)
    operation="readSingleItemsRegulations"
    ;;
    updateItemsRegulations)
    operation="updateItemsRegulations"
    ;;
    updateSingleItemsRegulations)
    operation="updateSingleItemsRegulations"
    ;;
    createItemsRentals)
    operation="createItemsRentals"
    ;;
    deleteItemsRentals)
    operation="deleteItemsRentals"
    ;;
    deleteSingleItemsRentals)
    operation="deleteSingleItemsRentals"
    ;;
    readItemsRentals)
    operation="readItemsRentals"
    ;;
    readSingleItemsRentals)
    operation="readSingleItemsRentals"
    ;;
    updateItemsRentals)
    operation="updateItemsRentals"
    ;;
    updateSingleItemsRentals)
    operation="updateSingleItemsRentals"
    ;;
    createItemsShipment)
    operation="createItemsShipment"
    ;;
    deleteItemsShipment)
    operation="deleteItemsShipment"
    ;;
    deleteSingleItemsShipment)
    operation="deleteSingleItemsShipment"
    ;;
    readItemsShipment)
    operation="readItemsShipment"
    ;;
    readSingleItemsShipment)
    operation="readSingleItemsShipment"
    ;;
    updateItemsShipment)
    operation="updateItemsShipment"
    ;;
    updateSingleItemsShipment)
    operation="updateSingleItemsShipment"
    ;;
    createItemsSocialMedia)
    operation="createItemsSocialMedia"
    ;;
    deleteItemsSocialMedia)
    operation="deleteItemsSocialMedia"
    ;;
    deleteSingleItemsSocialMedia)
    operation="deleteSingleItemsSocialMedia"
    ;;
    readItemsSocialMedia)
    operation="readItemsSocialMedia"
    ;;
    readSingleItemsSocialMedia)
    operation="readSingleItemsSocialMedia"
    ;;
    updateItemsSocialMedia)
    operation="updateItemsSocialMedia"
    ;;
    updateSingleItemsSocialMedia)
    operation="updateSingleItemsSocialMedia"
    ;;
    createItemsSocialResponsibility)
    operation="createItemsSocialResponsibility"
    ;;
    deleteItemsSocialResponsibility)
    operation="deleteItemsSocialResponsibility"
    ;;
    deleteSingleItemsSocialResponsibility)
    operation="deleteSingleItemsSocialResponsibility"
    ;;
    readItemsSocialResponsibility)
    operation="readItemsSocialResponsibility"
    ;;
    readSingleItemsSocialResponsibility)
    operation="readSingleItemsSocialResponsibility"
    ;;
    updateItemsSocialResponsibility)
    operation="updateItemsSocialResponsibility"
    ;;
    updateSingleItemsSocialResponsibility)
    operation="updateSingleItemsSocialResponsibility"
    ;;
    createItemsSuppliers)
    operation="createItemsSuppliers"
    ;;
    deleteItemsSuppliers)
    operation="deleteItemsSuppliers"
    ;;
    deleteSingleItemsSuppliers)
    operation="deleteSingleItemsSuppliers"
    ;;
    readItemsSuppliers)
    operation="readItemsSuppliers"
    ;;
    readSingleItemsSuppliers)
    operation="readSingleItemsSuppliers"
    ;;
    updateItemsSuppliers)
    operation="updateItemsSuppliers"
    ;;
    updateSingleItemsSuppliers)
    operation="updateSingleItemsSuppliers"
    ;;
    createItemsSurveys)
    operation="createItemsSurveys"
    ;;
    deleteItemsSurveys)
    operation="deleteItemsSurveys"
    ;;
    deleteSingleItemsSurveys)
    operation="deleteSingleItemsSurveys"
    ;;
    readItemsSurveys)
    operation="readItemsSurveys"
    ;;
    readSingleItemsSurveys)
    operation="readSingleItemsSurveys"
    ;;
    updateItemsSurveys)
    operation="updateItemsSurveys"
    ;;
    updateSingleItemsSurveys)
    operation="updateSingleItemsSurveys"
    ;;
    createItemsSustainableSupplyChain)
    operation="createItemsSustainableSupplyChain"
    ;;
    deleteItemsSustainableSupplyChain)
    operation="deleteItemsSustainableSupplyChain"
    ;;
    deleteSingleItemsSustainableSupplyChain)
    operation="deleteSingleItemsSustainableSupplyChain"
    ;;
    readItemsSustainableSupplyChain)
    operation="readItemsSustainableSupplyChain"
    ;;
    readSingleItemsSustainableSupplyChain)
    operation="readSingleItemsSustainableSupplyChain"
    ;;
    updateItemsSustainableSupplyChain)
    operation="updateItemsSustainableSupplyChain"
    ;;
    updateSingleItemsSustainableSupplyChain)
    operation="updateSingleItemsSustainableSupplyChain"
    ;;
    createItemsTaxes)
    operation="createItemsTaxes"
    ;;
    deleteItemsTaxes)
    operation="deleteItemsTaxes"
    ;;
    deleteSingleItemsTaxes)
    operation="deleteSingleItemsTaxes"
    ;;
    readItemsTaxes)
    operation="readItemsTaxes"
    ;;
    readSingleItemsTaxes)
    operation="readSingleItemsTaxes"
    ;;
    updateItemsTaxes)
    operation="updateItemsTaxes"
    ;;
    updateSingleItemsTaxes)
    operation="updateSingleItemsTaxes"
    ;;
    createItemsTraining)
    operation="createItemsTraining"
    ;;
    deleteItemsTraining)
    operation="deleteItemsTraining"
    ;;
    deleteSingleItemsTraining)
    operation="deleteSingleItemsTraining"
    ;;
    readItemsTraining)
    operation="readItemsTraining"
    ;;
    readSingleItemsTraining)
    operation="readSingleItemsTraining"
    ;;
    updateItemsTraining)
    operation="updateItemsTraining"
    ;;
    updateSingleItemsTraining)
    operation="updateSingleItemsTraining"
    ;;
    createItemsTransactions)
    operation="createItemsTransactions"
    ;;
    deleteItemsTransactions)
    operation="deleteItemsTransactions"
    ;;
    deleteSingleItemsTransactions)
    operation="deleteSingleItemsTransactions"
    ;;
    readItemsTransactions)
    operation="readItemsTransactions"
    ;;
    readSingleItemsTransactions)
    operation="readSingleItemsTransactions"
    ;;
    updateItemsTransactions)
    operation="updateItemsTransactions"
    ;;
    updateSingleItemsTransactions)
    operation="updateSingleItemsTransactions"
    ;;
    getMyPermissions)
    operation="getMyPermissions"
    ;;
    getPermission)
    operation="getPermission"
    ;;
    getPermissions)
    operation="getPermissions"
    ;;
    createPreset)
    operation="createPreset"
    ;;
    deletePreset)
    operation="deletePreset"
    ;;
    deletePresets)
    operation="deletePresets"
    ;;
    getPreset)
    operation="getPreset"
    ;;
    getPresets)
    operation="getPresets"
    ;;
    updatePreset)
    operation="updatePreset"
    ;;
    updatePresets)
    operation="updatePresets"
    ;;
    getRelation)
    operation="getRelation"
    ;;
    getRelations)
    operation="getRelations"
    ;;
    getRole)
    operation="getRole"
    ;;
    getRoles)
    operation="getRoles"
    ;;
    schemaApply)
    operation="schemaApply"
    ;;
    schemaDiff)
    operation="schemaDiff"
    ;;
    schemaSnapshot)
    operation="schemaSnapshot"
    ;;
    ping)
    operation="ping"
    ;;
    serverInfo)
    operation="serverInfo"
    ;;
    getSettings)
    operation="getSettings"
    ;;
    getMe)
    operation="getMe"
    ;;
    getUser)
    operation="getUser"
    ;;
    getUsers)
    operation="getUsers"
    ;;
    updateLastUsedPageMe)
    operation="updateLastUsedPageMe"
    ;;
    updateMe)
    operation="updateMe"
    ;;
    updateUser)
    operation="updateUser"
    ;;
    updateUsers)
    operation="updateUsers"
    ;;
    clearCache)
    operation="clearCache"
    ;;
    export)
    operation="export"
    ;;
    hashGenerate)
    operation="hashGenerate"
    ;;
    hashVerify)
    operation="hashVerify"
    ;;
    import)
    operation="import"
    ;;
    random)
    operation="random"
    ;;
    sort)
    operation="sort"
    ;;
    *==*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content as strings
    if [[ "$operation" ]]; then
        IFS='==' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]="\"${body_value}\""
    fi
    ;;
    *:=*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content without quotes
    if [[ "$operation" ]]; then
        # ignore error about 'sep' being unused
        # shellcheck disable=SC2034
        IFS=':=' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]=${body_value}
    fi
    ;;
    +([^=]):*)
    # Parse header arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS=':' read -r header_name header_value <<< "$key"
        #
        # If the header key is the same as the api_key expected by API in the
        # header, override the ${apikey_auth_credential} variable
        #
        if [[ $header_name == "Authorization" ]]; then
            apikey_auth_credential=$header_value
        fi
        header_arguments[$header_name]=$header_value
    else
        curl_arguments+=" $key"
    fi
    ;;
    -)
    body_content_temp_file=$(mktemp)
    cat - > "$body_content_temp_file"
    ;;
    *=*)
    # Parse operation arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS='=' read -r parameter_name parameter_value <<< "$key"
        if [[ -z "${operation_parameters[$parameter_name]+foo}" ]]; then
            operation_parameters[$parameter_name]=$(url_escape "${parameter_value}")
        else
            operation_parameters[$parameter_name]+=":::"$(url_escape "${parameter_value}")
        fi
    else
        curl_arguments+=" $key"
    fi
    ;;
    *)
    # If we are before the operation, treat the arguments as cURL arguments
    if [[ "x$operation" == "x" ]]; then
        # Maintain quotes around cURL arguments if necessary
        space_regexp="[[:space:]]"
        if [[ $key =~ $space_regexp ]]; then
            curl_arguments+=" \"$key\""
        else
            curl_arguments+=" $key"
        fi
    fi
    ;;
esac
done


# Check if user provided host name
if [[ -z "$host" ]]; then
    ERROR_MSG="ERROR: No hostname provided!!! You have to  provide on command line option '--host ...'"
    exit 1
fi

# Check if user specified operation ID
if [[ -z "$operation" ]]; then
    ERROR_MSG="ERROR: No operation specified!!!"
    exit 1
fi


# Run cURL command based on the operation ID
case $operation in
    createComment)
    call_createComment
    ;;
    getActivities)
    call_getActivities
    ;;
    getActivity)
    call_getActivity
    ;;
    getAsset)
    call_getAsset
    ;;
    login)
    call_login
    ;;
    logout)
    call_logout
    ;;
    oauth)
    call_oauth
    ;;
    oauthProvider)
    call_oauthProvider
    ;;
    passwordRequest)
    call_passwordRequest
    ;;
    passwordReset)
    call_passwordReset
    ;;
    refresh)
    call_refresh
    ;;
    getCollection)
    call_getCollection
    ;;
    getCollections)
    call_getCollections
    ;;
    getDisplays)
    call_getDisplays
    ;;
    getInterfaces)
    call_getInterfaces
    ;;
    getLayouts)
    call_getLayouts
    ;;
    getModules)
    call_getModules
    ;;
    getCollectionField)
    call_getCollectionField
    ;;
    getCollectionFields)
    call_getCollectionFields
    ;;
    getFields)
    call_getFields
    ;;
    createFile)
    call_createFile
    ;;
    deleteFile)
    call_deleteFile
    ;;
    deleteFiles)
    call_deleteFiles
    ;;
    getFile)
    call_getFile
    ;;
    getFiles)
    call_getFiles
    ;;
    updateFile)
    call_updateFile
    ;;
    updateFiles)
    call_updateFiles
    ;;
    getFlow)
    call_getFlow
    ;;
    getFlows)
    call_getFlows
    ;;
    createFolder)
    call_createFolder
    ;;
    deleteFolder)
    call_deleteFolder
    ;;
    deleteFolders)
    call_deleteFolders
    ;;
    getFolder)
    call_getFolder
    ;;
    getFolders)
    call_getFolders
    ;;
    updateFolder)
    call_updateFolder
    ;;
    updateFolders)
    call_updateFolders
    ;;
    createItemsAccounts)
    call_createItemsAccounts
    ;;
    createItemsAppointments)
    call_createItemsAppointments
    ;;
    createItemsBudgets)
    call_createItemsBudgets
    ;;
    createItemsCampaigns)
    call_createItemsCampaigns
    ;;
    createItemsCarbonFootprint)
    call_createItemsCarbonFootprint
    ;;
    createItemsCompanyAssets)
    call_createItemsCompanyAssets
    ;;
    createItemsContent)
    call_createItemsContent
    ;;
    createItemsContracts)
    call_createItemsContracts
    ;;
    createItemsCrm)
    call_createItemsCrm
    ;;
    createItemsDepartment)
    call_createItemsDepartment
    ;;
    createItemsDistribution)
    call_createItemsDistribution
    ;;
    createItemsEmailCampaigns)
    call_createItemsEmailCampaigns
    ;;
    createItemsEmployeeDirectory)
    call_createItemsEmployeeDirectory
    ;;
    createItemsEnergyEfficiency)
    call_createItemsEnergyEfficiency
    ;;
    createItemsEnvironmentalCompliance)
    call_createItemsEnvironmentalCompliance
    ;;
    createItemsEvents)
    call_createItemsEvents
    ;;
    createItemsExpenses)
    call_createItemsExpenses
    ;;
    createItemsFacilities)
    call_createItemsFacilities
    ;;
    createItemsFeedback)
    call_createItemsFeedback
    ;;
    createItemsForum)
    call_createItemsForum
    ;;
    createItemsFulfillment)
    call_createItemsFulfillment
    ;;
    createItemsGovernanceandEthics)
    call_createItemsGovernanceandEthics
    ;;
    createItemsHelpdesk)
    call_createItemsHelpdesk
    ;;
    createItemsInventory)
    call_createItemsInventory
    ;;
    createItemsInvoices)
    call_createItemsInvoices
    ;;
    createItemsInvoicing)
    call_createItemsInvoicing
    ;;
    createItemsLifecycle)
    call_createItemsLifecycle
    ;;
    createItemsLiveChat)
    call_createItemsLiveChat
    ;;
    createItemsLoyalty)
    call_createItemsLoyalty
    ;;
    createItemsMaintenance)
    call_createItemsMaintenance
    ;;
    createItemsPayroll)
    call_createItemsPayroll
    ;;
    createItemsPerformance)
    call_createItemsPerformance
    ;;
    createItemsPointofSale)
    call_createItemsPointofSale
    ;;
    createItemsPolicy)
    call_createItemsPolicy
    ;;
    createItemsProcurement)
    call_createItemsProcurement
    ;;
    createItemsProductionBatch)
    call_createItemsProductionBatch
    ;;
    createItemsProject)
    call_createItemsProject
    ;;
    createItemsPurchaseOrders)
    call_createItemsPurchaseOrders
    ;;
    createItemsQualityCheck)
    call_createItemsQualityCheck
    ;;
    createItemsQuotes)
    call_createItemsQuotes
    ;;
    createItemsRecruit)
    call_createItemsRecruit
    ;;
    createItemsRegulations)
    call_createItemsRegulations
    ;;
    createItemsRentals)
    call_createItemsRentals
    ;;
    createItemsShipment)
    call_createItemsShipment
    ;;
    createItemsSocialMedia)
    call_createItemsSocialMedia
    ;;
    createItemsSocialResponsibility)
    call_createItemsSocialResponsibility
    ;;
    createItemsSuppliers)
    call_createItemsSuppliers
    ;;
    createItemsSurveys)
    call_createItemsSurveys
    ;;
    createItemsSustainableSupplyChain)
    call_createItemsSustainableSupplyChain
    ;;
    createItemsTaxes)
    call_createItemsTaxes
    ;;
    createItemsTraining)
    call_createItemsTraining
    ;;
    createItemsTransactions)
    call_createItemsTransactions
    ;;
    deleteItemsAccounts)
    call_deleteItemsAccounts
    ;;
    deleteItemsAppointments)
    call_deleteItemsAppointments
    ;;
    deleteItemsBudgets)
    call_deleteItemsBudgets
    ;;
    deleteItemsCampaigns)
    call_deleteItemsCampaigns
    ;;
    deleteItemsCarbonFootprint)
    call_deleteItemsCarbonFootprint
    ;;
    deleteItemsCompanyAssets)
    call_deleteItemsCompanyAssets
    ;;
    deleteItemsContent)
    call_deleteItemsContent
    ;;
    deleteItemsContracts)
    call_deleteItemsContracts
    ;;
    deleteItemsCrm)
    call_deleteItemsCrm
    ;;
    deleteItemsDepartment)
    call_deleteItemsDepartment
    ;;
    deleteItemsDistribution)
    call_deleteItemsDistribution
    ;;
    deleteItemsEmailCampaigns)
    call_deleteItemsEmailCampaigns
    ;;
    deleteItemsEmployeeDirectory)
    call_deleteItemsEmployeeDirectory
    ;;
    deleteItemsEnergyEfficiency)
    call_deleteItemsEnergyEfficiency
    ;;
    deleteItemsEnvironmentalCompliance)
    call_deleteItemsEnvironmentalCompliance
    ;;
    deleteItemsEvents)
    call_deleteItemsEvents
    ;;
    deleteItemsExpenses)
    call_deleteItemsExpenses
    ;;
    deleteItemsFacilities)
    call_deleteItemsFacilities
    ;;
    deleteItemsFeedback)
    call_deleteItemsFeedback
    ;;
    deleteItemsForum)
    call_deleteItemsForum
    ;;
    deleteItemsFulfillment)
    call_deleteItemsFulfillment
    ;;
    deleteItemsGovernanceandEthics)
    call_deleteItemsGovernanceandEthics
    ;;
    deleteItemsHelpdesk)
    call_deleteItemsHelpdesk
    ;;
    deleteItemsInventory)
    call_deleteItemsInventory
    ;;
    deleteItemsInvoices)
    call_deleteItemsInvoices
    ;;
    deleteItemsInvoicing)
    call_deleteItemsInvoicing
    ;;
    deleteItemsLifecycle)
    call_deleteItemsLifecycle
    ;;
    deleteItemsLiveChat)
    call_deleteItemsLiveChat
    ;;
    deleteItemsLoyalty)
    call_deleteItemsLoyalty
    ;;
    deleteItemsMaintenance)
    call_deleteItemsMaintenance
    ;;
    deleteItemsPayroll)
    call_deleteItemsPayroll
    ;;
    deleteItemsPerformance)
    call_deleteItemsPerformance
    ;;
    deleteItemsPointofSale)
    call_deleteItemsPointofSale
    ;;
    deleteItemsPolicy)
    call_deleteItemsPolicy
    ;;
    deleteItemsProcurement)
    call_deleteItemsProcurement
    ;;
    deleteItemsProductionBatch)
    call_deleteItemsProductionBatch
    ;;
    deleteItemsProject)
    call_deleteItemsProject
    ;;
    deleteItemsPurchaseOrders)
    call_deleteItemsPurchaseOrders
    ;;
    deleteItemsQualityCheck)
    call_deleteItemsQualityCheck
    ;;
    deleteItemsQuotes)
    call_deleteItemsQuotes
    ;;
    deleteItemsRecruit)
    call_deleteItemsRecruit
    ;;
    deleteItemsRegulations)
    call_deleteItemsRegulations
    ;;
    deleteItemsRentals)
    call_deleteItemsRentals
    ;;
    deleteItemsShipment)
    call_deleteItemsShipment
    ;;
    deleteItemsSocialMedia)
    call_deleteItemsSocialMedia
    ;;
    deleteItemsSocialResponsibility)
    call_deleteItemsSocialResponsibility
    ;;
    deleteItemsSuppliers)
    call_deleteItemsSuppliers
    ;;
    deleteItemsSurveys)
    call_deleteItemsSurveys
    ;;
    deleteItemsSustainableSupplyChain)
    call_deleteItemsSustainableSupplyChain
    ;;
    deleteItemsTaxes)
    call_deleteItemsTaxes
    ;;
    deleteItemsTraining)
    call_deleteItemsTraining
    ;;
    deleteItemsTransactions)
    call_deleteItemsTransactions
    ;;
    deleteSingleItemsAccounts)
    call_deleteSingleItemsAccounts
    ;;
    deleteSingleItemsAppointments)
    call_deleteSingleItemsAppointments
    ;;
    deleteSingleItemsBudgets)
    call_deleteSingleItemsBudgets
    ;;
    deleteSingleItemsCampaigns)
    call_deleteSingleItemsCampaigns
    ;;
    deleteSingleItemsCarbonFootprint)
    call_deleteSingleItemsCarbonFootprint
    ;;
    deleteSingleItemsCompanyAssets)
    call_deleteSingleItemsCompanyAssets
    ;;
    deleteSingleItemsContent)
    call_deleteSingleItemsContent
    ;;
    deleteSingleItemsContracts)
    call_deleteSingleItemsContracts
    ;;
    deleteSingleItemsCrm)
    call_deleteSingleItemsCrm
    ;;
    deleteSingleItemsDepartment)
    call_deleteSingleItemsDepartment
    ;;
    deleteSingleItemsDistribution)
    call_deleteSingleItemsDistribution
    ;;
    deleteSingleItemsEmailCampaigns)
    call_deleteSingleItemsEmailCampaigns
    ;;
    deleteSingleItemsEmployeeDirectory)
    call_deleteSingleItemsEmployeeDirectory
    ;;
    deleteSingleItemsEnergyEfficiency)
    call_deleteSingleItemsEnergyEfficiency
    ;;
    deleteSingleItemsEnvironmentalCompliance)
    call_deleteSingleItemsEnvironmentalCompliance
    ;;
    deleteSingleItemsEvents)
    call_deleteSingleItemsEvents
    ;;
    deleteSingleItemsExpenses)
    call_deleteSingleItemsExpenses
    ;;
    deleteSingleItemsFacilities)
    call_deleteSingleItemsFacilities
    ;;
    deleteSingleItemsFeedback)
    call_deleteSingleItemsFeedback
    ;;
    deleteSingleItemsForum)
    call_deleteSingleItemsForum
    ;;
    deleteSingleItemsFulfillment)
    call_deleteSingleItemsFulfillment
    ;;
    deleteSingleItemsGovernanceandEthics)
    call_deleteSingleItemsGovernanceandEthics
    ;;
    deleteSingleItemsHelpdesk)
    call_deleteSingleItemsHelpdesk
    ;;
    deleteSingleItemsInventory)
    call_deleteSingleItemsInventory
    ;;
    deleteSingleItemsInvoices)
    call_deleteSingleItemsInvoices
    ;;
    deleteSingleItemsInvoicing)
    call_deleteSingleItemsInvoicing
    ;;
    deleteSingleItemsLifecycle)
    call_deleteSingleItemsLifecycle
    ;;
    deleteSingleItemsLiveChat)
    call_deleteSingleItemsLiveChat
    ;;
    deleteSingleItemsLoyalty)
    call_deleteSingleItemsLoyalty
    ;;
    deleteSingleItemsMaintenance)
    call_deleteSingleItemsMaintenance
    ;;
    deleteSingleItemsPayroll)
    call_deleteSingleItemsPayroll
    ;;
    deleteSingleItemsPerformance)
    call_deleteSingleItemsPerformance
    ;;
    deleteSingleItemsPointofSale)
    call_deleteSingleItemsPointofSale
    ;;
    deleteSingleItemsPolicy)
    call_deleteSingleItemsPolicy
    ;;
    deleteSingleItemsProcurement)
    call_deleteSingleItemsProcurement
    ;;
    deleteSingleItemsProductionBatch)
    call_deleteSingleItemsProductionBatch
    ;;
    deleteSingleItemsProject)
    call_deleteSingleItemsProject
    ;;
    deleteSingleItemsPurchaseOrders)
    call_deleteSingleItemsPurchaseOrders
    ;;
    deleteSingleItemsQualityCheck)
    call_deleteSingleItemsQualityCheck
    ;;
    deleteSingleItemsQuotes)
    call_deleteSingleItemsQuotes
    ;;
    deleteSingleItemsRecruit)
    call_deleteSingleItemsRecruit
    ;;
    deleteSingleItemsRegulations)
    call_deleteSingleItemsRegulations
    ;;
    deleteSingleItemsRentals)
    call_deleteSingleItemsRentals
    ;;
    deleteSingleItemsShipment)
    call_deleteSingleItemsShipment
    ;;
    deleteSingleItemsSocialMedia)
    call_deleteSingleItemsSocialMedia
    ;;
    deleteSingleItemsSocialResponsibility)
    call_deleteSingleItemsSocialResponsibility
    ;;
    deleteSingleItemsSuppliers)
    call_deleteSingleItemsSuppliers
    ;;
    deleteSingleItemsSurveys)
    call_deleteSingleItemsSurveys
    ;;
    deleteSingleItemsSustainableSupplyChain)
    call_deleteSingleItemsSustainableSupplyChain
    ;;
    deleteSingleItemsTaxes)
    call_deleteSingleItemsTaxes
    ;;
    deleteSingleItemsTraining)
    call_deleteSingleItemsTraining
    ;;
    deleteSingleItemsTransactions)
    call_deleteSingleItemsTransactions
    ;;
    readItemsAccounts)
    call_readItemsAccounts
    ;;
    readItemsAppointments)
    call_readItemsAppointments
    ;;
    readItemsBudgets)
    call_readItemsBudgets
    ;;
    readItemsCampaigns)
    call_readItemsCampaigns
    ;;
    readItemsCarbonFootprint)
    call_readItemsCarbonFootprint
    ;;
    readItemsCompanyAssets)
    call_readItemsCompanyAssets
    ;;
    readItemsContent)
    call_readItemsContent
    ;;
    readItemsContracts)
    call_readItemsContracts
    ;;
    readItemsCrm)
    call_readItemsCrm
    ;;
    readItemsDepartment)
    call_readItemsDepartment
    ;;
    readItemsDistribution)
    call_readItemsDistribution
    ;;
    readItemsEmailCampaigns)
    call_readItemsEmailCampaigns
    ;;
    readItemsEmployeeDirectory)
    call_readItemsEmployeeDirectory
    ;;
    readItemsEnergyEfficiency)
    call_readItemsEnergyEfficiency
    ;;
    readItemsEnvironmentalCompliance)
    call_readItemsEnvironmentalCompliance
    ;;
    readItemsEvents)
    call_readItemsEvents
    ;;
    readItemsExpenses)
    call_readItemsExpenses
    ;;
    readItemsFacilities)
    call_readItemsFacilities
    ;;
    readItemsFeedback)
    call_readItemsFeedback
    ;;
    readItemsForum)
    call_readItemsForum
    ;;
    readItemsFulfillment)
    call_readItemsFulfillment
    ;;
    readItemsGovernanceandEthics)
    call_readItemsGovernanceandEthics
    ;;
    readItemsHelpdesk)
    call_readItemsHelpdesk
    ;;
    readItemsInventory)
    call_readItemsInventory
    ;;
    readItemsInvoices)
    call_readItemsInvoices
    ;;
    readItemsInvoicing)
    call_readItemsInvoicing
    ;;
    readItemsLifecycle)
    call_readItemsLifecycle
    ;;
    readItemsLiveChat)
    call_readItemsLiveChat
    ;;
    readItemsLoyalty)
    call_readItemsLoyalty
    ;;
    readItemsMaintenance)
    call_readItemsMaintenance
    ;;
    readItemsPayroll)
    call_readItemsPayroll
    ;;
    readItemsPerformance)
    call_readItemsPerformance
    ;;
    readItemsPointofSale)
    call_readItemsPointofSale
    ;;
    readItemsPolicy)
    call_readItemsPolicy
    ;;
    readItemsProcurement)
    call_readItemsProcurement
    ;;
    readItemsProductionBatch)
    call_readItemsProductionBatch
    ;;
    readItemsProject)
    call_readItemsProject
    ;;
    readItemsPurchaseOrders)
    call_readItemsPurchaseOrders
    ;;
    readItemsQualityCheck)
    call_readItemsQualityCheck
    ;;
    readItemsQuotes)
    call_readItemsQuotes
    ;;
    readItemsRecruit)
    call_readItemsRecruit
    ;;
    readItemsRegulations)
    call_readItemsRegulations
    ;;
    readItemsRentals)
    call_readItemsRentals
    ;;
    readItemsShipment)
    call_readItemsShipment
    ;;
    readItemsSocialMedia)
    call_readItemsSocialMedia
    ;;
    readItemsSocialResponsibility)
    call_readItemsSocialResponsibility
    ;;
    readItemsSuppliers)
    call_readItemsSuppliers
    ;;
    readItemsSurveys)
    call_readItemsSurveys
    ;;
    readItemsSustainableSupplyChain)
    call_readItemsSustainableSupplyChain
    ;;
    readItemsTaxes)
    call_readItemsTaxes
    ;;
    readItemsTraining)
    call_readItemsTraining
    ;;
    readItemsTransactions)
    call_readItemsTransactions
    ;;
    readSingleItemsAccounts)
    call_readSingleItemsAccounts
    ;;
    readSingleItemsAppointments)
    call_readSingleItemsAppointments
    ;;
    readSingleItemsBudgets)
    call_readSingleItemsBudgets
    ;;
    readSingleItemsCampaigns)
    call_readSingleItemsCampaigns
    ;;
    readSingleItemsCarbonFootprint)
    call_readSingleItemsCarbonFootprint
    ;;
    readSingleItemsCompanyAssets)
    call_readSingleItemsCompanyAssets
    ;;
    readSingleItemsContent)
    call_readSingleItemsContent
    ;;
    readSingleItemsContracts)
    call_readSingleItemsContracts
    ;;
    readSingleItemsCrm)
    call_readSingleItemsCrm
    ;;
    readSingleItemsDepartment)
    call_readSingleItemsDepartment
    ;;
    readSingleItemsDistribution)
    call_readSingleItemsDistribution
    ;;
    readSingleItemsEmailCampaigns)
    call_readSingleItemsEmailCampaigns
    ;;
    readSingleItemsEmployeeDirectory)
    call_readSingleItemsEmployeeDirectory
    ;;
    readSingleItemsEnergyEfficiency)
    call_readSingleItemsEnergyEfficiency
    ;;
    readSingleItemsEnvironmentalCompliance)
    call_readSingleItemsEnvironmentalCompliance
    ;;
    readSingleItemsEvents)
    call_readSingleItemsEvents
    ;;
    readSingleItemsExpenses)
    call_readSingleItemsExpenses
    ;;
    readSingleItemsFacilities)
    call_readSingleItemsFacilities
    ;;
    readSingleItemsFeedback)
    call_readSingleItemsFeedback
    ;;
    readSingleItemsForum)
    call_readSingleItemsForum
    ;;
    readSingleItemsFulfillment)
    call_readSingleItemsFulfillment
    ;;
    readSingleItemsGovernanceandEthics)
    call_readSingleItemsGovernanceandEthics
    ;;
    readSingleItemsHelpdesk)
    call_readSingleItemsHelpdesk
    ;;
    readSingleItemsInventory)
    call_readSingleItemsInventory
    ;;
    readSingleItemsInvoices)
    call_readSingleItemsInvoices
    ;;
    readSingleItemsInvoicing)
    call_readSingleItemsInvoicing
    ;;
    readSingleItemsLifecycle)
    call_readSingleItemsLifecycle
    ;;
    readSingleItemsLiveChat)
    call_readSingleItemsLiveChat
    ;;
    readSingleItemsLoyalty)
    call_readSingleItemsLoyalty
    ;;
    readSingleItemsMaintenance)
    call_readSingleItemsMaintenance
    ;;
    readSingleItemsPayroll)
    call_readSingleItemsPayroll
    ;;
    readSingleItemsPerformance)
    call_readSingleItemsPerformance
    ;;
    readSingleItemsPointofSale)
    call_readSingleItemsPointofSale
    ;;
    readSingleItemsPolicy)
    call_readSingleItemsPolicy
    ;;
    readSingleItemsProcurement)
    call_readSingleItemsProcurement
    ;;
    readSingleItemsProductionBatch)
    call_readSingleItemsProductionBatch
    ;;
    readSingleItemsProject)
    call_readSingleItemsProject
    ;;
    readSingleItemsPurchaseOrders)
    call_readSingleItemsPurchaseOrders
    ;;
    readSingleItemsQualityCheck)
    call_readSingleItemsQualityCheck
    ;;
    readSingleItemsQuotes)
    call_readSingleItemsQuotes
    ;;
    readSingleItemsRecruit)
    call_readSingleItemsRecruit
    ;;
    readSingleItemsRegulations)
    call_readSingleItemsRegulations
    ;;
    readSingleItemsRentals)
    call_readSingleItemsRentals
    ;;
    readSingleItemsShipment)
    call_readSingleItemsShipment
    ;;
    readSingleItemsSocialMedia)
    call_readSingleItemsSocialMedia
    ;;
    readSingleItemsSocialResponsibility)
    call_readSingleItemsSocialResponsibility
    ;;
    readSingleItemsSuppliers)
    call_readSingleItemsSuppliers
    ;;
    readSingleItemsSurveys)
    call_readSingleItemsSurveys
    ;;
    readSingleItemsSustainableSupplyChain)
    call_readSingleItemsSustainableSupplyChain
    ;;
    readSingleItemsTaxes)
    call_readSingleItemsTaxes
    ;;
    readSingleItemsTraining)
    call_readSingleItemsTraining
    ;;
    readSingleItemsTransactions)
    call_readSingleItemsTransactions
    ;;
    updateItemsAccounts)
    call_updateItemsAccounts
    ;;
    updateItemsAppointments)
    call_updateItemsAppointments
    ;;
    updateItemsBudgets)
    call_updateItemsBudgets
    ;;
    updateItemsCampaigns)
    call_updateItemsCampaigns
    ;;
    updateItemsCarbonFootprint)
    call_updateItemsCarbonFootprint
    ;;
    updateItemsCompanyAssets)
    call_updateItemsCompanyAssets
    ;;
    updateItemsContent)
    call_updateItemsContent
    ;;
    updateItemsContracts)
    call_updateItemsContracts
    ;;
    updateItemsCrm)
    call_updateItemsCrm
    ;;
    updateItemsDepartment)
    call_updateItemsDepartment
    ;;
    updateItemsDistribution)
    call_updateItemsDistribution
    ;;
    updateItemsEmailCampaigns)
    call_updateItemsEmailCampaigns
    ;;
    updateItemsEmployeeDirectory)
    call_updateItemsEmployeeDirectory
    ;;
    updateItemsEnergyEfficiency)
    call_updateItemsEnergyEfficiency
    ;;
    updateItemsEnvironmentalCompliance)
    call_updateItemsEnvironmentalCompliance
    ;;
    updateItemsEvents)
    call_updateItemsEvents
    ;;
    updateItemsExpenses)
    call_updateItemsExpenses
    ;;
    updateItemsFacilities)
    call_updateItemsFacilities
    ;;
    updateItemsFeedback)
    call_updateItemsFeedback
    ;;
    updateItemsForum)
    call_updateItemsForum
    ;;
    updateItemsFulfillment)
    call_updateItemsFulfillment
    ;;
    updateItemsGovernanceandEthics)
    call_updateItemsGovernanceandEthics
    ;;
    updateItemsHelpdesk)
    call_updateItemsHelpdesk
    ;;
    updateItemsInventory)
    call_updateItemsInventory
    ;;
    updateItemsInvoices)
    call_updateItemsInvoices
    ;;
    updateItemsInvoicing)
    call_updateItemsInvoicing
    ;;
    updateItemsLifecycle)
    call_updateItemsLifecycle
    ;;
    updateItemsLiveChat)
    call_updateItemsLiveChat
    ;;
    updateItemsLoyalty)
    call_updateItemsLoyalty
    ;;
    updateItemsMaintenance)
    call_updateItemsMaintenance
    ;;
    updateItemsPayroll)
    call_updateItemsPayroll
    ;;
    updateItemsPerformance)
    call_updateItemsPerformance
    ;;
    updateItemsPointofSale)
    call_updateItemsPointofSale
    ;;
    updateItemsPolicy)
    call_updateItemsPolicy
    ;;
    updateItemsProcurement)
    call_updateItemsProcurement
    ;;
    updateItemsProductionBatch)
    call_updateItemsProductionBatch
    ;;
    updateItemsProject)
    call_updateItemsProject
    ;;
    updateItemsPurchaseOrders)
    call_updateItemsPurchaseOrders
    ;;
    updateItemsQualityCheck)
    call_updateItemsQualityCheck
    ;;
    updateItemsQuotes)
    call_updateItemsQuotes
    ;;
    updateItemsRecruit)
    call_updateItemsRecruit
    ;;
    updateItemsRegulations)
    call_updateItemsRegulations
    ;;
    updateItemsRentals)
    call_updateItemsRentals
    ;;
    updateItemsShipment)
    call_updateItemsShipment
    ;;
    updateItemsSocialMedia)
    call_updateItemsSocialMedia
    ;;
    updateItemsSocialResponsibility)
    call_updateItemsSocialResponsibility
    ;;
    updateItemsSuppliers)
    call_updateItemsSuppliers
    ;;
    updateItemsSurveys)
    call_updateItemsSurveys
    ;;
    updateItemsSustainableSupplyChain)
    call_updateItemsSustainableSupplyChain
    ;;
    updateItemsTaxes)
    call_updateItemsTaxes
    ;;
    updateItemsTraining)
    call_updateItemsTraining
    ;;
    updateItemsTransactions)
    call_updateItemsTransactions
    ;;
    updateSingleItemsAccounts)
    call_updateSingleItemsAccounts
    ;;
    updateSingleItemsAppointments)
    call_updateSingleItemsAppointments
    ;;
    updateSingleItemsBudgets)
    call_updateSingleItemsBudgets
    ;;
    updateSingleItemsCampaigns)
    call_updateSingleItemsCampaigns
    ;;
    updateSingleItemsCarbonFootprint)
    call_updateSingleItemsCarbonFootprint
    ;;
    updateSingleItemsCompanyAssets)
    call_updateSingleItemsCompanyAssets
    ;;
    updateSingleItemsContent)
    call_updateSingleItemsContent
    ;;
    updateSingleItemsContracts)
    call_updateSingleItemsContracts
    ;;
    updateSingleItemsCrm)
    call_updateSingleItemsCrm
    ;;
    updateSingleItemsDepartment)
    call_updateSingleItemsDepartment
    ;;
    updateSingleItemsDistribution)
    call_updateSingleItemsDistribution
    ;;
    updateSingleItemsEmailCampaigns)
    call_updateSingleItemsEmailCampaigns
    ;;
    updateSingleItemsEmployeeDirectory)
    call_updateSingleItemsEmployeeDirectory
    ;;
    updateSingleItemsEnergyEfficiency)
    call_updateSingleItemsEnergyEfficiency
    ;;
    updateSingleItemsEnvironmentalCompliance)
    call_updateSingleItemsEnvironmentalCompliance
    ;;
    updateSingleItemsEvents)
    call_updateSingleItemsEvents
    ;;
    updateSingleItemsExpenses)
    call_updateSingleItemsExpenses
    ;;
    updateSingleItemsFacilities)
    call_updateSingleItemsFacilities
    ;;
    updateSingleItemsFeedback)
    call_updateSingleItemsFeedback
    ;;
    updateSingleItemsForum)
    call_updateSingleItemsForum
    ;;
    updateSingleItemsFulfillment)
    call_updateSingleItemsFulfillment
    ;;
    updateSingleItemsGovernanceandEthics)
    call_updateSingleItemsGovernanceandEthics
    ;;
    updateSingleItemsHelpdesk)
    call_updateSingleItemsHelpdesk
    ;;
    updateSingleItemsInventory)
    call_updateSingleItemsInventory
    ;;
    updateSingleItemsInvoices)
    call_updateSingleItemsInvoices
    ;;
    updateSingleItemsInvoicing)
    call_updateSingleItemsInvoicing
    ;;
    updateSingleItemsLifecycle)
    call_updateSingleItemsLifecycle
    ;;
    updateSingleItemsLiveChat)
    call_updateSingleItemsLiveChat
    ;;
    updateSingleItemsLoyalty)
    call_updateSingleItemsLoyalty
    ;;
    updateSingleItemsMaintenance)
    call_updateSingleItemsMaintenance
    ;;
    updateSingleItemsPayroll)
    call_updateSingleItemsPayroll
    ;;
    updateSingleItemsPerformance)
    call_updateSingleItemsPerformance
    ;;
    updateSingleItemsPointofSale)
    call_updateSingleItemsPointofSale
    ;;
    updateSingleItemsPolicy)
    call_updateSingleItemsPolicy
    ;;
    updateSingleItemsProcurement)
    call_updateSingleItemsProcurement
    ;;
    updateSingleItemsProductionBatch)
    call_updateSingleItemsProductionBatch
    ;;
    updateSingleItemsProject)
    call_updateSingleItemsProject
    ;;
    updateSingleItemsPurchaseOrders)
    call_updateSingleItemsPurchaseOrders
    ;;
    updateSingleItemsQualityCheck)
    call_updateSingleItemsQualityCheck
    ;;
    updateSingleItemsQuotes)
    call_updateSingleItemsQuotes
    ;;
    updateSingleItemsRecruit)
    call_updateSingleItemsRecruit
    ;;
    updateSingleItemsRegulations)
    call_updateSingleItemsRegulations
    ;;
    updateSingleItemsRentals)
    call_updateSingleItemsRentals
    ;;
    updateSingleItemsShipment)
    call_updateSingleItemsShipment
    ;;
    updateSingleItemsSocialMedia)
    call_updateSingleItemsSocialMedia
    ;;
    updateSingleItemsSocialResponsibility)
    call_updateSingleItemsSocialResponsibility
    ;;
    updateSingleItemsSuppliers)
    call_updateSingleItemsSuppliers
    ;;
    updateSingleItemsSurveys)
    call_updateSingleItemsSurveys
    ;;
    updateSingleItemsSustainableSupplyChain)
    call_updateSingleItemsSustainableSupplyChain
    ;;
    updateSingleItemsTaxes)
    call_updateSingleItemsTaxes
    ;;
    updateSingleItemsTraining)
    call_updateSingleItemsTraining
    ;;
    updateSingleItemsTransactions)
    call_updateSingleItemsTransactions
    ;;
    createItemsAccounts)
    call_createItemsAccounts
    ;;
    deleteItemsAccounts)
    call_deleteItemsAccounts
    ;;
    deleteSingleItemsAccounts)
    call_deleteSingleItemsAccounts
    ;;
    readItemsAccounts)
    call_readItemsAccounts
    ;;
    readSingleItemsAccounts)
    call_readSingleItemsAccounts
    ;;
    updateItemsAccounts)
    call_updateItemsAccounts
    ;;
    updateSingleItemsAccounts)
    call_updateSingleItemsAccounts
    ;;
    createItemsAppointments)
    call_createItemsAppointments
    ;;
    deleteItemsAppointments)
    call_deleteItemsAppointments
    ;;
    deleteSingleItemsAppointments)
    call_deleteSingleItemsAppointments
    ;;
    readItemsAppointments)
    call_readItemsAppointments
    ;;
    readSingleItemsAppointments)
    call_readSingleItemsAppointments
    ;;
    updateItemsAppointments)
    call_updateItemsAppointments
    ;;
    updateSingleItemsAppointments)
    call_updateSingleItemsAppointments
    ;;
    createItemsBudgets)
    call_createItemsBudgets
    ;;
    deleteItemsBudgets)
    call_deleteItemsBudgets
    ;;
    deleteSingleItemsBudgets)
    call_deleteSingleItemsBudgets
    ;;
    readItemsBudgets)
    call_readItemsBudgets
    ;;
    readSingleItemsBudgets)
    call_readSingleItemsBudgets
    ;;
    updateItemsBudgets)
    call_updateItemsBudgets
    ;;
    updateSingleItemsBudgets)
    call_updateSingleItemsBudgets
    ;;
    createItemsCampaigns)
    call_createItemsCampaigns
    ;;
    deleteItemsCampaigns)
    call_deleteItemsCampaigns
    ;;
    deleteSingleItemsCampaigns)
    call_deleteSingleItemsCampaigns
    ;;
    readItemsCampaigns)
    call_readItemsCampaigns
    ;;
    readSingleItemsCampaigns)
    call_readSingleItemsCampaigns
    ;;
    updateItemsCampaigns)
    call_updateItemsCampaigns
    ;;
    updateSingleItemsCampaigns)
    call_updateSingleItemsCampaigns
    ;;
    createItemsCarbonFootprint)
    call_createItemsCarbonFootprint
    ;;
    deleteItemsCarbonFootprint)
    call_deleteItemsCarbonFootprint
    ;;
    deleteSingleItemsCarbonFootprint)
    call_deleteSingleItemsCarbonFootprint
    ;;
    readItemsCarbonFootprint)
    call_readItemsCarbonFootprint
    ;;
    readSingleItemsCarbonFootprint)
    call_readSingleItemsCarbonFootprint
    ;;
    updateItemsCarbonFootprint)
    call_updateItemsCarbonFootprint
    ;;
    updateSingleItemsCarbonFootprint)
    call_updateSingleItemsCarbonFootprint
    ;;
    createItemsCompanyAssets)
    call_createItemsCompanyAssets
    ;;
    deleteItemsCompanyAssets)
    call_deleteItemsCompanyAssets
    ;;
    deleteSingleItemsCompanyAssets)
    call_deleteSingleItemsCompanyAssets
    ;;
    readItemsCompanyAssets)
    call_readItemsCompanyAssets
    ;;
    readSingleItemsCompanyAssets)
    call_readSingleItemsCompanyAssets
    ;;
    updateItemsCompanyAssets)
    call_updateItemsCompanyAssets
    ;;
    updateSingleItemsCompanyAssets)
    call_updateSingleItemsCompanyAssets
    ;;
    createItemsContent)
    call_createItemsContent
    ;;
    deleteItemsContent)
    call_deleteItemsContent
    ;;
    deleteSingleItemsContent)
    call_deleteSingleItemsContent
    ;;
    readItemsContent)
    call_readItemsContent
    ;;
    readSingleItemsContent)
    call_readSingleItemsContent
    ;;
    updateItemsContent)
    call_updateItemsContent
    ;;
    updateSingleItemsContent)
    call_updateSingleItemsContent
    ;;
    createItemsContracts)
    call_createItemsContracts
    ;;
    deleteItemsContracts)
    call_deleteItemsContracts
    ;;
    deleteSingleItemsContracts)
    call_deleteSingleItemsContracts
    ;;
    readItemsContracts)
    call_readItemsContracts
    ;;
    readSingleItemsContracts)
    call_readSingleItemsContracts
    ;;
    updateItemsContracts)
    call_updateItemsContracts
    ;;
    updateSingleItemsContracts)
    call_updateSingleItemsContracts
    ;;
    createItemsCrm)
    call_createItemsCrm
    ;;
    deleteItemsCrm)
    call_deleteItemsCrm
    ;;
    deleteSingleItemsCrm)
    call_deleteSingleItemsCrm
    ;;
    readItemsCrm)
    call_readItemsCrm
    ;;
    readSingleItemsCrm)
    call_readSingleItemsCrm
    ;;
    updateItemsCrm)
    call_updateItemsCrm
    ;;
    updateSingleItemsCrm)
    call_updateSingleItemsCrm
    ;;
    createItemsDepartment)
    call_createItemsDepartment
    ;;
    deleteItemsDepartment)
    call_deleteItemsDepartment
    ;;
    deleteSingleItemsDepartment)
    call_deleteSingleItemsDepartment
    ;;
    readItemsDepartment)
    call_readItemsDepartment
    ;;
    readSingleItemsDepartment)
    call_readSingleItemsDepartment
    ;;
    updateItemsDepartment)
    call_updateItemsDepartment
    ;;
    updateSingleItemsDepartment)
    call_updateSingleItemsDepartment
    ;;
    createItemsDistribution)
    call_createItemsDistribution
    ;;
    deleteItemsDistribution)
    call_deleteItemsDistribution
    ;;
    deleteSingleItemsDistribution)
    call_deleteSingleItemsDistribution
    ;;
    readItemsDistribution)
    call_readItemsDistribution
    ;;
    readSingleItemsDistribution)
    call_readSingleItemsDistribution
    ;;
    updateItemsDistribution)
    call_updateItemsDistribution
    ;;
    updateSingleItemsDistribution)
    call_updateSingleItemsDistribution
    ;;
    createItemsEmailCampaigns)
    call_createItemsEmailCampaigns
    ;;
    deleteItemsEmailCampaigns)
    call_deleteItemsEmailCampaigns
    ;;
    deleteSingleItemsEmailCampaigns)
    call_deleteSingleItemsEmailCampaigns
    ;;
    readItemsEmailCampaigns)
    call_readItemsEmailCampaigns
    ;;
    readSingleItemsEmailCampaigns)
    call_readSingleItemsEmailCampaigns
    ;;
    updateItemsEmailCampaigns)
    call_updateItemsEmailCampaigns
    ;;
    updateSingleItemsEmailCampaigns)
    call_updateSingleItemsEmailCampaigns
    ;;
    createItemsEmployeeDirectory)
    call_createItemsEmployeeDirectory
    ;;
    deleteItemsEmployeeDirectory)
    call_deleteItemsEmployeeDirectory
    ;;
    deleteSingleItemsEmployeeDirectory)
    call_deleteSingleItemsEmployeeDirectory
    ;;
    readItemsEmployeeDirectory)
    call_readItemsEmployeeDirectory
    ;;
    readSingleItemsEmployeeDirectory)
    call_readSingleItemsEmployeeDirectory
    ;;
    updateItemsEmployeeDirectory)
    call_updateItemsEmployeeDirectory
    ;;
    updateSingleItemsEmployeeDirectory)
    call_updateSingleItemsEmployeeDirectory
    ;;
    createItemsEnergyEfficiency)
    call_createItemsEnergyEfficiency
    ;;
    deleteItemsEnergyEfficiency)
    call_deleteItemsEnergyEfficiency
    ;;
    deleteSingleItemsEnergyEfficiency)
    call_deleteSingleItemsEnergyEfficiency
    ;;
    readItemsEnergyEfficiency)
    call_readItemsEnergyEfficiency
    ;;
    readSingleItemsEnergyEfficiency)
    call_readSingleItemsEnergyEfficiency
    ;;
    updateItemsEnergyEfficiency)
    call_updateItemsEnergyEfficiency
    ;;
    updateSingleItemsEnergyEfficiency)
    call_updateSingleItemsEnergyEfficiency
    ;;
    createItemsEnvironmentalCompliance)
    call_createItemsEnvironmentalCompliance
    ;;
    deleteItemsEnvironmentalCompliance)
    call_deleteItemsEnvironmentalCompliance
    ;;
    deleteSingleItemsEnvironmentalCompliance)
    call_deleteSingleItemsEnvironmentalCompliance
    ;;
    readItemsEnvironmentalCompliance)
    call_readItemsEnvironmentalCompliance
    ;;
    readSingleItemsEnvironmentalCompliance)
    call_readSingleItemsEnvironmentalCompliance
    ;;
    updateItemsEnvironmentalCompliance)
    call_updateItemsEnvironmentalCompliance
    ;;
    updateSingleItemsEnvironmentalCompliance)
    call_updateSingleItemsEnvironmentalCompliance
    ;;
    createItemsEvents)
    call_createItemsEvents
    ;;
    deleteItemsEvents)
    call_deleteItemsEvents
    ;;
    deleteSingleItemsEvents)
    call_deleteSingleItemsEvents
    ;;
    readItemsEvents)
    call_readItemsEvents
    ;;
    readSingleItemsEvents)
    call_readSingleItemsEvents
    ;;
    updateItemsEvents)
    call_updateItemsEvents
    ;;
    updateSingleItemsEvents)
    call_updateSingleItemsEvents
    ;;
    createItemsExpenses)
    call_createItemsExpenses
    ;;
    deleteItemsExpenses)
    call_deleteItemsExpenses
    ;;
    deleteSingleItemsExpenses)
    call_deleteSingleItemsExpenses
    ;;
    readItemsExpenses)
    call_readItemsExpenses
    ;;
    readSingleItemsExpenses)
    call_readSingleItemsExpenses
    ;;
    updateItemsExpenses)
    call_updateItemsExpenses
    ;;
    updateSingleItemsExpenses)
    call_updateSingleItemsExpenses
    ;;
    createItemsFacilities)
    call_createItemsFacilities
    ;;
    deleteItemsFacilities)
    call_deleteItemsFacilities
    ;;
    deleteSingleItemsFacilities)
    call_deleteSingleItemsFacilities
    ;;
    readItemsFacilities)
    call_readItemsFacilities
    ;;
    readSingleItemsFacilities)
    call_readSingleItemsFacilities
    ;;
    updateItemsFacilities)
    call_updateItemsFacilities
    ;;
    updateSingleItemsFacilities)
    call_updateSingleItemsFacilities
    ;;
    createItemsFeedback)
    call_createItemsFeedback
    ;;
    deleteItemsFeedback)
    call_deleteItemsFeedback
    ;;
    deleteSingleItemsFeedback)
    call_deleteSingleItemsFeedback
    ;;
    readItemsFeedback)
    call_readItemsFeedback
    ;;
    readSingleItemsFeedback)
    call_readSingleItemsFeedback
    ;;
    updateItemsFeedback)
    call_updateItemsFeedback
    ;;
    updateSingleItemsFeedback)
    call_updateSingleItemsFeedback
    ;;
    createItemsForum)
    call_createItemsForum
    ;;
    deleteItemsForum)
    call_deleteItemsForum
    ;;
    deleteSingleItemsForum)
    call_deleteSingleItemsForum
    ;;
    readItemsForum)
    call_readItemsForum
    ;;
    readSingleItemsForum)
    call_readSingleItemsForum
    ;;
    updateItemsForum)
    call_updateItemsForum
    ;;
    updateSingleItemsForum)
    call_updateSingleItemsForum
    ;;
    createItemsFulfillment)
    call_createItemsFulfillment
    ;;
    deleteItemsFulfillment)
    call_deleteItemsFulfillment
    ;;
    deleteSingleItemsFulfillment)
    call_deleteSingleItemsFulfillment
    ;;
    readItemsFulfillment)
    call_readItemsFulfillment
    ;;
    readSingleItemsFulfillment)
    call_readSingleItemsFulfillment
    ;;
    updateItemsFulfillment)
    call_updateItemsFulfillment
    ;;
    updateSingleItemsFulfillment)
    call_updateSingleItemsFulfillment
    ;;
    createItemsGovernanceandEthics)
    call_createItemsGovernanceandEthics
    ;;
    deleteItemsGovernanceandEthics)
    call_deleteItemsGovernanceandEthics
    ;;
    deleteSingleItemsGovernanceandEthics)
    call_deleteSingleItemsGovernanceandEthics
    ;;
    readItemsGovernanceandEthics)
    call_readItemsGovernanceandEthics
    ;;
    readSingleItemsGovernanceandEthics)
    call_readSingleItemsGovernanceandEthics
    ;;
    updateItemsGovernanceandEthics)
    call_updateItemsGovernanceandEthics
    ;;
    updateSingleItemsGovernanceandEthics)
    call_updateSingleItemsGovernanceandEthics
    ;;
    createItemsHelpdesk)
    call_createItemsHelpdesk
    ;;
    deleteItemsHelpdesk)
    call_deleteItemsHelpdesk
    ;;
    deleteSingleItemsHelpdesk)
    call_deleteSingleItemsHelpdesk
    ;;
    readItemsHelpdesk)
    call_readItemsHelpdesk
    ;;
    readSingleItemsHelpdesk)
    call_readSingleItemsHelpdesk
    ;;
    updateItemsHelpdesk)
    call_updateItemsHelpdesk
    ;;
    updateSingleItemsHelpdesk)
    call_updateSingleItemsHelpdesk
    ;;
    createItemsInventory)
    call_createItemsInventory
    ;;
    deleteItemsInventory)
    call_deleteItemsInventory
    ;;
    deleteSingleItemsInventory)
    call_deleteSingleItemsInventory
    ;;
    readItemsInventory)
    call_readItemsInventory
    ;;
    readSingleItemsInventory)
    call_readSingleItemsInventory
    ;;
    updateItemsInventory)
    call_updateItemsInventory
    ;;
    updateSingleItemsInventory)
    call_updateSingleItemsInventory
    ;;
    createItemsInvoices)
    call_createItemsInvoices
    ;;
    deleteItemsInvoices)
    call_deleteItemsInvoices
    ;;
    deleteSingleItemsInvoices)
    call_deleteSingleItemsInvoices
    ;;
    readItemsInvoices)
    call_readItemsInvoices
    ;;
    readSingleItemsInvoices)
    call_readSingleItemsInvoices
    ;;
    updateItemsInvoices)
    call_updateItemsInvoices
    ;;
    updateSingleItemsInvoices)
    call_updateSingleItemsInvoices
    ;;
    createItemsInvoicing)
    call_createItemsInvoicing
    ;;
    deleteItemsInvoicing)
    call_deleteItemsInvoicing
    ;;
    deleteSingleItemsInvoicing)
    call_deleteSingleItemsInvoicing
    ;;
    readItemsInvoicing)
    call_readItemsInvoicing
    ;;
    readSingleItemsInvoicing)
    call_readSingleItemsInvoicing
    ;;
    updateItemsInvoicing)
    call_updateItemsInvoicing
    ;;
    updateSingleItemsInvoicing)
    call_updateSingleItemsInvoicing
    ;;
    createItemsLifecycle)
    call_createItemsLifecycle
    ;;
    deleteItemsLifecycle)
    call_deleteItemsLifecycle
    ;;
    deleteSingleItemsLifecycle)
    call_deleteSingleItemsLifecycle
    ;;
    readItemsLifecycle)
    call_readItemsLifecycle
    ;;
    readSingleItemsLifecycle)
    call_readSingleItemsLifecycle
    ;;
    updateItemsLifecycle)
    call_updateItemsLifecycle
    ;;
    updateSingleItemsLifecycle)
    call_updateSingleItemsLifecycle
    ;;
    createItemsLiveChat)
    call_createItemsLiveChat
    ;;
    deleteItemsLiveChat)
    call_deleteItemsLiveChat
    ;;
    deleteSingleItemsLiveChat)
    call_deleteSingleItemsLiveChat
    ;;
    readItemsLiveChat)
    call_readItemsLiveChat
    ;;
    readSingleItemsLiveChat)
    call_readSingleItemsLiveChat
    ;;
    updateItemsLiveChat)
    call_updateItemsLiveChat
    ;;
    updateSingleItemsLiveChat)
    call_updateSingleItemsLiveChat
    ;;
    createItemsLoyalty)
    call_createItemsLoyalty
    ;;
    deleteItemsLoyalty)
    call_deleteItemsLoyalty
    ;;
    deleteSingleItemsLoyalty)
    call_deleteSingleItemsLoyalty
    ;;
    readItemsLoyalty)
    call_readItemsLoyalty
    ;;
    readSingleItemsLoyalty)
    call_readSingleItemsLoyalty
    ;;
    updateItemsLoyalty)
    call_updateItemsLoyalty
    ;;
    updateSingleItemsLoyalty)
    call_updateSingleItemsLoyalty
    ;;
    createItemsMaintenance)
    call_createItemsMaintenance
    ;;
    deleteItemsMaintenance)
    call_deleteItemsMaintenance
    ;;
    deleteSingleItemsMaintenance)
    call_deleteSingleItemsMaintenance
    ;;
    readItemsMaintenance)
    call_readItemsMaintenance
    ;;
    readSingleItemsMaintenance)
    call_readSingleItemsMaintenance
    ;;
    updateItemsMaintenance)
    call_updateItemsMaintenance
    ;;
    updateSingleItemsMaintenance)
    call_updateSingleItemsMaintenance
    ;;
    createItemsPayroll)
    call_createItemsPayroll
    ;;
    deleteItemsPayroll)
    call_deleteItemsPayroll
    ;;
    deleteSingleItemsPayroll)
    call_deleteSingleItemsPayroll
    ;;
    readItemsPayroll)
    call_readItemsPayroll
    ;;
    readSingleItemsPayroll)
    call_readSingleItemsPayroll
    ;;
    updateItemsPayroll)
    call_updateItemsPayroll
    ;;
    updateSingleItemsPayroll)
    call_updateSingleItemsPayroll
    ;;
    createItemsPerformance)
    call_createItemsPerformance
    ;;
    deleteItemsPerformance)
    call_deleteItemsPerformance
    ;;
    deleteSingleItemsPerformance)
    call_deleteSingleItemsPerformance
    ;;
    readItemsPerformance)
    call_readItemsPerformance
    ;;
    readSingleItemsPerformance)
    call_readSingleItemsPerformance
    ;;
    updateItemsPerformance)
    call_updateItemsPerformance
    ;;
    updateSingleItemsPerformance)
    call_updateSingleItemsPerformance
    ;;
    createItemsPointofSale)
    call_createItemsPointofSale
    ;;
    deleteItemsPointofSale)
    call_deleteItemsPointofSale
    ;;
    deleteSingleItemsPointofSale)
    call_deleteSingleItemsPointofSale
    ;;
    readItemsPointofSale)
    call_readItemsPointofSale
    ;;
    readSingleItemsPointofSale)
    call_readSingleItemsPointofSale
    ;;
    updateItemsPointofSale)
    call_updateItemsPointofSale
    ;;
    updateSingleItemsPointofSale)
    call_updateSingleItemsPointofSale
    ;;
    createItemsPolicy)
    call_createItemsPolicy
    ;;
    deleteItemsPolicy)
    call_deleteItemsPolicy
    ;;
    deleteSingleItemsPolicy)
    call_deleteSingleItemsPolicy
    ;;
    readItemsPolicy)
    call_readItemsPolicy
    ;;
    readSingleItemsPolicy)
    call_readSingleItemsPolicy
    ;;
    updateItemsPolicy)
    call_updateItemsPolicy
    ;;
    updateSingleItemsPolicy)
    call_updateSingleItemsPolicy
    ;;
    createItemsProcurement)
    call_createItemsProcurement
    ;;
    deleteItemsProcurement)
    call_deleteItemsProcurement
    ;;
    deleteSingleItemsProcurement)
    call_deleteSingleItemsProcurement
    ;;
    readItemsProcurement)
    call_readItemsProcurement
    ;;
    readSingleItemsProcurement)
    call_readSingleItemsProcurement
    ;;
    updateItemsProcurement)
    call_updateItemsProcurement
    ;;
    updateSingleItemsProcurement)
    call_updateSingleItemsProcurement
    ;;
    createItemsProductionBatch)
    call_createItemsProductionBatch
    ;;
    deleteItemsProductionBatch)
    call_deleteItemsProductionBatch
    ;;
    deleteSingleItemsProductionBatch)
    call_deleteSingleItemsProductionBatch
    ;;
    readItemsProductionBatch)
    call_readItemsProductionBatch
    ;;
    readSingleItemsProductionBatch)
    call_readSingleItemsProductionBatch
    ;;
    updateItemsProductionBatch)
    call_updateItemsProductionBatch
    ;;
    updateSingleItemsProductionBatch)
    call_updateSingleItemsProductionBatch
    ;;
    createItemsProject)
    call_createItemsProject
    ;;
    deleteItemsProject)
    call_deleteItemsProject
    ;;
    deleteSingleItemsProject)
    call_deleteSingleItemsProject
    ;;
    readItemsProject)
    call_readItemsProject
    ;;
    readSingleItemsProject)
    call_readSingleItemsProject
    ;;
    updateItemsProject)
    call_updateItemsProject
    ;;
    updateSingleItemsProject)
    call_updateSingleItemsProject
    ;;
    createItemsPurchaseOrders)
    call_createItemsPurchaseOrders
    ;;
    deleteItemsPurchaseOrders)
    call_deleteItemsPurchaseOrders
    ;;
    deleteSingleItemsPurchaseOrders)
    call_deleteSingleItemsPurchaseOrders
    ;;
    readItemsPurchaseOrders)
    call_readItemsPurchaseOrders
    ;;
    readSingleItemsPurchaseOrders)
    call_readSingleItemsPurchaseOrders
    ;;
    updateItemsPurchaseOrders)
    call_updateItemsPurchaseOrders
    ;;
    updateSingleItemsPurchaseOrders)
    call_updateSingleItemsPurchaseOrders
    ;;
    createItemsQualityCheck)
    call_createItemsQualityCheck
    ;;
    deleteItemsQualityCheck)
    call_deleteItemsQualityCheck
    ;;
    deleteSingleItemsQualityCheck)
    call_deleteSingleItemsQualityCheck
    ;;
    readItemsQualityCheck)
    call_readItemsQualityCheck
    ;;
    readSingleItemsQualityCheck)
    call_readSingleItemsQualityCheck
    ;;
    updateItemsQualityCheck)
    call_updateItemsQualityCheck
    ;;
    updateSingleItemsQualityCheck)
    call_updateSingleItemsQualityCheck
    ;;
    createItemsQuotes)
    call_createItemsQuotes
    ;;
    deleteItemsQuotes)
    call_deleteItemsQuotes
    ;;
    deleteSingleItemsQuotes)
    call_deleteSingleItemsQuotes
    ;;
    readItemsQuotes)
    call_readItemsQuotes
    ;;
    readSingleItemsQuotes)
    call_readSingleItemsQuotes
    ;;
    updateItemsQuotes)
    call_updateItemsQuotes
    ;;
    updateSingleItemsQuotes)
    call_updateSingleItemsQuotes
    ;;
    createItemsRecruit)
    call_createItemsRecruit
    ;;
    deleteItemsRecruit)
    call_deleteItemsRecruit
    ;;
    deleteSingleItemsRecruit)
    call_deleteSingleItemsRecruit
    ;;
    readItemsRecruit)
    call_readItemsRecruit
    ;;
    readSingleItemsRecruit)
    call_readSingleItemsRecruit
    ;;
    updateItemsRecruit)
    call_updateItemsRecruit
    ;;
    updateSingleItemsRecruit)
    call_updateSingleItemsRecruit
    ;;
    createItemsRegulations)
    call_createItemsRegulations
    ;;
    deleteItemsRegulations)
    call_deleteItemsRegulations
    ;;
    deleteSingleItemsRegulations)
    call_deleteSingleItemsRegulations
    ;;
    readItemsRegulations)
    call_readItemsRegulations
    ;;
    readSingleItemsRegulations)
    call_readSingleItemsRegulations
    ;;
    updateItemsRegulations)
    call_updateItemsRegulations
    ;;
    updateSingleItemsRegulations)
    call_updateSingleItemsRegulations
    ;;
    createItemsRentals)
    call_createItemsRentals
    ;;
    deleteItemsRentals)
    call_deleteItemsRentals
    ;;
    deleteSingleItemsRentals)
    call_deleteSingleItemsRentals
    ;;
    readItemsRentals)
    call_readItemsRentals
    ;;
    readSingleItemsRentals)
    call_readSingleItemsRentals
    ;;
    updateItemsRentals)
    call_updateItemsRentals
    ;;
    updateSingleItemsRentals)
    call_updateSingleItemsRentals
    ;;
    createItemsShipment)
    call_createItemsShipment
    ;;
    deleteItemsShipment)
    call_deleteItemsShipment
    ;;
    deleteSingleItemsShipment)
    call_deleteSingleItemsShipment
    ;;
    readItemsShipment)
    call_readItemsShipment
    ;;
    readSingleItemsShipment)
    call_readSingleItemsShipment
    ;;
    updateItemsShipment)
    call_updateItemsShipment
    ;;
    updateSingleItemsShipment)
    call_updateSingleItemsShipment
    ;;
    createItemsSocialMedia)
    call_createItemsSocialMedia
    ;;
    deleteItemsSocialMedia)
    call_deleteItemsSocialMedia
    ;;
    deleteSingleItemsSocialMedia)
    call_deleteSingleItemsSocialMedia
    ;;
    readItemsSocialMedia)
    call_readItemsSocialMedia
    ;;
    readSingleItemsSocialMedia)
    call_readSingleItemsSocialMedia
    ;;
    updateItemsSocialMedia)
    call_updateItemsSocialMedia
    ;;
    updateSingleItemsSocialMedia)
    call_updateSingleItemsSocialMedia
    ;;
    createItemsSocialResponsibility)
    call_createItemsSocialResponsibility
    ;;
    deleteItemsSocialResponsibility)
    call_deleteItemsSocialResponsibility
    ;;
    deleteSingleItemsSocialResponsibility)
    call_deleteSingleItemsSocialResponsibility
    ;;
    readItemsSocialResponsibility)
    call_readItemsSocialResponsibility
    ;;
    readSingleItemsSocialResponsibility)
    call_readSingleItemsSocialResponsibility
    ;;
    updateItemsSocialResponsibility)
    call_updateItemsSocialResponsibility
    ;;
    updateSingleItemsSocialResponsibility)
    call_updateSingleItemsSocialResponsibility
    ;;
    createItemsSuppliers)
    call_createItemsSuppliers
    ;;
    deleteItemsSuppliers)
    call_deleteItemsSuppliers
    ;;
    deleteSingleItemsSuppliers)
    call_deleteSingleItemsSuppliers
    ;;
    readItemsSuppliers)
    call_readItemsSuppliers
    ;;
    readSingleItemsSuppliers)
    call_readSingleItemsSuppliers
    ;;
    updateItemsSuppliers)
    call_updateItemsSuppliers
    ;;
    updateSingleItemsSuppliers)
    call_updateSingleItemsSuppliers
    ;;
    createItemsSurveys)
    call_createItemsSurveys
    ;;
    deleteItemsSurveys)
    call_deleteItemsSurveys
    ;;
    deleteSingleItemsSurveys)
    call_deleteSingleItemsSurveys
    ;;
    readItemsSurveys)
    call_readItemsSurveys
    ;;
    readSingleItemsSurveys)
    call_readSingleItemsSurveys
    ;;
    updateItemsSurveys)
    call_updateItemsSurveys
    ;;
    updateSingleItemsSurveys)
    call_updateSingleItemsSurveys
    ;;
    createItemsSustainableSupplyChain)
    call_createItemsSustainableSupplyChain
    ;;
    deleteItemsSustainableSupplyChain)
    call_deleteItemsSustainableSupplyChain
    ;;
    deleteSingleItemsSustainableSupplyChain)
    call_deleteSingleItemsSustainableSupplyChain
    ;;
    readItemsSustainableSupplyChain)
    call_readItemsSustainableSupplyChain
    ;;
    readSingleItemsSustainableSupplyChain)
    call_readSingleItemsSustainableSupplyChain
    ;;
    updateItemsSustainableSupplyChain)
    call_updateItemsSustainableSupplyChain
    ;;
    updateSingleItemsSustainableSupplyChain)
    call_updateSingleItemsSustainableSupplyChain
    ;;
    createItemsTaxes)
    call_createItemsTaxes
    ;;
    deleteItemsTaxes)
    call_deleteItemsTaxes
    ;;
    deleteSingleItemsTaxes)
    call_deleteSingleItemsTaxes
    ;;
    readItemsTaxes)
    call_readItemsTaxes
    ;;
    readSingleItemsTaxes)
    call_readSingleItemsTaxes
    ;;
    updateItemsTaxes)
    call_updateItemsTaxes
    ;;
    updateSingleItemsTaxes)
    call_updateSingleItemsTaxes
    ;;
    createItemsTraining)
    call_createItemsTraining
    ;;
    deleteItemsTraining)
    call_deleteItemsTraining
    ;;
    deleteSingleItemsTraining)
    call_deleteSingleItemsTraining
    ;;
    readItemsTraining)
    call_readItemsTraining
    ;;
    readSingleItemsTraining)
    call_readSingleItemsTraining
    ;;
    updateItemsTraining)
    call_updateItemsTraining
    ;;
    updateSingleItemsTraining)
    call_updateSingleItemsTraining
    ;;
    createItemsTransactions)
    call_createItemsTransactions
    ;;
    deleteItemsTransactions)
    call_deleteItemsTransactions
    ;;
    deleteSingleItemsTransactions)
    call_deleteSingleItemsTransactions
    ;;
    readItemsTransactions)
    call_readItemsTransactions
    ;;
    readSingleItemsTransactions)
    call_readSingleItemsTransactions
    ;;
    updateItemsTransactions)
    call_updateItemsTransactions
    ;;
    updateSingleItemsTransactions)
    call_updateSingleItemsTransactions
    ;;
    getMyPermissions)
    call_getMyPermissions
    ;;
    getPermission)
    call_getPermission
    ;;
    getPermissions)
    call_getPermissions
    ;;
    createPreset)
    call_createPreset
    ;;
    deletePreset)
    call_deletePreset
    ;;
    deletePresets)
    call_deletePresets
    ;;
    getPreset)
    call_getPreset
    ;;
    getPresets)
    call_getPresets
    ;;
    updatePreset)
    call_updatePreset
    ;;
    updatePresets)
    call_updatePresets
    ;;
    getRelation)
    call_getRelation
    ;;
    getRelations)
    call_getRelations
    ;;
    getRole)
    call_getRole
    ;;
    getRoles)
    call_getRoles
    ;;
    schemaApply)
    call_schemaApply
    ;;
    schemaDiff)
    call_schemaDiff
    ;;
    schemaSnapshot)
    call_schemaSnapshot
    ;;
    ping)
    call_ping
    ;;
    serverInfo)
    call_serverInfo
    ;;
    getSettings)
    call_getSettings
    ;;
    getMe)
    call_getMe
    ;;
    getUser)
    call_getUser
    ;;
    getUsers)
    call_getUsers
    ;;
    updateLastUsedPageMe)
    call_updateLastUsedPageMe
    ;;
    updateMe)
    call_updateMe
    ;;
    updateUser)
    call_updateUser
    ;;
    updateUsers)
    call_updateUsers
    ;;
    clearCache)
    call_clearCache
    ;;
    export)
    call_export
    ;;
    hashGenerate)
    call_hashGenerate
    ;;
    hashVerify)
    call_hashVerify
    ;;
    import)
    call_import
    ;;
    random)
    call_random
    ;;
    sort)
    call_sort
    ;;
    *)
    ERROR_MSG="ERROR: Unknown operation: $operation"
    exit 1
esac
